
LoRa_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003cd0  08003cd0  00004cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d80  08003d80  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d80  08003d80  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d80  08003d80  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d80  08003d80  00004d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003d88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000014  08003d9c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003d9c  000051c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a875  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac2  00000000  00000000  0000f8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  00011b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018325  00000000  00000000  000121db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a46a  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3d8  00000000  00000000  0003496a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfd42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c18  00000000  00000000  000bfd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c19a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cb8 	.word	0x08003cb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003cb8 	.word	0x08003cb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <AT_Config>:
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_Delay(100);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}

void AT_Config(void) {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b09b      	sub	sp, #108	@ 0x6c
 8000224:	af00      	add	r7, sp, #0
	 // AT configuration

	  HAL_UART_Receive_IT(&huart2, temp, 1);   // interrupt initialization
 8000226:	493d      	ldr	r1, [pc, #244]	@ (800031c <AT_Config+0xfc>)
 8000228:	4b3d      	ldr	r3, [pc, #244]	@ (8000320 <AT_Config+0x100>)
 800022a:	2201      	movs	r2, #1
 800022c:	0018      	movs	r0, r3
 800022e:	f002 fb7e 	bl	800292e <HAL_UART_Receive_IT>

	  // +++ to AT mode
	  uint8_t cmd_enter_config[] = {0x2B, 0x2B, 0x2B, 0x0d, 0x0a};
 8000232:	2560      	movs	r5, #96	@ 0x60
 8000234:	197b      	adds	r3, r7, r5
 8000236:	4a3b      	ldr	r2, [pc, #236]	@ (8000324 <AT_Config+0x104>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	6019      	str	r1, [r3, #0]
 800023c:	7912      	ldrb	r2, [r2, #4]
 800023e:	711a      	strb	r2, [r3, #4]

	  // AT+MODE0\r\n
	  uint8_t cmd_mode1[] = {0x41, 0x54, 0x2B, 0x4D, 0x4F, 0x44, 0x45, 0x31, 0x0D, 0x0A};
 8000240:	2654      	movs	r6, #84	@ 0x54
 8000242:	19bb      	adds	r3, r7, r6
 8000244:	4a38      	ldr	r2, [pc, #224]	@ (8000328 <AT_Config+0x108>)
 8000246:	ca03      	ldmia	r2!, {r0, r1}
 8000248:	c303      	stmia	r3!, {r0, r1}
 800024a:	8812      	ldrh	r2, [r2, #0]
 800024c:	801a      	strh	r2, [r3, #0]

	  // AT+LEVEL7\r\n
	  uint8_t cmd_level7[] = {0x41, 0x54, 0x2B, 0x4C, 0x45, 0x56, 0x45, 0x4C, 0x37, 0x0D, 0x0A};
 800024e:	2348      	movs	r3, #72	@ 0x48
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	4a36      	ldr	r2, [pc, #216]	@ (800032c <AT_Config+0x10c>)
 8000254:	ca03      	ldmia	r2!, {r0, r1}
 8000256:	c303      	stmia	r3!, {r0, r1}
 8000258:	8811      	ldrh	r1, [r2, #0]
 800025a:	8019      	strh	r1, [r3, #0]
 800025c:	7892      	ldrb	r2, [r2, #2]
 800025e:	709a      	strb	r2, [r3, #2]

	  // AT+CHANNEL03\r\n
	  uint8_t cmd_channel03[] = {0x41, 0x54, 0x2B, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x30, 0x33, 0x0D, 0x0A};
 8000260:	2238      	movs	r2, #56	@ 0x38
 8000262:	18bb      	adds	r3, r7, r2
 8000264:	4a32      	ldr	r2, [pc, #200]	@ (8000330 <AT_Config+0x110>)
 8000266:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000268:	c313      	stmia	r3!, {r0, r1, r4}
 800026a:	8812      	ldrh	r2, [r2, #0]
 800026c:	801a      	strh	r2, [r3, #0]

	  // AT+MAC0a,02\r\n
	  uint8_t cmd_mac0a02[] = {0x41, 0x54, 0x2B, 0x4D, 0x41, 0x43, 0x30, 0x61, 0x2C, 0x30, 0x32, 0x0D, 0x0A};
 800026e:	2128      	movs	r1, #40	@ 0x28
 8000270:	187b      	adds	r3, r7, r1
 8000272:	4a30      	ldr	r2, [pc, #192]	@ (8000334 <AT_Config+0x114>)
 8000274:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000276:	c313      	stmia	r3!, {r0, r1, r4}
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	701a      	strb	r2, [r3, #0]
	  uint8_t cmd_sf12[] = {0x41, 0x54, 0x2B, 0x53, 0x46, 0x31, 0x32, 0x0D, 0x0A};
 800027c:	241c      	movs	r4, #28
 800027e:	193b      	adds	r3, r7, r4
 8000280:	4a2d      	ldr	r2, [pc, #180]	@ (8000338 <AT_Config+0x118>)
 8000282:	ca03      	ldmia	r2!, {r0, r1}
 8000284:	c303      	stmia	r3!, {r0, r1}
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	701a      	strb	r2, [r3, #0]

	  // AT+POWE22\r\n
	  uint8_t cmd_powe22[] = {0x41, 0x54, 0x2B, 0x50, 0x4F, 0x57, 0x45, 0x32, 0x32, 0x0D, 0x0A};
 800028a:	2010      	movs	r0, #16
 800028c:	183b      	adds	r3, r7, r0
 800028e:	4a2b      	ldr	r2, [pc, #172]	@ (800033c <AT_Config+0x11c>)
 8000290:	ca03      	ldmia	r2!, {r0, r1}
 8000292:	c303      	stmia	r3!, {r0, r1}
 8000294:	8811      	ldrh	r1, [r2, #0]
 8000296:	8019      	strh	r1, [r3, #0]
 8000298:	7892      	ldrb	r2, [r2, #2]
 800029a:	709a      	strb	r2, [r3, #2]

	    // AT+RESET\r\n
	    uint8_t cmd_reset[] = {0x41, 0x54, 0x2B, 0x52, 0x45, 0x53, 0x45, 0x54, 0x0D, 0x0A};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4a28      	ldr	r2, [pc, #160]	@ (8000340 <AT_Config+0x120>)
 80002a0:	ca03      	ldmia	r2!, {r0, r1}
 80002a2:	c303      	stmia	r3!, {r0, r1}
 80002a4:	8812      	ldrh	r2, [r2, #0]
 80002a6:	801a      	strh	r2, [r3, #0]

		// should receive "Entry AT\r\n" or something
		// HAL_Delay(6000); // A small delay is often good practice after commands
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 80002a8:	197b      	adds	r3, r7, r5
 80002aa:	2105      	movs	r1, #5
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fabb 	bl	8000828 <send_command_and_wait>
		// Set transmission mode
	  send_command_and_wait(cmd_mode1, sizeof(cmd_mode1));
 80002b2:	19bb      	adds	r3, r7, r6
 80002b4:	210a      	movs	r1, #10
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fab6 	bl	8000828 <send_command_and_wait>
		// HAL_Delay(6000);
	  // Set air data rate level
	  send_command_and_wait(cmd_level7, sizeof(cmd_level7));
 80002bc:	2348      	movs	r3, #72	@ 0x48
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	210b      	movs	r1, #11
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fab0 	bl	8000828 <send_command_and_wait>
	  // Set frequency channel
	  send_command_and_wait(cmd_channel03, sizeof(cmd_channel03));
 80002c8:	2238      	movs	r2, #56	@ 0x38
 80002ca:	18bb      	adds	r3, r7, r2
 80002cc:	210e      	movs	r1, #14
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 faaa 	bl	8000828 <send_command_and_wait>
	  // Set device address
	  send_command_and_wait(cmd_mac0a02, sizeof(cmd_mac0a02));
 80002d4:	2128      	movs	r1, #40	@ 0x28
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	210d      	movs	r1, #13
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 faa4 	bl	8000828 <send_command_and_wait>
	  // Set TX power
	  send_command_and_wait(cmd_powe22, sizeof(cmd_powe22));
 80002e0:	2010      	movs	r0, #16
 80002e2:	183b      	adds	r3, r7, r0
 80002e4:	210b      	movs	r1, #11
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fa9e 	bl	8000828 <send_command_and_wait>
	  //send SF
	  send_command_and_wait(cmd_sf12, sizeof(cmd_sf12));
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2109      	movs	r1, #9
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fa99 	bl	8000828 <send_command_and_wait>
	  // check AT for OK
	  // Reset the module to apply settings
	  send_command_and_wait(cmd_reset, sizeof(cmd_reset));
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	210a      	movs	r1, #10
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fa94 	bl	8000828 <send_command_and_wait>
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 8000300:	197b      	adds	r3, r7, r5
 8000302:	2105      	movs	r1, #5
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fa8f 	bl	8000828 <send_command_and_wait>
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 800030a:	197b      	adds	r3, r7, r5
 800030c:	2105      	movs	r1, #5
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fa8a 	bl	8000828 <send_command_and_wait>


}
 8000314:	46c0      	nop			@ (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b01b      	add	sp, #108	@ 0x6c
 800031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031c:	20000108 	.word	0x20000108
 8000320:	20000058 	.word	0x20000058
 8000324:	08003cd0 	.word	0x08003cd0
 8000328:	08003cd8 	.word	0x08003cd8
 800032c:	08003ce4 	.word	0x08003ce4
 8000330:	08003cf0 	.word	0x08003cf0
 8000334:	08003d00 	.word	0x08003d00
 8000338:	08003d10 	.word	0x08003d10
 800033c:	08003d1c 	.word	0x08003d1c
 8000340:	08003d28 	.word	0x08003d28

08000344 <CAN_Config>:

void CAN_Config(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	@ 0x38
 8000348:	af00      	add	r7, sp, #0
	// CAN Initialization

	  uint8_t bigData[20] = { /* ... */ };
 800034a:	2324      	movs	r3, #36	@ 0x24
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2314      	movs	r3, #20
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f003 fc79 	bl	8003c4c <memset>

	  CAN_TxHeaderTypeDef txHeader;
		  // uint8_t txData[20];
		  uint32_t txMailbox;

		  txHeader.StdId = 0x123;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2224      	movs	r2, #36	@ 0x24
 800035e:	32ff      	adds	r2, #255	@ 0xff
 8000360:	601a      	str	r2, [r3, #0]
		  txHeader.RTR = CAN_RTR_DATA;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
		  txHeader.IDE = CAN_ID_STD;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
		  txHeader.DLC = 2;			// sending 16
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2202      	movs	r2, #2
 8000372:	611a      	str	r2, [r3, #16]
		  txHeader.TransmitGlobalTime = DISABLE;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	751a      	strb	r2, [r3, #20]

		// https://github.com/timsonater/stm32-CAN-bus-example-HAL-API/blob/master/main.c

		pHeader.DLC=1; //give message size of 1 byte
 800037a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <CAN_Config+0xa8>)
 800037c:	2201      	movs	r2, #1
 800037e:	611a      	str	r2, [r3, #16]
		pHeader.IDE=CAN_ID_STD; //set identifier to standard
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <CAN_Config+0xa8>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
		pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 8000386:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <CAN_Config+0xa8>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
		pHeader.StdId=0x244; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <CAN_Config+0xa8>)
 800038e:	2291      	movs	r2, #145	@ 0x91
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	601a      	str	r2, [r3, #0]

		//filter one (stack light blink)
		sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 8000394:	4b16      	ldr	r3, [pc, #88]	@ (80003f0 <CAN_Config+0xac>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterIdHigh=0x245<<5; //the ID that the filter looks for (switch this for the other microcontroller)
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <CAN_Config+0xac>)
 800039c:	4a15      	ldr	r2, [pc, #84]	@ (80003f4 <CAN_Config+0xb0>)
 800039e:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow=0;
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <CAN_Config+0xac>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh=0;
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <CAN_Config+0xac>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow=0;
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <CAN_Config+0xac>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <CAN_Config+0xac>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterActivation=ENABLE;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <CAN_Config+0xac>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	621a      	str	r2, [r3, #32]

		HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 80003be:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <CAN_Config+0xac>)
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <CAN_Config+0xb4>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fd2f 	bl	8000e28 <HAL_CAN_ConfigFilter>

	  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <CAN_Config+0xb4>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fe1d 	bl	800100c <HAL_CAN_Start>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <CAN_Config+0x96>
	  {
	    Error_Handler();
 80003d6:	f000 fa4b 	bl	8000870 <Error_Handler>
	  }
	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <CAN_Config+0xb4>)
 80003dc:	2102      	movs	r1, #2
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff85 	bl	80012ee <HAL_CAN_ActivateNotification>

}
 80003e4:	46c0      	nop			@ (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b00e      	add	sp, #56	@ 0x38
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000180 	.word	0x20000180
 80003f0:	20000198 	.word	0x20000198
 80003f4:	000048a0 	.word	0x000048a0
 80003f8:	20000030 	.word	0x20000030

080003fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]

		uint8_t received_byte = temp[0];
 8000404:	210f      	movs	r1, #15
 8000406:	187b      	adds	r3, r7, r1
 8000408:	4a1a      	ldr	r2, [pc, #104]	@ (8000474 <HAL_UART_RxCpltCallback+0x78>)
 800040a:	7812      	ldrb	r2, [r2, #0]
 800040c:	701a      	strb	r2, [r3, #0]

		// if ends with \n, then message complete
		if (received_byte == 0x0a) {
 800040e:	187b      	adds	r3, r7, r1
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d102      	bne.n	800041c <HAL_UART_RxCpltCallback+0x20>
			message_received_flag = 1;
 8000416:	4b18      	ldr	r3, [pc, #96]	@ (8000478 <HAL_UART_RxCpltCallback+0x7c>)
 8000418:	2201      	movs	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
		}
		// if not complete message or not max length, store it
		if (indx < (MAX_MESSAGE_LENGTH - 1) && message_received_flag == 0) { // Leave 1 byte for null terminator
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <HAL_UART_RxCpltCallback+0x80>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	429a      	cmp	r2, r3
 8000428:	dd10      	ble.n	800044c <HAL_UART_RxCpltCallback+0x50>
 800042a:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <HAL_UART_RxCpltCallback+0x7c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10c      	bne.n	800044c <HAL_UART_RxCpltCallback+0x50>
			RxData[indx] = received_byte;
 8000432:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <HAL_UART_RxCpltCallback+0x88>)
 8000438:	210f      	movs	r1, #15
 800043a:	1879      	adds	r1, r7, r1
 800043c:	7809      	ldrb	r1, [r1, #0]
 800043e:	54d1      	strb	r1, [r2, r3]
			indx++;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	e009      	b.n	8000460 <HAL_UART_RxCpltCallback+0x64>
		}
		else if (indx >= (MAX_MESSAGE_LENGTH - 1)) {
 800044c:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <HAL_UART_RxCpltCallback+0x80>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	dc02      	bgt.n	8000460 <HAL_UART_RxCpltCallback+0x64>
			// Buffer overflow occurred before newline, treat as error/reset
			indx = 0;
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_UART_RxCpltCallback+0x84>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
		}

		// Restart the interrupt
		HAL_UART_Receive_IT(&huart2, temp, 1);
 8000460:	4904      	ldr	r1, [pc, #16]	@ (8000474 <HAL_UART_RxCpltCallback+0x78>)
 8000462:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <HAL_UART_RxCpltCallback+0x8c>)
 8000464:	2201      	movs	r2, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f002 fa61 	bl	800292e <HAL_UART_Receive_IT>

}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b004      	add	sp, #16
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000108 	.word	0x20000108
 8000478:	20000170 	.word	0x20000170
 800047c:	20000000 	.word	0x20000000
 8000480:	2000016c 	.word	0x2000016c
 8000484:	200000f4 	.word	0x200000f4
 8000488:	20000058 	.word	0x20000058

0800048c <HAL_CAN_RxFifo0MsgPendingCallback>:


// Called automatically when a new frame lands in FIFO0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	@ 0x28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, CAN_rx_data) != HAL_OK) {
 8000494:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000496:	2208      	movs	r2, #8
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	f000 fdfb 	bl	8001098 <HAL_CAN_GetRxMessage>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler(); // error handling
 80004a6:	f000 f9e3 	bl	8000870 <Error_Handler>
	}

	// Example: check ID, length, print/process
	if (rxHeader.IDE == CAN_ID_STD) {
 80004aa:	2208      	movs	r2, #8
 80004ac:	18bb      	adds	r3, r7, r2
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d108      	bne.n	80004c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		CAN_rx_len = rxHeader.DLC;
 80004b4:	18bb      	adds	r3, r7, r2
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80004bc:	701a      	strb	r2, [r3, #0]
		CAN_received = 1;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
		uint32_t id = rxHeader.ExtId;     // 29-bit
		// TODO: handle extended ID
	}


}
 80004c4:	e003      	b.n	80004ce <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		uint32_t id = rxHeader.ExtId;     // 29-bit
 80004c6:	2308      	movs	r3, #8
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b00a      	add	sp, #40	@ 0x28
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	20000178 	.word	0x20000178
 80004dc:	20000004 	.word	0x20000004
 80004e0:	20000174 	.word	0x20000174

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fb17 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f88b 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f93d 	bl	8000770 <MX_GPIO_Init>
  MX_CAN_Init();
 80004f6:	f000 f8d3 	bl	80006a0 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f909 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  AT_Config();
 80004fe:	f7ff fe8f 	bl	8000220 <AT_Config>

  CAN_Config();
 8000502:	f7ff ff1f 	bl	8000344 <CAN_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	if (message_received_flag)
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <main+0x100>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00d      	beq.n	800052a <main+0x46>
	  	{
	  		// indx holds the number of bytes received (up to, but not including, the '\n')
	  		memcpy(FinalData, RxData, indx);
 800050e:	4b36      	ldr	r3, [pc, #216]	@ (80005e8 <main+0x104>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	001a      	movs	r2, r3
 8000514:	4935      	ldr	r1, [pc, #212]	@ (80005ec <main+0x108>)
 8000516:	4b36      	ldr	r3, [pc, #216]	@ (80005f0 <main+0x10c>)
 8000518:	0018      	movs	r0, r3
 800051a:	f003 fbc3 	bl	8003ca4 <memcpy>

	  		// Toggle the LED to signal received
	  		//toggle_LED();

	  		// clear the flag and reset index
	  		message_received_flag = 0;
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <main+0x100>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
	  		indx = 0;
 8000524:	4b30      	ldr	r3, [pc, #192]	@ (80005e8 <main+0x104>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
	  	}


	// 1. Transmit the UART message.
	// address 0a01, channel 3, "selena"
	uint8_t lora_message[] = {0x0A, 0x01, 0x03, 0x73, 0x65, 0x6C, 0x65, 0x6E, 0x61, 0x0D, 0x0A};
 800052a:	240c      	movs	r4, #12
 800052c:	193b      	adds	r3, r7, r4
 800052e:	4a31      	ldr	r2, [pc, #196]	@ (80005f4 <main+0x110>)
 8000530:	ca03      	ldmia	r2!, {r0, r1}
 8000532:	c303      	stmia	r3!, {r0, r1}
 8000534:	8811      	ldrh	r1, [r2, #0]
 8000536:	8019      	strh	r1, [r3, #0]
 8000538:	7892      	ldrb	r2, [r2, #2]
 800053a:	709a      	strb	r2, [r3, #2]
	send_at_command(lora_message, sizeof(lora_message));
 800053c:	193b      	adds	r3, r7, r4
 800053e:	210b      	movs	r1, #11
 8000540:	0018      	movs	r0, r3
 8000542:	f000 f95d 	bl	8000800 <send_at_command>
	HAL_Delay(100);
 8000546:	2064      	movs	r0, #100	@ 0x64
 8000548:	f000 fb4c 	bl	8000be4 <HAL_Delay>

	message_received_flag = 0;
 800054c:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <main+0x100>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	indx = 0;
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <main+0x104>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	uint8_t testmessage[] = {0x65, 0x6C, 0x65, 0x6E, 0x61, 0x0D, 0x0A};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <main+0x114>)
 800055c:	6811      	ldr	r1, [r2, #0]
 800055e:	6019      	str	r1, [r3, #0]
 8000560:	8891      	ldrh	r1, [r2, #4]
 8000562:	8099      	strh	r1, [r3, #4]
 8000564:	7992      	ldrb	r2, [r2, #6]
 8000566:	719a      	strb	r2, [r3, #6]
	if (CAN_received) {
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <main+0x118>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0ca      	beq.n	8000506 <main+0x22>
		send_at_command(CAN_rx_data, CAN_rx_len);
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <main+0x11c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	001a      	movs	r2, r3
 8000576:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <main+0x120>)
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f940 	bl	8000800 <send_at_command>
		if (CAN_rx_data[0] == testmessage[0] &&
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <main+0x120>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d123      	bne.n	80005d4 <main+0xf0>
		    CAN_rx_data[1] == testmessage[1] &&
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0x120>)
 800058e:	785a      	ldrb	r2, [r3, #1]
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	785b      	ldrb	r3, [r3, #1]
		if (CAN_rx_data[0] == testmessage[0] &&
 8000594:	429a      	cmp	r2, r3
 8000596:	d11d      	bne.n	80005d4 <main+0xf0>
		    CAN_rx_data[2] == testmessage[2] &&
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0x120>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	789b      	ldrb	r3, [r3, #2]
		    CAN_rx_data[1] == testmessage[1] &&
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d117      	bne.n	80005d4 <main+0xf0>
		    CAN_rx_data[3] == testmessage[3] &&
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0x120>)
 80005a6:	78da      	ldrb	r2, [r3, #3]
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	78db      	ldrb	r3, [r3, #3]
		    CAN_rx_data[2] == testmessage[2] &&
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d111      	bne.n	80005d4 <main+0xf0>
		    CAN_rx_data[4] == testmessage[4] &&
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <main+0x120>)
 80005b2:	791a      	ldrb	r2, [r3, #4]
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	791b      	ldrb	r3, [r3, #4]
		    CAN_rx_data[3] == testmessage[3] &&
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d10b      	bne.n	80005d4 <main+0xf0>
		    CAN_rx_data[5] == testmessage[5]) {
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <main+0x120>)
 80005be:	795a      	ldrb	r2, [r3, #5]
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	795b      	ldrb	r3, [r3, #5]
		    CAN_rx_data[4] == testmessage[4] &&
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d105      	bne.n	80005d4 <main+0xf0>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005c8:	2390      	movs	r3, #144	@ 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2120      	movs	r1, #32
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fbad 	bl	8001d2e <HAL_GPIO_TogglePin>
		}
		CAN_rx_data[0] = 0;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <main+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		CAN_received = 0;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <main+0x118>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
  {
 80005e0:	e791      	b.n	8000506 <main+0x22>
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	20000170 	.word	0x20000170
 80005e8:	2000016c 	.word	0x2000016c
 80005ec:	200000f4 	.word	0x200000f4
 80005f0:	200000e0 	.word	0x200000e0
 80005f4:	08003d34 	.word	0x08003d34
 80005f8:	08003d40 	.word	0x08003d40
 80005fc:	20000174 	.word	0x20000174
 8000600:	20000004 	.word	0x20000004
 8000604:	20000178 	.word	0x20000178

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b093      	sub	sp, #76	@ 0x4c
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	2414      	movs	r4, #20
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2334      	movs	r3, #52	@ 0x34
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f003 fb17 	bl	8003c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	2310      	movs	r3, #16
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f003 fb10 	bl	8003c4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	0021      	movs	r1, r4
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2210      	movs	r2, #16
 800063e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2202      	movs	r2, #2
 8000644:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	0212      	lsls	r2, r2, #8
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	0352      	lsls	r2, r2, #13
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	187b      	adds	r3, r7, r1
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fb80 	bl	8001d64 <HAL_RCC_OscConfig>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000668:	f000 f902 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2202      	movs	r2, #2
 8000676:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2101      	movs	r1, #1
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fef1 	bl	8002470 <HAL_RCC_ClockConfig>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000692:	f000 f8ed 	bl	8000870 <Error_Handler>
  }
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b013      	add	sp, #76	@ 0x4c
 800069c:	bd90      	pop	{r4, r7, pc}
	...

080006a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_CAN_Init+0x68>)
 80006a6:	4a19      	ldr	r2, [pc, #100]	@ (800070c <MX_CAN_Init+0x6c>)
 80006a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_CAN_Init+0x68>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_CAN_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_CAN_Init+0x68>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_CAN_Init+0x68>)
 80006be:	22c0      	movs	r2, #192	@ 0xc0
 80006c0:	0312      	lsls	r2, r2, #12
 80006c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_CAN_Init+0x68>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	0352      	lsls	r2, r2, #13
 80006ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_CAN_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_CAN_Init+0x68>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_CAN_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_CAN_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_CAN_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_CAN_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <MX_CAN_Init+0x68>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fa9a 	bl	8000c2c <HAL_CAN_Init>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f8b8 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	20000030 	.word	0x20000030
 800070c:	40006400 	.word	0x40006400

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	2296      	movs	r2, #150	@ 0x96
 800071e:	0192      	lsls	r2, r2, #6
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fff7 	bl	8002748 <HAL_UART_Init>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f887 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000058 	.word	0x20000058
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	240c      	movs	r4, #12
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	2314      	movs	r3, #20
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 fa63 	bl	8003c4c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_GPIO_Init+0x8c>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_GPIO_Init+0x8c>)
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	03c9      	lsls	r1, r1, #15
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_GPIO_Init+0x8c>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	03db      	lsls	r3, r3, #15
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0289      	lsls	r1, r1, #10
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_GPIO_Init+0x8c>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	029b      	lsls	r3, r3, #10
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007be:	2390      	movs	r3, #144	@ 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fa94 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2220      	movs	r2, #32
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	187a      	adds	r2, r7, r1
 80007e8:	2390      	movs	r3, #144	@ 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 f918 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b009      	add	sp, #36	@ 0x24
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <send_at_command>:
  * @param  huart: UART handle
  * @retval None
  */


void send_at_command(const uint8_t* hex_cmd, uint16_t len) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	000a      	movs	r2, r1
 800080a:	1cbb      	adds	r3, r7, #2
 800080c:	801a      	strh	r2, [r3, #0]
    // Buffer to hold the command plus the required "\r\n"
	HAL_UART_Transmit(&huart2, (uint8_t*)hex_cmd, len, 100);
 800080e:	1cbb      	adds	r3, r7, #2
 8000810:	881a      	ldrh	r2, [r3, #0]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <send_at_command+0x24>)
 8000816:	2364      	movs	r3, #100	@ 0x64
 8000818:	f001 ffea 	bl	80027f0 <HAL_UART_Transmit>
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000058 	.word	0x20000058

08000828 <send_command_and_wait>:

void send_command_and_wait(const uint8_t* cmd, uint16_t len) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	000a      	movs	r2, r1
 8000832:	1cbb      	adds	r3, r7, #2
 8000834:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)cmd, len, 100);
 8000836:	1cbb      	adds	r3, r7, #2
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <send_command_and_wait+0x3c>)
 800083e:	2364      	movs	r3, #100	@ 0x64
 8000840:	f001 ffd6 	bl	80027f0 <HAL_UART_Transmit>
    while (message_received_flag == 0) {}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <send_command_and_wait+0x40>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0fb      	beq.n	8000846 <send_command_and_wait+0x1e>
    message_received_flag = 0;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <send_command_and_wait+0x40>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
    indx = 0;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <send_command_and_wait+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000058 	.word	0x20000058
 8000868:	20000170 	.word	0x20000170
 800086c:	2000016c 	.word	0x2000016c

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_MspInit+0x50>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_MspInit+0x50>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x50>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x50>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x50>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61da      	str	r2, [r3, #28]
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x50>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x54>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <HAL_MspInit+0x54>)
 80008bc:	2110      	movs	r1, #16
 80008be:	430a      	orrs	r2, r1
 80008c0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010000 	.word	0x40010000

080008d4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	@ 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2414      	movs	r4, #20
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f003 f9b0 	bl	8003c4c <memset>
  if(hcan->Instance==CAN)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <HAL_CAN_MspInit+0xa4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d13b      	bne.n	800096e <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 80008f8:	69da      	ldr	r2, [r3, #28]
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	0489      	lsls	r1, r1, #18
 8000900:	430a      	orrs	r2, r1
 8000902:	61da      	str	r2, [r3, #28]
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 8000906:	69da      	ldr	r2, [r3, #28]
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	049b      	lsls	r3, r3, #18
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	0289      	lsls	r1, r1, #10
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <HAL_CAN_MspInit+0xa8>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	029b      	lsls	r3, r3, #10
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	22c0      	movs	r2, #192	@ 0xc0
 8000932:	0152      	lsls	r2, r2, #5
 8000934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2202      	movs	r2, #2
 800093c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2203      	movs	r2, #3
 8000948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2204      	movs	r2, #4
 800094e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	187a      	adds	r2, r7, r1
 8000952:	2390      	movs	r3, #144	@ 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f863 	bl	8001a24 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	201e      	movs	r0, #30
 8000964:	f000 ffae 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000968:	201e      	movs	r0, #30
 800096a:	f000 ffc0 	bl	80018ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b00b      	add	sp, #44	@ 0x2c
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40006400 	.word	0x40006400
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	@ 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2414      	movs	r4, #20
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 f95a 	bl	8003c4c <memset>
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <HAL_UART_MspInit+0xa0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d13a      	bne.n	8000a18 <HAL_UART_MspInit+0x98>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009a4:	69da      	ldr	r2, [r3, #28]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	0289      	lsls	r1, r1, #10
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009b2:	69da      	ldr	r2, [r3, #28]
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0289      	lsls	r1, r1, #10
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0xa4>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2203      	movs	r2, #3
 80009f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	2390      	movs	r3, #144	@ 0x90
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f80e 	bl	8001a24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	201c      	movs	r0, #28
 8000a0e:	f000 ff59 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 ff6b 	bl	80018ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b00b      	add	sp, #44	@ 0x2c
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f8ac 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <USART2_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 ffba 	bl	80029dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	20000058 	.word	0x20000058

08000a74 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <CEC_CAN_IRQHandler+0x14>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fc61 	bl	8001342 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	20000030 	.word	0x20000030

08000a8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a98:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a9c:	f7ff fff6 	bl	8000a8c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000aa0:	4812      	ldr	r0, [pc, #72]	@ (8000aec <LoopForever+0x6>)
    LDR R1, [R0]
 8000aa2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000aa4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <LoopForever+0xa>)
    CMP R1, R2
 8000aa8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000aaa:	d105      	bne.n	8000ab8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000aac:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000aae:	4912      	ldr	r1, [pc, #72]	@ (8000af8 <LoopForever+0x12>)
    STR R1, [R0]
 8000ab0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ab4:	4912      	ldr	r1, [pc, #72]	@ (8000b00 <LoopForever+0x1a>)
    STR R1, [R0]
 8000ab6:	6001      	str	r1, [r0, #0]

08000ab8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000aba:	4913      	ldr	r1, [pc, #76]	@ (8000b08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000abc:	4a13      	ldr	r2, [pc, #76]	@ (8000b0c <LoopForever+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ad0:	4c10      	ldr	r4, [pc, #64]	@ (8000b14 <LoopForever+0x2e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f003 f8bd 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fcff 	bl	80004e4 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000aec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000af0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000af4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000af8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000afc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b0c:	08003d88 	.word	0x08003d88
  ldr r2, =_sbss
 8000b10:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b14:	200001c4 	.word	0x200001c4

08000b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_IRQHandler>
	...

08000b1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_Init+0x24>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_Init+0x24>)
 8000b26:	2110      	movs	r1, #16
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f809 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b32:	f7ff fea3 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_InitTick+0x5c>)
 8000b4e:	681c      	ldr	r4, [r3, #0]
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <HAL_InitTick+0x60>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	0019      	movs	r1, r3
 8000b56:	23fa      	movs	r3, #250	@ 0xfa
 8000b58:	0098      	lsls	r0, r3, #2
 8000b5a:	f7ff fad5 	bl	8000108 <__udivsi3>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	0019      	movs	r1, r3
 8000b62:	0020      	movs	r0, r4
 8000b64:	f7ff fad0 	bl	8000108 <__udivsi3>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fecf 	bl	800190e <HAL_SYSTICK_Config>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e00f      	b.n	8000b98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d80b      	bhi.n	8000b96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2301      	movs	r3, #1
 8000b82:	425b      	negs	r3, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fe9c 	bl	80018c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x64>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	2000000c 	.word	0x2000000c

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HAL_IncTick+0x1c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	18d2      	adds	r2, r2, r3
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	20000010 	.word	0x20000010
 8000bcc:	200001c0 	.word	0x200001c0

08000bd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	@ (8000be0 <HAL_GetTick+0x10>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	200001c0 	.word	0x200001c0

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff fff0 	bl	8000bd0 <HAL_GetTick>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001a      	movs	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	f7ff ffe0 	bl	8000bd0 <HAL_GetTick>
 8000c10:	0002      	movs	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	20000010 	.word	0x20000010

08000c2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0f0      	b.n	8000e20 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2220      	movs	r2, #32
 8000c42:	5c9b      	ldrb	r3, [r3, r2]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fe41 	bl	80008d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c62:	f7ff ffb5 	bl	8000bd0 <HAL_GetTick>
 8000c66:	0003      	movs	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c6a:	e013      	b.n	8000c94 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c6c:	f7ff ffb0 	bl	8000bd0 <HAL_GetTick>
 8000c70:	0002      	movs	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d90c      	bls.n	8000c94 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	0292      	lsls	r2, r2, #10
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e0c5      	b.n	8000e20 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d0e5      	beq.n	8000c6c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2102      	movs	r1, #2
 8000cac:	438a      	bics	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb0:	f7ff ff8e 	bl	8000bd0 <HAL_GetTick>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cb8:	e013      	b.n	8000ce2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cba:	f7ff ff89 	bl	8000bd0 <HAL_GetTick>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b0a      	cmp	r3, #10
 8000cc6:	d90c      	bls.n	8000ce2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	0292      	lsls	r2, r2, #10
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2105      	movs	r1, #5
 8000cdc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e09e      	b.n	8000e20 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1e5      	bne.n	8000cba <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7e1b      	ldrb	r3, [r3, #24]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e007      	b.n	8000d18 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	438a      	bics	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7e5b      	ldrb	r3, [r3, #25]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d108      	bne.n	8000d32 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2140      	movs	r1, #64	@ 0x40
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2140      	movs	r1, #64	@ 0x40
 8000d3e:	438a      	bics	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7e9b      	ldrb	r3, [r3, #26]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2120      	movs	r1, #32
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2120      	movs	r1, #32
 8000d68:	438a      	bics	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7edb      	ldrb	r3, [r3, #27]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d108      	bne.n	8000d86 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2110      	movs	r1, #16
 8000d80:	438a      	bics	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2110      	movs	r1, #16
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7f1b      	ldrb	r3, [r3, #28]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2108      	movs	r1, #8
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2108      	movs	r1, #8
 8000dbc:	438a      	bics	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7f5b      	ldrb	r3, [r3, #29]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2104      	movs	r1, #4
 8000de6:	438a      	bics	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	0011      	movs	r1, r2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e38:	2013      	movs	r0, #19
 8000e3a:	183b      	adds	r3, r7, r0
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	2120      	movs	r1, #32
 8000e40:	5c52      	ldrb	r2, [r2, r1]
 8000e42:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e44:	0002      	movs	r2, r0
 8000e46:	18bb      	adds	r3, r7, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d004      	beq.n	8000e58 <HAL_CAN_ConfigFilter+0x30>
 8000e4e:	18bb      	adds	r3, r7, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d000      	beq.n	8000e58 <HAL_CAN_ConfigFilter+0x30>
 8000e56:	e0cd      	b.n	8000ff4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	58d3      	ldr	r3, [r2, r3]
 8000e60:	2201      	movs	r2, #1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	0011      	movs	r1, r2
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	221f      	movs	r2, #31
 8000e74:	4013      	ands	r3, r2
 8000e76:	2201      	movs	r2, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	2387      	movs	r3, #135	@ 0x87
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	58d3      	ldr	r3, [r2, r3]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	2387      	movs	r3, #135	@ 0x87
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d129      	bne.n	8000ef2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	2383      	movs	r3, #131	@ 0x83
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	43d2      	mvns	r2, r2
 8000eaa:	401a      	ands	r2, r3
 8000eac:	0011      	movs	r1, r2
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	2383      	movs	r3, #131	@ 0x83
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	041b      	lsls	r3, r3, #16
 8000ec2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3248      	adds	r2, #72	@ 0x48
 8000ece:	00d2      	lsls	r2, r2, #3
 8000ed0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee6:	6979      	ldr	r1, [r7, #20]
 8000ee8:	3348      	adds	r3, #72	@ 0x48
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	18cb      	adds	r3, r1, r3
 8000eee:	3304      	adds	r3, #4
 8000ef0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d128      	bne.n	8000f4c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	2383      	movs	r3, #131	@ 0x83
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	58d2      	ldr	r2, [r2, r3]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	0011      	movs	r1, r2
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	2383      	movs	r3, #131	@ 0x83
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f22:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3248      	adds	r2, #72	@ 0x48
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f40:	6979      	ldr	r1, [r7, #20]
 8000f42:	3348      	adds	r3, #72	@ 0x48
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	18cb      	adds	r3, r1, r3
 8000f48:	3304      	adds	r3, #4
 8000f4a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	2381      	movs	r3, #129	@ 0x81
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	58d3      	ldr	r3, [r2, r3]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	43d2      	mvns	r2, r2
 8000f60:	401a      	ands	r2, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	2381      	movs	r3, #129	@ 0x81
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	50d1      	str	r1, [r2, r3]
 8000f6c:	e00a      	b.n	8000f84 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	2381      	movs	r3, #129	@ 0x81
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	58d2      	ldr	r2, [r2, r3]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	2381      	movs	r3, #129	@ 0x81
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2385      	movs	r3, #133	@ 0x85
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	58d3      	ldr	r3, [r2, r3]
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	43d2      	mvns	r2, r2
 8000f98:	401a      	ands	r2, r3
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2385      	movs	r3, #133	@ 0x85
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	50d1      	str	r1, [r2, r3]
 8000fa4:	e00a      	b.n	8000fbc <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	2385      	movs	r3, #133	@ 0x85
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	58d2      	ldr	r2, [r2, r3]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2385      	movs	r3, #133	@ 0x85
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10a      	bne.n	8000fda <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	2387      	movs	r3, #135	@ 0x87
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	58d2      	ldr	r2, [r2, r3]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	2387      	movs	r3, #135	@ 0x87
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	58d3      	ldr	r3, [r2, r3]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4393      	bics	r3, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e007      	b.n	8001004 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	02d2      	lsls	r2, r2, #11
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
  }
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b006      	add	sp, #24
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2220      	movs	r2, #32
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d12f      	bne.n	8001080 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2220      	movs	r2, #32
 8001024:	2102      	movs	r1, #2
 8001026:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001038:	f7ff fdca 	bl	8000bd0 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001040:	e013      	b.n	800106a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001042:	f7ff fdc5 	bl	8000bd0 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b0a      	cmp	r3, #10
 800104e:	d90c      	bls.n	800106a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	0292      	lsls	r2, r2, #10
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2220      	movs	r2, #32
 8001062:	2105      	movs	r1, #5
 8001064:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e012      	b.n	8001090 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	4013      	ands	r3, r2
 8001074:	d1e5      	bne.n	8001042 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e007      	b.n	8001090 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
  }
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010a6:	2017      	movs	r0, #23
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	2120      	movs	r1, #32
 80010ae:	5c52      	ldrb	r2, [r2, r1]
 80010b0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010b2:	0002      	movs	r2, r0
 80010b4:	18bb      	adds	r3, r7, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d004      	beq.n	80010c6 <HAL_CAN_GetRxMessage+0x2e>
 80010bc:	18bb      	adds	r3, r7, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d000      	beq.n	80010c6 <HAL_CAN_GetRxMessage+0x2e>
 80010c4:	e107      	b.n	80012d6 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10e      	bne.n	80010ea <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4013      	ands	r3, r2
 80010d6:	d117      	bne.n	8001108 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	0392      	lsls	r2, r2, #14
 80010e0:	431a      	orrs	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0fd      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	2203      	movs	r2, #3
 80010f2:	4013      	ands	r3, r2
 80010f4:	d108      	bne.n	8001108 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	0392      	lsls	r2, r2, #14
 80010fe:	431a      	orrs	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0ee      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	321b      	adds	r2, #27
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	58d3      	ldr	r3, [r2, r3]
 8001114:	2204      	movs	r2, #4
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	321b      	adds	r2, #27
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	58d3      	ldr	r3, [r2, r3]
 8001130:	0d5b      	lsrs	r3, r3, #21
 8001132:	055b      	lsls	r3, r3, #21
 8001134:	0d5a      	lsrs	r2, r3, #21
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e00a      	b.n	8001152 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	321b      	adds	r2, #27
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	58d3      	ldr	r3, [r2, r3]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	321b      	adds	r2, #27
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	58d3      	ldr	r3, [r2, r3]
 800115e:	2202      	movs	r2, #2
 8001160:	401a      	ands	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	331b      	adds	r3, #27
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	3304      	adds	r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2208      	movs	r2, #8
 8001178:	4013      	ands	r3, r2
 800117a:	d003      	beq.n	8001184 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2208      	movs	r2, #8
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	e00b      	b.n	800119c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	331b      	adds	r3, #27
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	18d3      	adds	r3, r2, r3
 8001190:	3304      	adds	r3, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	331b      	adds	r3, #27
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	3304      	adds	r3, #4
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	22ff      	movs	r2, #255	@ 0xff
 80011b0:	401a      	ands	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	331b      	adds	r3, #27
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	3304      	adds	r3, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	041b      	lsls	r3, r3, #16
 80011ca:	0c1a      	lsrs	r2, r3, #16
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	23dc      	movs	r3, #220	@ 0xdc
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	188a      	adds	r2, r1, r2
 80011de:	18d3      	adds	r3, r2, r3
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	23dc      	movs	r3, #220	@ 0xdc
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	188a      	adds	r2, r1, r2
 80011f6:	18d3      	adds	r3, r2, r3
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0a1a      	lsrs	r2, r3, #8
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	23dc      	movs	r3, #220	@ 0xdc
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	188a      	adds	r2, r1, r2
 8001212:	18d3      	adds	r3, r2, r3
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0c1a      	lsrs	r2, r3, #16
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3302      	adds	r3, #2
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	23dc      	movs	r3, #220	@ 0xdc
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	188a      	adds	r2, r1, r2
 800122e:	18d3      	adds	r3, r2, r3
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0e1a      	lsrs	r2, r3, #24
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3303      	adds	r3, #3
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	23de      	movs	r3, #222	@ 0xde
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	188a      	adds	r2, r1, r2
 800124a:	18d3      	adds	r3, r2, r3
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	23de      	movs	r3, #222	@ 0xde
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	188a      	adds	r2, r1, r2
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0a1a      	lsrs	r2, r3, #8
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3305      	adds	r3, #5
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	23de      	movs	r3, #222	@ 0xde
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	188a      	adds	r2, r1, r2
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1a      	lsrs	r2, r3, #16
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3306      	adds	r3, #6
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	23de      	movs	r3, #222	@ 0xde
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	188a      	adds	r2, r1, r2
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0e1a      	lsrs	r2, r3, #24
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3307      	adds	r3, #7
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2120      	movs	r1, #32
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2120      	movs	r1, #32
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e007      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	02d2      	lsls	r2, r2, #11
 80012de:	431a      	orrs	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
  }
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b006      	add	sp, #24
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f8:	200f      	movs	r0, #15
 80012fa:	183b      	adds	r3, r7, r0
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	2120      	movs	r1, #32
 8001300:	5c52      	ldrb	r2, [r2, r1]
 8001302:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001304:	0002      	movs	r2, r0
 8001306:	18bb      	adds	r3, r7, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d003      	beq.n	8001316 <HAL_CAN_ActivateNotification+0x28>
 800130e:	18bb      	adds	r3, r7, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d109      	bne.n	800132a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6959      	ldr	r1, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e007      	b.n	800133a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	02d2      	lsls	r2, r2, #11
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
  }
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b08a      	sub	sp, #40	@ 0x28
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	d100      	bne.n	8001388 <HAL_CAN_IRQHandler+0x46>
 8001386:	e084      	b.n	8001492 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2201      	movs	r2, #1
 800138c:	4013      	ands	r3, r2
 800138e:	d024      	beq.n	80013da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d004      	beq.n	80013aa <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0018      	movs	r0, r3
 80013a4:	f000 f981 	bl	80016aa <HAL_CAN_TxMailbox0CompleteCallback>
 80013a8:	e017      	b.n	80013da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d005      	beq.n	80013be <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	4313      	orrs	r3, r2
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	e00d      	b.n	80013da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2208      	movs	r2, #8
 80013c2:	4013      	ands	r3, r2
 80013c4:	d005      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	0152      	lsls	r2, r2, #5
 80013cc:	4313      	orrs	r3, r2
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d0:	e003      	b.n	80013da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 f980 	bl	80016da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	d028      	beq.n	8001436 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	0052      	lsls	r2, r2, #1
 80013ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d004      	beq.n	8001402 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 f95d 	bl	80016ba <HAL_CAN_TxMailbox1CompleteCallback>
 8001400:	e019      	b.n	8001436 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4013      	ands	r3, r2
 800140a:	d005      	beq.n	8001418 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	0192      	lsls	r2, r2, #6
 8001412:	4313      	orrs	r3, r2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
 8001416:	e00e      	b.n	8001436 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	4013      	ands	r3, r2
 8001420:	d005      	beq.n	800142e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	01d2      	lsls	r2, r2, #7
 8001428:	4313      	orrs	r3, r2
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
 800142c:	e003      	b.n	8001436 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f000 f95a 	bl	80016ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	4013      	ands	r3, r2
 800143e:	d028      	beq.n	8001492 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	0252      	lsls	r2, r2, #9
 8001448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d004      	beq.n	800145e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f937 	bl	80016ca <HAL_CAN_TxMailbox2CompleteCallback>
 800145c:	e019      	b.n	8001492 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	02db      	lsls	r3, r3, #11
 8001464:	4013      	ands	r3, r2
 8001466:	d005      	beq.n	8001474 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	0212      	lsls	r2, r2, #8
 800146e:	4313      	orrs	r3, r2
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
 8001472:	e00e      	b.n	8001492 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	4013      	ands	r3, r2
 800147c:	d005      	beq.n	800148a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	2280      	movs	r2, #128	@ 0x80
 8001482:	0252      	lsls	r2, r2, #9
 8001484:	4313      	orrs	r3, r2
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
 8001488:	e003      	b.n	8001492 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f934 	bl	80016fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	d00c      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2210      	movs	r2, #16
 800149e:	4013      	ands	r3, r2
 80014a0:	d008      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2210      	movs	r2, #16
 80014b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	2204      	movs	r2, #4
 80014b8:	4013      	ands	r3, r2
 80014ba:	d00b      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2208      	movs	r2, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2208      	movs	r2, #8
 80014ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f91b 	bl	800170a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d009      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4013      	ands	r3, r2
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe ffce 	bl	800048c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	2240      	movs	r2, #64	@ 0x40
 80014f4:	4013      	ands	r3, r2
 80014f6:	d00c      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2210      	movs	r2, #16
 80014fc:	4013      	ands	r3, r2
 80014fe:	d008      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	00d2      	lsls	r2, r2, #3
 8001506:	4313      	orrs	r3, r2
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2210      	movs	r2, #16
 8001510:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2220      	movs	r2, #32
 8001516:	4013      	ands	r3, r2
 8001518:	d00b      	beq.n	8001532 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2208      	movs	r2, #8
 800151e:	4013      	ands	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0018      	movs	r0, r3
 800152e:	f000 f8fc 	bl	800172a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2210      	movs	r2, #16
 8001536:	4013      	ands	r3, r2
 8001538:	d009      	beq.n	800154e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	d003      	beq.n	800154e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f8e6 	bl	800171a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	d00b      	beq.n	8001570 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2210      	movs	r2, #16
 800155c:	4013      	ands	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2210      	movs	r2, #16
 8001566:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0018      	movs	r0, r3
 800156c:	f000 f8e5 	bl	800173a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4013      	ands	r3, r2
 8001578:	d00b      	beq.n	8001592 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	2208      	movs	r2, #8
 800157e:	4013      	ands	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0018      	movs	r0, r3
 800158e:	f000 f8dc 	bl	800174a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001592:	6a3a      	ldr	r2, [r7, #32]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_CAN_IRQHandler+0x25c>
 800159c:	e074      	b.n	8001688 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_CAN_IRQHandler+0x266>
 80015a6:	e06b      	b.n	8001680 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	2380      	movs	r3, #128	@ 0x80
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015b8:	d003      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	2201      	movs	r2, #1
 80015be:	4313      	orrs	r3, r2
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c2:	6a3a      	ldr	r2, [r7, #32]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015d2:	d003      	beq.n	80015dc <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	2202      	movs	r2, #2
 80015d8:	4313      	orrs	r3, r2
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015dc:	6a3a      	ldr	r2, [r7, #32]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4013      	ands	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2204      	movs	r2, #4
 80015ea:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ec:	d003      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	2204      	movs	r2, #4
 80015f2:	4313      	orrs	r3, r2
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015f6:	6a3a      	ldr	r2, [r7, #32]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d03f      	beq.n	8001680 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2270      	movs	r2, #112	@ 0x70
 8001604:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001606:	d03b      	beq.n	8001680 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2270      	movs	r2, #112	@ 0x70
 800160c:	4013      	ands	r3, r2
 800160e:	2b60      	cmp	r3, #96	@ 0x60
 8001610:	d027      	beq.n	8001662 <HAL_CAN_IRQHandler+0x320>
 8001612:	d82c      	bhi.n	800166e <HAL_CAN_IRQHandler+0x32c>
 8001614:	2b50      	cmp	r3, #80	@ 0x50
 8001616:	d01f      	beq.n	8001658 <HAL_CAN_IRQHandler+0x316>
 8001618:	d829      	bhi.n	800166e <HAL_CAN_IRQHandler+0x32c>
 800161a:	2b40      	cmp	r3, #64	@ 0x40
 800161c:	d017      	beq.n	800164e <HAL_CAN_IRQHandler+0x30c>
 800161e:	d826      	bhi.n	800166e <HAL_CAN_IRQHandler+0x32c>
 8001620:	2b30      	cmp	r3, #48	@ 0x30
 8001622:	d00f      	beq.n	8001644 <HAL_CAN_IRQHandler+0x302>
 8001624:	d823      	bhi.n	800166e <HAL_CAN_IRQHandler+0x32c>
 8001626:	2b10      	cmp	r3, #16
 8001628:	d002      	beq.n	8001630 <HAL_CAN_IRQHandler+0x2ee>
 800162a:	2b20      	cmp	r3, #32
 800162c:	d005      	beq.n	800163a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800162e:	e01e      	b.n	800166e <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	2208      	movs	r2, #8
 8001634:	4313      	orrs	r3, r2
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001638:	e01a      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	2210      	movs	r2, #16
 800163e:	4313      	orrs	r3, r2
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001642:	e015      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	2220      	movs	r2, #32
 8001648:	4313      	orrs	r3, r2
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800164c:	e010      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	2240      	movs	r2, #64	@ 0x40
 8001652:	4313      	orrs	r3, r2
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001656:	e00b      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	4313      	orrs	r3, r2
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001660:	e006      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	0052      	lsls	r2, r2, #1
 8001668:	4313      	orrs	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800166c:	e000      	b.n	8001670 <HAL_CAN_IRQHandler+0x32e>
            break;
 800166e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2170      	movs	r1, #112	@ 0x70
 800167c:	438a      	bics	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2204      	movs	r2, #4
 8001686:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f85c 	bl	800175a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b00a      	add	sp, #40	@ 0x28
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	0002      	movs	r2, r0
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b7f      	cmp	r3, #127	@ 0x7f
 800177e:	d809      	bhi.n	8001794 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	001a      	movs	r2, r3
 8001786:	231f      	movs	r3, #31
 8001788:	401a      	ands	r2, r3
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_EnableIRQ+0x30>)
 800178c:	2101      	movs	r1, #1
 800178e:	4091      	lsls	r1, r2
 8001790:	000a      	movs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
  }
}
 8001794:	46c0      	nop			@ (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	0002      	movs	r2, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80017b4:	d828      	bhi.n	8001808 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001874 <__NVIC_SetPriority+0xd4>)
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	33c0      	adds	r3, #192	@ 0xc0
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	589b      	ldr	r3, [r3, r2]
 80017c6:	1dfa      	adds	r2, r7, #7
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	0011      	movs	r1, r2
 80017cc:	2203      	movs	r2, #3
 80017ce:	400a      	ands	r2, r1
 80017d0:	00d2      	lsls	r2, r2, #3
 80017d2:	21ff      	movs	r1, #255	@ 0xff
 80017d4:	4091      	lsls	r1, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	43d2      	mvns	r2, r2
 80017da:	401a      	ands	r2, r3
 80017dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	22ff      	movs	r2, #255	@ 0xff
 80017e4:	401a      	ands	r2, r3
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0018      	movs	r0, r3
 80017ec:	2303      	movs	r3, #3
 80017ee:	4003      	ands	r3, r0
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f4:	481f      	ldr	r0, [pc, #124]	@ (8001874 <__NVIC_SetPriority+0xd4>)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	430a      	orrs	r2, r1
 8001800:	33c0      	adds	r3, #192	@ 0xc0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001806:	e031      	b.n	800186c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001808:	4a1b      	ldr	r2, [pc, #108]	@ (8001878 <__NVIC_SetPriority+0xd8>)
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	0019      	movs	r1, r3
 8001810:	230f      	movs	r3, #15
 8001812:	400b      	ands	r3, r1
 8001814:	3b08      	subs	r3, #8
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3306      	adds	r3, #6
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1dfa      	adds	r2, r7, #7
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	0011      	movs	r1, r2
 8001828:	2203      	movs	r2, #3
 800182a:	400a      	ands	r2, r1
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	21ff      	movs	r1, #255	@ 0xff
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	43d2      	mvns	r2, r2
 8001836:	401a      	ands	r2, r3
 8001838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	22ff      	movs	r2, #255	@ 0xff
 8001840:	401a      	ands	r2, r3
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	0018      	movs	r0, r3
 8001848:	2303      	movs	r3, #3
 800184a:	4003      	ands	r3, r0
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <__NVIC_SetPriority+0xd8>)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	001c      	movs	r4, r3
 8001858:	230f      	movs	r3, #15
 800185a:	4023      	ands	r3, r4
 800185c:	3b08      	subs	r3, #8
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	430a      	orrs	r2, r1
 8001862:	3306      	adds	r3, #6
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	18c3      	adds	r3, r0, r3
 8001868:	3304      	adds	r3, #4
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b003      	add	sp, #12
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	045b      	lsls	r3, r3, #17
 800188c:	429a      	cmp	r2, r3
 800188e:	d301      	bcc.n	8001894 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001890:	2301      	movs	r3, #1
 8001892:	e010      	b.n	80018b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <SysTick_Config+0x44>)
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	3a01      	subs	r2, #1
 800189a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189c:	2301      	movs	r3, #1
 800189e:	425b      	negs	r3, r3
 80018a0:	2103      	movs	r1, #3
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff ff7c 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <SysTick_Config+0x44>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <SysTick_Config+0x44>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	210f      	movs	r1, #15
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	1c02      	adds	r2, r0, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	0002      	movs	r2, r0
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff ff33 	bl	800176c <__NVIC_EnableIRQ>
}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ffaf 	bl	800187c <SysTick_Config>
 800191e:	0003      	movs	r3, r0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2221      	movs	r2, #33	@ 0x21
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e020      	b.n	8001990 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	210e      	movs	r1, #14
 800195a:	438a      	bics	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	438a      	bics	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	2101      	movs	r1, #1
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2221      	movs	r2, #33	@ 0x21
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	2100      	movs	r1, #0
 800198c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	210f      	movs	r1, #15
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2221      	movs	r2, #33	@ 0x21
 80019ac:	5c9b      	ldrb	r3, [r3, r2]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d006      	beq.n	80019c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2204      	movs	r2, #4
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e028      	b.n	8001a14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	210e      	movs	r1, #14
 80019ce:	438a      	bics	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	438a      	bics	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ea:	2101      	movs	r1, #1
 80019ec:	4091      	lsls	r1, r2
 80019ee:	000a      	movs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2221      	movs	r2, #33	@ 0x21
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2220      	movs	r2, #32
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	0010      	movs	r0, r2
 8001a12:	4798      	blx	r3
    }
  }
  return status;
 8001a14:	230f      	movs	r3, #15
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e149      	b.n	8001cc8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x28>
 8001a4a:	e13a      	b.n	8001cc2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	58d3      	ldr	r3, [r2, r3]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2207      	movs	r2, #7
 8001b20:	4013      	ands	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2107      	movs	r1, #7
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	401a      	ands	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	23c0      	movs	r3, #192	@ 0xc0
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_GPIO_Init+0x174>
 8001b96:	e094      	b.n	8001cc2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b51      	ldr	r3, [pc, #324]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	589b      	ldr	r3, [r3, r2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2390      	movs	r3, #144	@ 0x90
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a41      	ldr	r2, [pc, #260]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x1d2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a40      	ldr	r2, [pc, #256]	@ (8001cec <HAL_GPIO_Init+0x2c8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x1ce>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x1d8>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x1d8>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x1d8>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	400a      	ands	r2, r1
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	035b      	lsls	r3, r3, #13
 8001c32:	4013      	ands	r3, r2
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	039b      	lsls	r3, r3, #14
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	4013      	ands	r3, r2
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	1e13      	subs	r3, r2, #0
 8001cd2:	d000      	beq.n	8001cd6 <HAL_GPIO_Init+0x2b2>
 8001cd4:	e6ae      	b.n	8001a34 <HAL_GPIO_Init+0x10>
  } 
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b006      	add	sp, #24
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	0008      	movs	r0, r1
 8001cfe:	0011      	movs	r1, r2
 8001d00:	1cbb      	adds	r3, r7, #2
 8001d02:	1c02      	adds	r2, r0, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	1c7b      	adds	r3, r7, #1
 8001d08:	1c0a      	adds	r2, r1, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0c:	1c7b      	adds	r3, r7, #1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	1cbb      	adds	r3, r7, #2
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	000a      	movs	r2, r1
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d42:	1cbb      	adds	r3, r7, #2
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	1cb9      	adds	r1, r7, #2
 8001d52:	8809      	ldrh	r1, [r1, #0]
 8001d54:	400b      	ands	r3, r1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
}
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f000 fb76 	bl	8002464 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_RCC_OscConfig+0x20>
 8001d82:	e08e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d84:	4bc5      	ldr	r3, [pc, #788]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	220c      	movs	r2, #12
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d00e      	beq.n	8001dae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d90:	4bc2      	ldr	r3, [pc, #776]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	220c      	movs	r2, #12
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d117      	bne.n	8001dcc <HAL_RCC_OscConfig+0x68>
 8001d9c:	4bbf      	ldr	r3, [pc, #764]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23c0      	movs	r3, #192	@ 0xc0
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	401a      	ands	r2, r3
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10e      	bne.n	8001dcc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	4bbb      	ldr	r3, [pc, #748]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	4013      	ands	r3, r2
 8001db8:	d100      	bne.n	8001dbc <HAL_RCC_OscConfig+0x58>
 8001dba:	e071      	b.n	8001ea0 <HAL_RCC_OscConfig+0x13c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d000      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x62>
 8001dc4:	e06c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f000 fb4c 	bl	8002464 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x80>
 8001dd4:	4bb1      	ldr	r3, [pc, #708]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4bb0      	ldr	r3, [pc, #704]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001dda:	2180      	movs	r1, #128	@ 0x80
 8001ddc:	0249      	lsls	r1, r1, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e02f      	b.n	8001e44 <HAL_RCC_OscConfig+0xe0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0xa2>
 8001dec:	4bab      	ldr	r3, [pc, #684]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4baa      	ldr	r3, [pc, #680]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001df2:	49ab      	ldr	r1, [pc, #684]	@ (80020a0 <HAL_RCC_OscConfig+0x33c>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	4ba8      	ldr	r3, [pc, #672]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4ba7      	ldr	r3, [pc, #668]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001dfe:	49a9      	ldr	r1, [pc, #676]	@ (80020a4 <HAL_RCC_OscConfig+0x340>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e01e      	b.n	8001e44 <HAL_RCC_OscConfig+0xe0>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10e      	bne.n	8001e2c <HAL_RCC_OscConfig+0xc8>
 8001e0e:	4ba3      	ldr	r3, [pc, #652]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4ba2      	ldr	r3, [pc, #648]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	02c9      	lsls	r1, r1, #11
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	4b9f      	ldr	r3, [pc, #636]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b9e      	ldr	r3, [pc, #632]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e22:	2180      	movs	r1, #128	@ 0x80
 8001e24:	0249      	lsls	r1, r1, #9
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xe0>
 8001e2c:	4b9b      	ldr	r3, [pc, #620]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b9a      	ldr	r3, [pc, #616]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e32:	499b      	ldr	r1, [pc, #620]	@ (80020a0 <HAL_RCC_OscConfig+0x33c>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	4b98      	ldr	r3, [pc, #608]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b97      	ldr	r3, [pc, #604]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e3e:	4999      	ldr	r1, [pc, #612]	@ (80020a4 <HAL_RCC_OscConfig+0x340>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d014      	beq.n	8001e76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fec0 	bl	8000bd0 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e56:	f7fe febb 	bl	8000bd0 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	@ 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e2fd      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0xf2>
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe feab 	bl	8000bd0 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e80:	f7fe fea6 	bl	8000bd0 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e2e8      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	4b82      	ldr	r3, [pc, #520]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x11c>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0x14a>
 8001eac:	e06c      	b.n	8001f88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eae:	4b7b      	ldr	r3, [pc, #492]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eb8:	4b78      	ldr	r3, [pc, #480]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d11f      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1a0>
 8001ec4:	4b75      	ldr	r3, [pc, #468]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	23c0      	movs	r3, #192	@ 0xc0
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	401a      	ands	r2, r3
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b71      	ldr	r3, [pc, #452]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2202      	movs	r2, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x188>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e2bb      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b6b      	ldr	r3, [pc, #428]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	22f8      	movs	r2, #248	@ 0xf8
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00da      	lsls	r2, r3, #3
 8001efc:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e041      	b.n	8001f88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d024      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b62      	ldr	r3, [pc, #392]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe fe5a 	bl	8000bd0 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f22:	f7fe fe55 	bl	8000bd0 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e297      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b57      	ldr	r3, [pc, #348]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	22f8      	movs	r2, #248	@ 0xf8
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00da      	lsls	r2, r3, #3
 8001f4e:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b51      	ldr	r3, [pc, #324]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b50      	ldr	r3, [pc, #320]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fe35 	bl	8000bd0 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fe30 	bl	8000bd0 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e272      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d1f1      	bne.n	8001f6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d019      	beq.n	8001fce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b40      	ldr	r3, [pc, #256]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fe13 	bl	8000bd0 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fe0e 	bl	8000bd0 <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e250      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0f1      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x24c>
 8001fcc:	e018      	b.n	8002000 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fce:	4b33      	ldr	r3, [pc, #204]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd2:	4b32      	ldr	r3, [pc, #200]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe fdf9 	bl	8000bd0 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fdf4 	bl	8000bd0 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e236      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	4b29      	ldr	r3, [pc, #164]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d1f1      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2204      	movs	r2, #4
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_RCC_OscConfig+0x2a8>
 800200a:	e0b5      	b.n	8002178 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200c:	201f      	movs	r0, #31
 800200e:	183b      	adds	r3, r7, r0
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	055b      	lsls	r3, r3, #21
 800201c:	4013      	ands	r3, r2
 800201e:	d110      	bne.n	8002042 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8002026:	2180      	movs	r1, #128	@ 0x80
 8002028:	0549      	lsls	r1, r1, #21
 800202a:	430a      	orrs	r2, r1
 800202c:	61da      	str	r2, [r3, #28]
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800203c:	183b      	adds	r3, r7, r0
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_RCC_OscConfig+0x344>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4013      	ands	r3, r2
 800204c:	d11a      	bne.n	8002084 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_RCC_OscConfig+0x344>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_RCC_OscConfig+0x344>)
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	0049      	lsls	r1, r1, #1
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205c:	f7fe fdb8 	bl	8000bd0 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7fe fdb3 	bl	8000bd0 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	@ 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1f5      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_OscConfig+0x344>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10f      	bne.n	80020ac <HAL_RCC_OscConfig+0x348>
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	4b02      	ldr	r3, [pc, #8]	@ (800209c <HAL_RCC_OscConfig+0x338>)
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	621a      	str	r2, [r3, #32]
 8002098:	e036      	b.n	8002108 <HAL_RCC_OscConfig+0x3a4>
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	fffeffff 	.word	0xfffeffff
 80020a4:	fffbffff 	.word	0xfffbffff
 80020a8:	40007000 	.word	0x40007000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x36a>
 80020b4:	4bca      	ldr	r3, [pc, #808]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	4bc9      	ldr	r3, [pc, #804]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	4bc7      	ldr	r3, [pc, #796]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4bc6      	ldr	r3, [pc, #792]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	2104      	movs	r1, #4
 80020c8:	438a      	bics	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x3a4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x38c>
 80020d6:	4bc2      	ldr	r3, [pc, #776]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	4bc1      	ldr	r3, [pc, #772]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020dc:	2104      	movs	r1, #4
 80020de:	430a      	orrs	r2, r1
 80020e0:	621a      	str	r2, [r3, #32]
 80020e2:	4bbf      	ldr	r3, [pc, #764]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4bbe      	ldr	r3, [pc, #760]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x3a4>
 80020f0:	4bbb      	ldr	r3, [pc, #748]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	4bba      	ldr	r3, [pc, #744]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	621a      	str	r2, [r3, #32]
 80020fc:	4bb8      	ldr	r3, [pc, #736]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	4bb7      	ldr	r3, [pc, #732]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002102:	2104      	movs	r1, #4
 8002104:	438a      	bics	r2, r1
 8002106:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d014      	beq.n	800213a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe fd5e 	bl	8000bd0 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e009      	b.n	800212e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe fd59 	bl	8000bd0 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4aaf      	ldr	r2, [pc, #700]	@ (80023e4 <HAL_RCC_OscConfig+0x680>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e19a      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4bac      	ldr	r3, [pc, #688]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x3b6>
 8002138:	e013      	b.n	8002162 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fd49 	bl	8000bd0 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fd44 	bl	8000bd0 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4aa5      	ldr	r2, [pc, #660]	@ (80023e4 <HAL_RCC_OscConfig+0x680>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e185      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	4ba1      	ldr	r3, [pc, #644]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b9c      	ldr	r3, [pc, #624]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4b9b      	ldr	r3, [pc, #620]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002172:	499d      	ldr	r1, [pc, #628]	@ (80023e8 <HAL_RCC_OscConfig+0x684>)
 8002174:	400a      	ands	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	4013      	ands	r3, r2
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800218a:	4b95      	ldr	r3, [pc, #596]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800218c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800218e:	4b94      	ldr	r3, [pc, #592]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002190:	2104      	movs	r1, #4
 8002192:	430a      	orrs	r2, r1
 8002194:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002196:	4b92      	ldr	r3, [pc, #584]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	4b91      	ldr	r3, [pc, #580]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800219c:	2101      	movs	r1, #1
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fd15 	bl	8000bd0 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021ac:	f7fe fd10 	bl	8000bd0 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e152      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021be:	4b88      	ldr	r3, [pc, #544]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d0f1      	beq.n	80021ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021c8:	4b85      	ldr	r3, [pc, #532]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021cc:	22f8      	movs	r2, #248	@ 0xf8
 80021ce:	4393      	bics	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	4b81      	ldr	r3, [pc, #516]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80021de:	e034      	b.n	800224a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	3305      	adds	r3, #5
 80021e6:	d111      	bne.n	800220c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021e8:	4b7d      	ldr	r3, [pc, #500]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ec:	4b7c      	ldr	r3, [pc, #496]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	2104      	movs	r1, #4
 80021f0:	438a      	bics	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021f4:	4b7a      	ldr	r3, [pc, #488]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	22f8      	movs	r2, #248	@ 0xf8
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	4b76      	ldr	r3, [pc, #472]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002206:	430a      	orrs	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
 800220a:	e01e      	b.n	800224a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800220c:	4b74      	ldr	r3, [pc, #464]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800220e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002210:	4b73      	ldr	r3, [pc, #460]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002212:	2104      	movs	r1, #4
 8002214:	430a      	orrs	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002218:	4b71      	ldr	r3, [pc, #452]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800221a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221c:	4b70      	ldr	r3, [pc, #448]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe fcd4 	bl	8000bd0 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800222e:	f7fe fccf 	bl	8000bd0 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e111      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002240:	4b67      	ldr	r3, [pc, #412]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d1f1      	bne.n	800222e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2220      	movs	r2, #32
 8002250:	4013      	ands	r3, r2
 8002252:	d05c      	beq.n	800230e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002254:	4b62      	ldr	r3, [pc, #392]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	220c      	movs	r2, #12
 800225a:	4013      	ands	r3, r2
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d00e      	beq.n	800227e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002260:	4b5f      	ldr	r3, [pc, #380]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	220c      	movs	r2, #12
 8002266:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002268:	2b08      	cmp	r3, #8
 800226a:	d114      	bne.n	8002296 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800226c:	4b5c      	ldr	r3, [pc, #368]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	23c0      	movs	r3, #192	@ 0xc0
 8002272:	025b      	lsls	r3, r3, #9
 8002274:	401a      	ands	r2, r3
 8002276:	23c0      	movs	r3, #192	@ 0xc0
 8002278:	025b      	lsls	r3, r3, #9
 800227a:	429a      	cmp	r2, r3
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800227e:	4b58      	ldr	r3, [pc, #352]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	029b      	lsls	r3, r3, #10
 8002286:	4013      	ands	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_RCC_OscConfig+0x5a8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d03c      	beq.n	800230c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e6      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800229e:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022a2:	4b4f      	ldr	r3, [pc, #316]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80022a4:	2180      	movs	r1, #128	@ 0x80
 80022a6:	0249      	lsls	r1, r1, #9
 80022a8:	430a      	orrs	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fc90 	bl	8000bd0 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b6:	f7fe fc8b 	bl	8000bd0 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0cd      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022c8:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x552>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022d6:	4b42      	ldr	r3, [pc, #264]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80022d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022da:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80022dc:	4943      	ldr	r1, [pc, #268]	@ (80023ec <HAL_RCC_OscConfig+0x688>)
 80022de:	400a      	ands	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fc75 	bl	8000bd0 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ec:	f7fe fc70 	bl	8000bd0 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0b2      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	4013      	ands	r3, r2
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x588>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800230c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	d100      	bne.n	8002318 <HAL_RCC_OscConfig+0x5b4>
 8002316:	e0a4      	b.n	8002462 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	220c      	movs	r2, #12
 800231e:	4013      	ands	r3, r2
 8002320:	2b08      	cmp	r3, #8
 8002322:	d100      	bne.n	8002326 <HAL_RCC_OscConfig+0x5c2>
 8002324:	e078      	b.n	8002418 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	2b02      	cmp	r3, #2
 800232c:	d14c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002334:	492e      	ldr	r1, [pc, #184]	@ (80023f0 <HAL_RCC_OscConfig+0x68c>)
 8002336:	400a      	ands	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fc49 	bl	8000bd0 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fc44 	bl	8000bd0 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e086      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	049b      	lsls	r3, r3, #18
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002362:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	220f      	movs	r2, #15
 8002368:	4393      	bics	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_RCC_OscConfig+0x690>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	431a      	orrs	r2, r3
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 8002396:	2180      	movs	r1, #128	@ 0x80
 8002398:	0449      	lsls	r1, r1, #17
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fc17 	bl	8000bd0 <HAL_GetTick>
 80023a2:	0003      	movs	r3, r0
 80023a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fc12 	bl	8000bd0 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e054      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	049b      	lsls	r3, r3, #18
 80023c2:	4013      	ands	r3, r2
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x644>
 80023c6:	e04c      	b.n	8002462 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <HAL_RCC_OscConfig+0x67c>)
 80023ce:	4908      	ldr	r1, [pc, #32]	@ (80023f0 <HAL_RCC_OscConfig+0x68c>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fbfc 	bl	8000bd0 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x6a6>
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	00001388 	.word	0x00001388
 80023e8:	efffffff 	.word	0xefffffff
 80023ec:	fffeffff 	.word	0xfffeffff
 80023f0:	feffffff 	.word	0xfeffffff
 80023f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fbea 	bl	8000bd0 <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e02c      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_RCC_OscConfig+0x708>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	049b      	lsls	r3, r3, #18
 8002412:	4013      	ands	r3, r2
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x694>
 8002416:	e024      	b.n	8002462 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e01f      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <HAL_RCC_OscConfig+0x708>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCC_OscConfig+0x708>)
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	23c0      	movs	r3, #192	@ 0xc0
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	429a      	cmp	r2, r3
 800243e:	d10e      	bne.n	800245e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	220f      	movs	r2, #15
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d107      	bne.n	800245e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	23f0      	movs	r3, #240	@ 0xf0
 8002452:	039b      	lsls	r3, r3, #14
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b008      	add	sp, #32
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0bf      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b61      	ldr	r3, [pc, #388]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d911      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	4393      	bics	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a4:	4b59      	ldr	r3, [pc, #356]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0a6      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d015      	beq.n	80024ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2204      	movs	r2, #4
 80024c6:	4013      	ands	r3, r2
 80024c8:	d006      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024ca:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80024d0:	21e0      	movs	r1, #224	@ 0xe0
 80024d2:	00c9      	lsls	r1, r1, #3
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	22f0      	movs	r2, #240	@ 0xf0
 80024de:	4393      	bics	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d04c      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	4013      	ands	r3, r2
 8002508:	d120      	bne.n	800254c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07a      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	049b      	lsls	r3, r3, #18
 800251e:	4013      	ands	r3, r2
 8002520:	d114      	bne.n	800254c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06e      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800252e:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 8002530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	4013      	ands	r3, r2
 8002538:	d108      	bne.n	800254c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e062      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b34      	ldr	r3, [pc, #208]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e05b      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	4393      	bics	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fb36 	bl	8000bd0 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002568:	e009      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f7fe fb31 	bl	8000bd0 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_RCC_ClockConfig+0x1a4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e042      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	220c      	movs	r2, #12
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1ec      	bne.n	800256a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b1e      	ldr	r3, [pc, #120]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d211      	bcs.n	80025c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_RCC_ClockConfig+0x19c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e020      	b.n	8002604 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <HAL_RCC_ClockConfig+0x1a8>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025e0:	f000 f820 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e4:	0001      	movs	r1, r0
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_RCC_ClockConfig+0x1a0>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	220f      	movs	r2, #15
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <HAL_RCC_ClockConfig+0x1ac>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	000a      	movs	r2, r1
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1b0>)
 80025fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f7fe faa1 	bl	8000b44 <HAL_InitTick>
  
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
 8002614:	00001388 	.word	0x00001388
 8002618:	fffff8ff 	.word	0xfffff8ff
 800261c:	08003d48 	.word	0x08003d48
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800263e:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	220c      	movs	r2, #12
 8002648:	4013      	ands	r3, r2
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d046      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0xb8>
 800264e:	d848      	bhi.n	80026e2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002650:	2b04      	cmp	r3, #4
 8002652:	d002      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x36>
 8002654:	2b08      	cmp	r3, #8
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x3c>
 8002658:	e043      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800265c:	613b      	str	r3, [r7, #16]
      break;
 800265e:	e043      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	220f      	movs	r2, #15
 8002666:	4013      	ands	r3, r2
 8002668:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xd8>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	220f      	movs	r2, #15
 8002674:	4013      	ands	r3, r2
 8002676:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	401a      	ands	r2, r3
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	429a      	cmp	r2, r3
 800268a:	d109      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	481a      	ldr	r0, [pc, #104]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002690:	f7fd fd3a 	bl	8000108 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	001a      	movs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4353      	muls	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e01a      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	23c0      	movs	r3, #192	@ 0xc0
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	401a      	ands	r2, r3
 80026a8:	23c0      	movs	r3, #192	@ 0xc0
 80026aa:	025b      	lsls	r3, r3, #9
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4814      	ldr	r0, [pc, #80]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xe0>)
 80026b4:	f7fd fd28 	bl	8000108 <__udivsi3>
 80026b8:	0003      	movs	r3, r0
 80026ba:	001a      	movs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4353      	muls	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026c8:	f7fd fd1e 	bl	8000108 <__udivsi3>
 80026cc:	0003      	movs	r3, r0
 80026ce:	001a      	movs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4353      	muls	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	613b      	str	r3, [r7, #16]
      break;
 80026da:	e005      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xe0>)
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	e002      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026e4:	613b      	str	r3, [r7, #16]
      break;
 80026e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026e8:	693b      	ldr	r3, [r7, #16]
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b006      	add	sp, #24
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08003d60 	.word	0x08003d60
 8002700:	08003d70 	.word	0x08003d70
 8002704:	02dc6c00 	.word	0x02dc6c00

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	20000008 	.word	0x20000008

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	0001      	movs	r1, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	2207      	movs	r2, #7
 800272e:	4013      	ands	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	40d9      	lsrs	r1, r3
 8002736:	000b      	movs	r3, r1
}    
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	40021000 	.word	0x40021000
 8002744:	08003d58 	.word	0x08003d58

08002748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e044      	b.n	80027e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2278      	movs	r2, #120	@ 0x78
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f7fe f907 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2224      	movs	r2, #36	@ 0x24
 8002776:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fd5e 	bl	8003254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fc1a 	bl	8002fd4 <UART_SetConfig>
 80027a0:	0003      	movs	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01c      	b.n	80027e4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	490d      	ldr	r1, [pc, #52]	@ (80027ec <HAL_UART_Init+0xa4>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	212a      	movs	r1, #42	@ 0x2a
 80027c6:	438a      	bics	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 fded 	bl	80033bc <UART_CheckIdleState>
 80027e2:	0003      	movs	r3, r0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	ffffb7ff 	.word	0xffffb7ff

080027f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002804:	2b20      	cmp	r3, #32
 8002806:	d000      	beq.n	800280a <HAL_UART_Transmit+0x1a>
 8002808:	e08c      	b.n	8002924 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_UART_Transmit+0x28>
 8002810:	1dbb      	adds	r3, r7, #6
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e084      	b.n	8002926 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	429a      	cmp	r2, r3
 8002826:	d109      	bne.n	800283c <HAL_UART_Transmit+0x4c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d001      	beq.n	800283c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e074      	b.n	8002926 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2284      	movs	r2, #132	@ 0x84
 8002840:	2100      	movs	r1, #0
 8002842:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2221      	movs	r2, #33	@ 0x21
 8002848:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284a:	f7fe f9c1 	bl	8000bd0 <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1dba      	adds	r2, r7, #6
 8002856:	2150      	movs	r1, #80	@ 0x50
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1dba      	adds	r2, r7, #6
 8002860:	2152      	movs	r1, #82	@ 0x52
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	429a      	cmp	r2, r3
 8002870:	d108      	bne.n	8002884 <HAL_UART_Transmit+0x94>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e003      	b.n	800288c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800288c:	e02f      	b.n	80028ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	0013      	movs	r3, r2
 8002898:	2200      	movs	r2, #0
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	f000 fe36 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d004      	beq.n	80028ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03b      	b.n	8002926 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	05d2      	lsls	r2, r2, #23
 80028be:	0dd2      	lsrs	r2, r2, #23
 80028c0:	b292      	uxth	r2, r2
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	3302      	adds	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e007      	b.n	80028dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2252      	movs	r2, #82	@ 0x52
 80028e0:	5a9b      	ldrh	r3, [r3, r2]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b299      	uxth	r1, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2252      	movs	r2, #82	@ 0x52
 80028ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2252      	movs	r2, #82	@ 0x52
 80028f2:	5a9b      	ldrh	r3, [r3, r2]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1c9      	bne.n	800288e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	0013      	movs	r3, r2
 8002904:	2200      	movs	r2, #0
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	f000 fe00 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d004      	beq.n	800291a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e005      	b.n	8002926 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b008      	add	sp, #32
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b088      	sub	sp, #32
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	1dbb      	adds	r3, r7, #6
 800293a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	589b      	ldr	r3, [r3, r2]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d145      	bne.n	80029d2 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_UART_Receive_IT+0x26>
 800294c:	1dbb      	adds	r3, r7, #6
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e03d      	b.n	80029d4 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	429a      	cmp	r2, r3
 8002962:	d109      	bne.n	8002978 <HAL_UART_Receive_IT+0x4a>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2201      	movs	r2, #1
 8002970:	4013      	ands	r3, r2
 8002972:	d001      	beq.n	8002978 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e02d      	b.n	80029d4 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	4013      	ands	r3, r2
 800298a:	d019      	beq.n	80029c0 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298c:	f3ef 8310 	mrs	r3, PRIMASK
 8002990:	613b      	str	r3, [r7, #16]
  return(result);
 8002992:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	2301      	movs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f383 8810 	msr	PRIMASK, r3
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	04c9      	lsls	r1, r1, #19
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f383 8810 	msr	PRIMASK, r3
}
 80029be:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029c0:	1dbb      	adds	r3, r7, #6
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fe0f 	bl	80035ec <UART_Start_Receive_IT>
 80029ce:	0003      	movs	r3, r0
 80029d0:	e000      	b.n	80029d4 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b008      	add	sp, #32
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b0ab      	sub	sp, #172	@ 0xac
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	22a4      	movs	r2, #164	@ 0xa4
 80029ec:	18b9      	adds	r1, r7, r2
 80029ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	20a0      	movs	r0, #160	@ 0xa0
 80029f8:	1839      	adds	r1, r7, r0
 80029fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	219c      	movs	r1, #156	@ 0x9c
 8002a04:	1879      	adds	r1, r7, r1
 8002a06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a08:	0011      	movs	r1, r2
 8002a0a:	18bb      	adds	r3, r7, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a99      	ldr	r2, [pc, #612]	@ (8002c74 <HAL_UART_IRQHandler+0x298>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	2298      	movs	r2, #152	@ 0x98
 8002a14:	18bc      	adds	r4, r7, r2
 8002a16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a18:	18bb      	adds	r3, r7, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d114      	bne.n	8002a4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	4013      	ands	r3, r2
 8002a28:	d00f      	beq.n	8002a4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a2a:	183b      	adds	r3, r7, r0
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	4013      	ands	r3, r2
 8002a32:	d00a      	beq.n	8002a4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d100      	bne.n	8002a3e <HAL_UART_IRQHandler+0x62>
 8002a3c:	e29e      	b.n	8002f7c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	0010      	movs	r0, r2
 8002a46:	4798      	blx	r3
      }
      return;
 8002a48:	e298      	b.n	8002f7c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a4a:	2398      	movs	r3, #152	@ 0x98
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d100      	bne.n	8002a56 <HAL_UART_IRQHandler+0x7a>
 8002a54:	e114      	b.n	8002c80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a56:	239c      	movs	r3, #156	@ 0x9c
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a62:	23a0      	movs	r3, #160	@ 0xa0
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a83      	ldr	r2, [pc, #524]	@ (8002c78 <HAL_UART_IRQHandler+0x29c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d100      	bne.n	8002a70 <HAL_UART_IRQHandler+0x94>
 8002a6e:	e107      	b.n	8002c80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a70:	23a4      	movs	r3, #164	@ 0xa4
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d012      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xc6>
 8002a7c:	23a0      	movs	r3, #160	@ 0xa0
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2284      	movs	r2, #132	@ 0x84
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2184      	movs	r1, #132	@ 0x84
 8002aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa2:	23a4      	movs	r3, #164	@ 0xa4
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d011      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xf6>
 8002aae:	239c      	movs	r3, #156	@ 0x9c
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2284      	movs	r2, #132	@ 0x84
 8002ac6:	589b      	ldr	r3, [r3, r2]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2184      	movs	r1, #132	@ 0x84
 8002ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad2:	23a4      	movs	r3, #164	@ 0xa4
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4013      	ands	r3, r2
 8002adc:	d011      	beq.n	8002b02 <HAL_UART_IRQHandler+0x126>
 8002ade:	239c      	movs	r3, #156	@ 0x9c
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2284      	movs	r2, #132	@ 0x84
 8002af6:	589b      	ldr	r3, [r3, r2]
 8002af8:	2202      	movs	r2, #2
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2184      	movs	r1, #132	@ 0x84
 8002b00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b02:	23a4      	movs	r3, #164	@ 0xa4
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d017      	beq.n	8002b3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b0e:	23a0      	movs	r3, #160	@ 0xa0
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d105      	bne.n	8002b26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b1a:	239c      	movs	r3, #156	@ 0x9c
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2284      	movs	r2, #132	@ 0x84
 8002b32:	589b      	ldr	r3, [r3, r2]
 8002b34:	2208      	movs	r2, #8
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2184      	movs	r1, #132	@ 0x84
 8002b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b3e:	23a4      	movs	r3, #164	@ 0xa4
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_UART_IRQHandler+0x198>
 8002b4c:	23a0      	movs	r3, #160	@ 0xa0
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00c      	beq.n	8002b74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2284      	movs	r2, #132	@ 0x84
 8002b68:	589b      	ldr	r3, [r3, r2]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2184      	movs	r1, #132	@ 0x84
 8002b72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2284      	movs	r2, #132	@ 0x84
 8002b78:	589b      	ldr	r3, [r3, r2]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d100      	bne.n	8002b80 <HAL_UART_IRQHandler+0x1a4>
 8002b7e:	e1ff      	b.n	8002f80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b80:	23a4      	movs	r3, #164	@ 0xa4
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b8c:	23a0      	movs	r3, #160	@ 0xa0
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4013      	ands	r3, r2
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2284      	movs	r2, #132	@ 0x84
 8002bae:	589b      	ldr	r3, [r3, r2]
 8002bb0:	2194      	movs	r1, #148	@ 0x94
 8002bb2:	187a      	adds	r2, r7, r1
 8002bb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2240      	movs	r2, #64	@ 0x40
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d004      	beq.n	8002bce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2228      	movs	r2, #40	@ 0x28
 8002bca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bcc:	d047      	beq.n	8002c5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fdd5 	bl	8003780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2240      	movs	r2, #64	@ 0x40
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b40      	cmp	r3, #64	@ 0x40
 8002be2:	d137      	bne.n	8002c54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be4:	f3ef 8310 	mrs	r3, PRIMASK
 8002be8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bec:	2090      	movs	r0, #144	@ 0x90
 8002bee:	183a      	adds	r2, r7, r0
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf8:	f383 8810 	msr	PRIMASK, r3
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2140      	movs	r1, #64	@ 0x40
 8002c0a:	438a      	bics	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <HAL_UART_IRQHandler+0x2a0>)
 8002c2a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fe feb1 	bl	8001998 <HAL_DMA_Abort_IT>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d01a      	beq.n	8002c70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c44:	0018      	movs	r0, r3
 8002c46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e012      	b.n	8002c70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 f9ad 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c52:	e00d      	b.n	8002c70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f9a8 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e008      	b.n	8002c70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f9a3 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2284      	movs	r2, #132	@ 0x84
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c6e:	e187      	b.n	8002f80 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	46c0      	nop			@ (mov r8, r8)
    return;
 8002c72:	e185      	b.n	8002f80 <HAL_UART_IRQHandler+0x5a4>
 8002c74:	0000080f 	.word	0x0000080f
 8002c78:	04000120 	.word	0x04000120
 8002c7c:	08003849 	.word	0x08003849

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d000      	beq.n	8002c8a <HAL_UART_IRQHandler+0x2ae>
 8002c88:	e139      	b.n	8002efe <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c8a:	23a4      	movs	r3, #164	@ 0xa4
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2210      	movs	r2, #16
 8002c92:	4013      	ands	r3, r2
 8002c94:	d100      	bne.n	8002c98 <HAL_UART_IRQHandler+0x2bc>
 8002c96:	e132      	b.n	8002efe <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c98:	23a0      	movs	r3, #160	@ 0xa0
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x2ca>
 8002ca4:	e12b      	b.n	8002efe <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2210      	movs	r2, #16
 8002cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2240      	movs	r2, #64	@ 0x40
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d000      	beq.n	8002cbe <HAL_UART_IRQHandler+0x2e2>
 8002cbc:	e09f      	b.n	8002dfe <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	217e      	movs	r1, #126	@ 0x7e
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d100      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x2fa>
 8002cd4:	e156      	b.n	8002f84 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2258      	movs	r2, #88	@ 0x58
 8002cda:	5a9b      	ldrh	r3, [r3, r2]
 8002cdc:	187a      	adds	r2, r7, r1
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d300      	bcc.n	8002ce6 <HAL_UART_IRQHandler+0x30a>
 8002ce4:	e14e      	b.n	8002f84 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	187a      	adds	r2, r7, r1
 8002cea:	215a      	movs	r1, #90	@ 0x5a
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d06f      	beq.n	8002dda <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d04:	2301      	movs	r3, #1
 8002d06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	499e      	ldr	r1, [pc, #632]	@ (8002f94 <HAL_UART_IRQHandler+0x5b8>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d36:	2301      	movs	r3, #1
 8002d38:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	438a      	bics	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d68:	2301      	movs	r3, #1
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2140      	movs	r1, #64	@ 0x40
 8002d80:	438a      	bics	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d86:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	2120      	movs	r1, #32
 8002d96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da8:	2301      	movs	r3, #1
 8002daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe fda7 	bl	8001928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2258      	movs	r2, #88	@ 0x58
 8002de4:	5a9a      	ldrh	r2, [r3, r2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	215a      	movs	r1, #90	@ 0x5a
 8002dea:	5a5b      	ldrh	r3, [r3, r1]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f8e0 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dfc:	e0c2      	b.n	8002f84 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2258      	movs	r2, #88	@ 0x58
 8002e02:	5a99      	ldrh	r1, [r3, r2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	225a      	movs	r2, #90	@ 0x5a
 8002e08:	5a9b      	ldrh	r3, [r3, r2]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	208e      	movs	r0, #142	@ 0x8e
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	1a8a      	subs	r2, r1, r2
 8002e12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	225a      	movs	r2, #90	@ 0x5a
 8002e18:	5a9b      	ldrh	r3, [r3, r2]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d100      	bne.n	8002e22 <HAL_UART_IRQHandler+0x446>
 8002e20:	e0b2      	b.n	8002f88 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <HAL_UART_IRQHandler+0x450>
 8002e2a:	e0ad      	b.n	8002f88 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e34:	2488      	movs	r4, #136	@ 0x88
 8002e36:	193a      	adds	r2, r7, r4
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4951      	ldr	r1, [pc, #324]	@ (8002f98 <HAL_UART_IRQHandler+0x5bc>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e64:	f3ef 8310 	mrs	r3, PRIMASK
 8002e68:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	2484      	movs	r4, #132	@ 0x84
 8002e6e:	193a      	adds	r2, r7, r4
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f383 8810 	msr	PRIMASK, r3
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f383 8810 	msr	PRIMASK, r3
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2280      	movs	r2, #128	@ 0x80
 8002ea0:	2120      	movs	r1, #32
 8002ea2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	2480      	movs	r4, #128	@ 0x80
 8002eba:	193a      	adds	r2, r7, r4
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	f383 8810 	msr	PRIMASK, r3
}
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eee:	183b      	adds	r3, r7, r0
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f860 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002efc:	e044      	b.n	8002f88 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002efe:	23a4      	movs	r3, #164	@ 0xa4
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	035b      	lsls	r3, r3, #13
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d010      	beq.n	8002f2e <HAL_UART_IRQHandler+0x552>
 8002f0c:	239c      	movs	r3, #156	@ 0x9c
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	03db      	lsls	r3, r3, #15
 8002f16:	4013      	ands	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	0352      	lsls	r2, r2, #13
 8002f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fe88 	bl	8003c3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f2c:	e02f      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f2e:	23a4      	movs	r3, #164	@ 0xa4
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2280      	movs	r2, #128	@ 0x80
 8002f36:	4013      	ands	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f3a:	23a0      	movs	r3, #160	@ 0xa0
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2280      	movs	r2, #128	@ 0x80
 8002f42:	4013      	ands	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01e      	beq.n	8002f8c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	0010      	movs	r0, r2
 8002f56:	4798      	blx	r3
    }
    return;
 8002f58:	e018      	b.n	8002f8c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f5a:	23a4      	movs	r3, #164	@ 0xa4
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2240      	movs	r2, #64	@ 0x40
 8002f62:	4013      	ands	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
 8002f66:	23a0      	movs	r3, #160	@ 0xa0
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 fc7e 	bl	8003876 <UART_EndTransmit_IT>
    return;
 8002f7a:	e008      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	e006      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	e004      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f84:	46c0      	nop			@ (mov r8, r8)
 8002f86:	e002      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	e000      	b.n	8002f8e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002f8c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b02b      	add	sp, #172	@ 0xac
 8002f92:	bd90      	pop	{r4, r7, pc}
 8002f94:	fffffeff 	.word	0xfffffeff
 8002f98:	fffffedf 	.word	0xfffffedf

08002f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa4:	46c0      	nop			@ (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	000a      	movs	r2, r1
 8002fc6:	1cbb      	adds	r3, r7, #2
 8002fc8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fdc:	231e      	movs	r3, #30
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a8d      	ldr	r2, [pc, #564]	@ (8003238 <UART_SetConfig+0x264>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a88      	ldr	r2, [pc, #544]	@ (800323c <UART_SetConfig+0x268>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a7f      	ldr	r2, [pc, #508]	@ (8003240 <UART_SetConfig+0x26c>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a7b      	ldr	r2, [pc, #492]	@ (8003244 <UART_SetConfig+0x270>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d127      	bne.n	80030aa <UART_SetConfig+0xd6>
 800305a:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <UART_SetConfig+0x274>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	2203      	movs	r2, #3
 8003060:	4013      	ands	r3, r2
 8003062:	2b03      	cmp	r3, #3
 8003064:	d00d      	beq.n	8003082 <UART_SetConfig+0xae>
 8003066:	d81b      	bhi.n	80030a0 <UART_SetConfig+0xcc>
 8003068:	2b02      	cmp	r3, #2
 800306a:	d014      	beq.n	8003096 <UART_SetConfig+0xc2>
 800306c:	d818      	bhi.n	80030a0 <UART_SetConfig+0xcc>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <UART_SetConfig+0xa4>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d00a      	beq.n	800308c <UART_SetConfig+0xb8>
 8003076:	e013      	b.n	80030a0 <UART_SetConfig+0xcc>
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e021      	b.n	80030c6 <UART_SetConfig+0xf2>
 8003082:	231f      	movs	r3, #31
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e01c      	b.n	80030c6 <UART_SetConfig+0xf2>
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e017      	b.n	80030c6 <UART_SetConfig+0xf2>
 8003096:	231f      	movs	r3, #31
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2208      	movs	r2, #8
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e012      	b.n	80030c6 <UART_SetConfig+0xf2>
 80030a0:	231f      	movs	r3, #31
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2210      	movs	r2, #16
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e00d      	b.n	80030c6 <UART_SetConfig+0xf2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a67      	ldr	r2, [pc, #412]	@ (800324c <UART_SetConfig+0x278>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d104      	bne.n	80030be <UART_SetConfig+0xea>
 80030b4:	231f      	movs	r3, #31
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e003      	b.n	80030c6 <UART_SetConfig+0xf2>
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2210      	movs	r2, #16
 80030c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d15c      	bne.n	800318c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80030d2:	231f      	movs	r3, #31
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d015      	beq.n	8003108 <UART_SetConfig+0x134>
 80030dc:	dc18      	bgt.n	8003110 <UART_SetConfig+0x13c>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00d      	beq.n	80030fe <UART_SetConfig+0x12a>
 80030e2:	dc15      	bgt.n	8003110 <UART_SetConfig+0x13c>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <UART_SetConfig+0x11a>
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d005      	beq.n	80030f8 <UART_SetConfig+0x124>
 80030ec:	e010      	b.n	8003110 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ee:	f7ff fb15 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
        break;
 80030f6:	e012      	b.n	800311e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f8:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <UART_SetConfig+0x27c>)
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e00f      	b.n	800311e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030fe:	f7ff fa91 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
        break;
 8003106:	e00a      	b.n	800311e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	61bb      	str	r3, [r7, #24]
        break;
 800310e:	e006      	b.n	800311e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003114:	231e      	movs	r3, #30
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
        break;
 800311c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d100      	bne.n	8003126 <UART_SetConfig+0x152>
 8003124:	e07a      	b.n	800321c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	18d2      	adds	r2, r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f7fc ffe5 	bl	8000108 <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d91c      	bls.n	8003182 <UART_SetConfig+0x1ae>
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	429a      	cmp	r2, r3
 8003150:	d217      	bcs.n	8003182 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	b29a      	uxth	r2, r3
 8003156:	200e      	movs	r0, #14
 8003158:	183b      	adds	r3, r7, r0
 800315a:	210f      	movs	r1, #15
 800315c:	438a      	bics	r2, r1
 800315e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	2207      	movs	r2, #7
 8003168:	4013      	ands	r3, r2
 800316a:	b299      	uxth	r1, r3
 800316c:	183b      	adds	r3, r7, r0
 800316e:	183a      	adds	r2, r7, r0
 8003170:	8812      	ldrh	r2, [r2, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	183a      	adds	r2, r7, r0
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	e04c      	b.n	800321c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003182:	231e      	movs	r3, #30
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e047      	b.n	800321c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800318c:	231f      	movs	r3, #31
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d015      	beq.n	80031c2 <UART_SetConfig+0x1ee>
 8003196:	dc18      	bgt.n	80031ca <UART_SetConfig+0x1f6>
 8003198:	2b04      	cmp	r3, #4
 800319a:	d00d      	beq.n	80031b8 <UART_SetConfig+0x1e4>
 800319c:	dc15      	bgt.n	80031ca <UART_SetConfig+0x1f6>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <UART_SetConfig+0x1d4>
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d005      	beq.n	80031b2 <UART_SetConfig+0x1de>
 80031a6:	e010      	b.n	80031ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7ff fab8 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80031ac:	0003      	movs	r3, r0
 80031ae:	61bb      	str	r3, [r7, #24]
        break;
 80031b0:	e012      	b.n	80031d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <UART_SetConfig+0x27c>)
 80031b4:	61bb      	str	r3, [r7, #24]
        break;
 80031b6:	e00f      	b.n	80031d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b8:	f7ff fa34 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80031bc:	0003      	movs	r3, r0
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e00a      	b.n	80031d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	61bb      	str	r3, [r7, #24]
        break;
 80031c8:	e006      	b.n	80031d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ce:	231e      	movs	r3, #30
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
        break;
 80031d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01e      	beq.n	800321c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	085a      	lsrs	r2, r3, #1
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	18d2      	adds	r2, r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0019      	movs	r1, r3
 80031ee:	0010      	movs	r0, r2
 80031f0:	f7fc ff8a 	bl	8000108 <__udivsi3>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d90a      	bls.n	8003214 <UART_SetConfig+0x240>
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	429a      	cmp	r2, r3
 8003206:	d205      	bcs.n	8003214 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e003      	b.n	800321c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003214:	231e      	movs	r3, #30
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003228:	231e      	movs	r3, #30
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b008      	add	sp, #32
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	efff69f3 	.word	0xefff69f3
 800323c:	ffffcfff 	.word	0xffffcfff
 8003240:	fffff4ff 	.word	0xfffff4ff
 8003244:	40013800 	.word	0x40013800
 8003248:	40021000 	.word	0x40021000
 800324c:	40004400 	.word	0x40004400
 8003250:	007a1200 	.word	0x007a1200

08003254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	2208      	movs	r2, #8
 8003262:	4013      	ands	r3, r2
 8003264:	d00b      	beq.n	800327e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a4a      	ldr	r2, [pc, #296]	@ (8003398 <UART_AdvFeatureConfig+0x144>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	d00b      	beq.n	80032a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a43      	ldr	r2, [pc, #268]	@ (800339c <UART_AdvFeatureConfig+0x148>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a3b      	ldr	r2, [pc, #236]	@ (80033a0 <UART_AdvFeatureConfig+0x14c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	2204      	movs	r2, #4
 80032c8:	4013      	ands	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a34      	ldr	r2, [pc, #208]	@ (80033a4 <UART_AdvFeatureConfig+0x150>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	2210      	movs	r2, #16
 80032ea:	4013      	ands	r3, r2
 80032ec:	d00b      	beq.n	8003306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	@ (80033a8 <UART_AdvFeatureConfig+0x154>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	2220      	movs	r2, #32
 800330c:	4013      	ands	r3, r2
 800330e:	d00b      	beq.n	8003328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4a25      	ldr	r2, [pc, #148]	@ (80033ac <UART_AdvFeatureConfig+0x158>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	2240      	movs	r2, #64	@ 0x40
 800332e:	4013      	ands	r3, r2
 8003330:	d01d      	beq.n	800336e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <UART_AdvFeatureConfig+0x15c>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	035b      	lsls	r3, r3, #13
 8003352:	429a      	cmp	r2, r3
 8003354:	d10b      	bne.n	800336e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a15      	ldr	r2, [pc, #84]	@ (80033b4 <UART_AdvFeatureConfig+0x160>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	2280      	movs	r2, #128	@ 0x80
 8003374:	4013      	ands	r3, r2
 8003376:	d00b      	beq.n	8003390 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a0e      	ldr	r2, [pc, #56]	@ (80033b8 <UART_AdvFeatureConfig+0x164>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}
 8003398:	ffff7fff 	.word	0xffff7fff
 800339c:	fffdffff 	.word	0xfffdffff
 80033a0:	fffeffff 	.word	0xfffeffff
 80033a4:	fffbffff 	.word	0xfffbffff
 80033a8:	ffffefff 	.word	0xffffefff
 80033ac:	ffffdfff 	.word	0xffffdfff
 80033b0:	ffefffff 	.word	0xffefffff
 80033b4:	ff9fffff 	.word	0xff9fffff
 80033b8:	fff7ffff 	.word	0xfff7ffff

080033bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b092      	sub	sp, #72	@ 0x48
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2284      	movs	r2, #132	@ 0x84
 80033c8:	2100      	movs	r1, #0
 80033ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033cc:	f7fd fc00 	bl	8000bd0 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2208      	movs	r2, #8
 80033dc:	4013      	ands	r3, r2
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d12c      	bne.n	800343c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	0391      	lsls	r1, r2, #14
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4a46      	ldr	r2, [pc, #280]	@ (8003504 <UART_CheckIdleState+0x148>)
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f000 f88c 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d021      	beq.n	800343c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f8:	f3ef 8310 	mrs	r3, PRIMASK
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003402:	2301      	movs	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			@ (mov r8, r8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	438a      	bics	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2278      	movs	r2, #120	@ 0x78
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e05f      	b.n	80034fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2204      	movs	r2, #4
 8003444:	4013      	ands	r3, r2
 8003446:	2b04      	cmp	r3, #4
 8003448:	d146      	bne.n	80034d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344c:	2280      	movs	r2, #128	@ 0x80
 800344e:	03d1      	lsls	r1, r2, #15
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4a2c      	ldr	r2, [pc, #176]	@ (8003504 <UART_CheckIdleState+0x148>)
 8003454:	9200      	str	r2, [sp, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	f000 f858 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d03b      	beq.n	80034d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	60fb      	str	r3, [r7, #12]
  return(result);
 8003466:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
 800346a:	2301      	movs	r3, #1
 800346c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4921      	ldr	r1, [pc, #132]	@ (8003508 <UART_CheckIdleState+0x14c>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	61bb      	str	r3, [r7, #24]
  return(result);
 8003498:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	633b      	str	r3, [r7, #48]	@ 0x30
 800349c:	2301      	movs	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	438a      	bics	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	2120      	movs	r1, #32
 80034ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2278      	movs	r2, #120	@ 0x78
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e011      	b.n	80034fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2280      	movs	r2, #128	@ 0x80
 80034e2:	2120      	movs	r1, #32
 80034e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2278      	movs	r2, #120	@ 0x78
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b010      	add	sp, #64	@ 0x40
 8003502:	bd80      	pop	{r7, pc}
 8003504:	01ffffff 	.word	0x01ffffff
 8003508:	fffffedf 	.word	0xfffffedf

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e051      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3301      	adds	r3, #1
 8003522:	d04e      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fd fb54 	bl	8000bd0 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e051      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2204      	movs	r2, #4
 8003546:	4013      	ands	r3, r2
 8003548:	d03b      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b80      	cmp	r3, #128	@ 0x80
 800354e:	d038      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b40      	cmp	r3, #64	@ 0x40
 8003554:	d035      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	2208      	movs	r2, #8
 800355e:	4013      	ands	r3, r2
 8003560:	2b08      	cmp	r3, #8
 8003562:	d111      	bne.n	8003588 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f906 	bl	8003780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2284      	movs	r2, #132	@ 0x84
 8003578:	2108      	movs	r1, #8
 800357a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2278      	movs	r2, #120	@ 0x78
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e02c      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	401a      	ands	r2, r3
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	429a      	cmp	r2, r3
 800359a:	d112      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 f8e9 	bl	8003780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2284      	movs	r2, #132	@ 0x84
 80035b2:	2120      	movs	r1, #32
 80035b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2278      	movs	r2, #120	@ 0x78
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	4153      	adcs	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	001a      	movs	r2, r3
 80035d8:	1dfb      	adds	r3, r7, #7
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d09e      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b090      	sub	sp, #64	@ 0x40
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	1dbb      	adds	r3, r7, #6
 80035f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1dba      	adds	r2, r7, #6
 8003604:	2158      	movs	r1, #88	@ 0x58
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1dba      	adds	r2, r7, #6
 800360e:	215a      	movs	r1, #90	@ 0x5a
 8003610:	8812      	ldrh	r2, [r2, #0]
 8003612:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	015b      	lsls	r3, r3, #5
 8003622:	429a      	cmp	r2, r3
 8003624:	d10d      	bne.n	8003642 <UART_Start_Receive_IT+0x56>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <UART_Start_Receive_IT+0x4c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	225c      	movs	r2, #92	@ 0x5c
 8003632:	4950      	ldr	r1, [pc, #320]	@ (8003774 <UART_Start_Receive_IT+0x188>)
 8003634:	5299      	strh	r1, [r3, r2]
 8003636:	e02e      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	225c      	movs	r2, #92	@ 0x5c
 800363c:	21ff      	movs	r1, #255	@ 0xff
 800363e:	5299      	strh	r1, [r3, r2]
 8003640:	e029      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <UART_Start_Receive_IT+0x7a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <UART_Start_Receive_IT+0x70>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	225c      	movs	r2, #92	@ 0x5c
 8003656:	21ff      	movs	r1, #255	@ 0xff
 8003658:	5299      	strh	r1, [r3, r2]
 800365a:	e01c      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	225c      	movs	r2, #92	@ 0x5c
 8003660:	217f      	movs	r1, #127	@ 0x7f
 8003662:	5299      	strh	r1, [r3, r2]
 8003664:	e017      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	055b      	lsls	r3, r3, #21
 800366e:	429a      	cmp	r2, r3
 8003670:	d10d      	bne.n	800368e <UART_Start_Receive_IT+0xa2>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <UART_Start_Receive_IT+0x98>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	225c      	movs	r2, #92	@ 0x5c
 800367e:	217f      	movs	r1, #127	@ 0x7f
 8003680:	5299      	strh	r1, [r3, r2]
 8003682:	e008      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	225c      	movs	r2, #92	@ 0x5c
 8003688:	213f      	movs	r1, #63	@ 0x3f
 800368a:	5299      	strh	r1, [r3, r2]
 800368c:	e003      	b.n	8003696 <UART_Start_Receive_IT+0xaa>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	225c      	movs	r2, #92	@ 0x5c
 8003692:	2100      	movs	r1, #0
 8003694:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2284      	movs	r2, #132	@ 0x84
 800369a:	2100      	movs	r1, #0
 800369c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2280      	movs	r2, #128	@ 0x80
 80036a2:	2122      	movs	r1, #34	@ 0x22
 80036a4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b0:	2301      	movs	r3, #1
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <UART_Start_Receive_IT+0x108>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <UART_Start_Receive_IT+0x18c>)
 80036f0:	669a      	str	r2, [r3, #104]	@ 0x68
 80036f2:	e002      	b.n	80036fa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a21      	ldr	r2, [pc, #132]	@ (800377c <UART_Start_Receive_IT+0x190>)
 80036f8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d019      	beq.n	8003736 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003702:	f3ef 8310 	mrs	r3, PRIMASK
 8003706:	61fb      	str	r3, [r7, #28]
  return(result);
 8003708:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
 800370c:	2301      	movs	r3, #1
 800370e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f383 8810 	msr	PRIMASK, r3
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2190      	movs	r1, #144	@ 0x90
 8003724:	0049      	lsls	r1, r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	f383 8810 	msr	PRIMASK, r3
}
 8003734:	e018      	b.n	8003768 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	613b      	str	r3, [r7, #16]
  return(result);
 800373c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800373e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2120      	movs	r1, #32
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b010      	add	sp, #64	@ 0x40
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	000001ff 	.word	0x000001ff
 8003778:	08003a85 	.word	0x08003a85
 800377c:	080038cd 	.word	0x080038cd

08003780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003788:	f3ef 8310 	mrs	r3, PRIMASK
 800378c:	617b      	str	r3, [r7, #20]
  return(result);
 800378e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4926      	ldr	r1, [pc, #152]	@ (8003844 <UART_EndRxTransfer+0xc4>)
 80037aa:	400a      	ands	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	623b      	str	r3, [r7, #32]
  return(result);
 80037c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	f383 8810 	msr	PRIMASK, r3
}
 80037ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d118      	bne.n	8003826 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f4:	f3ef 8310 	mrs	r3, PRIMASK
 80037f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fe:	2301      	movs	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f383 8810 	msr	PRIMASK, r3
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2110      	movs	r1, #16
 8003816:	438a      	bics	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f383 8810 	msr	PRIMASK, r3
}
 8003824:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	2120      	movs	r1, #32
 800382c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b00e      	add	sp, #56	@ 0x38
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	fffffedf 	.word	0xfffffedf

08003848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	225a      	movs	r2, #90	@ 0x5a
 800385a:	2100      	movs	r1, #0
 800385c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2252      	movs	r2, #82	@ 0x52
 8003862:	2100      	movs	r1, #0
 8003864:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fb9f 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387e:	f3ef 8310 	mrs	r3, PRIMASK
 8003882:	60bb      	str	r3, [r7, #8]
  return(result);
 8003884:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	2301      	movs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2140      	movs	r1, #64	@ 0x40
 80038a0:	438a      	bics	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f383 8810 	msr	PRIMASK, r3
}
 80038ae:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f7ff fb6c 	bl	8002f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b006      	add	sp, #24
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b094      	sub	sp, #80	@ 0x50
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038d4:	204e      	movs	r0, #78	@ 0x4e
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	215c      	movs	r1, #92	@ 0x5c
 80038dc:	5a52      	ldrh	r2, [r2, r1]
 80038de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	589b      	ldr	r3, [r3, r2]
 80038e6:	2b22      	cmp	r3, #34	@ 0x22
 80038e8:	d000      	beq.n	80038ec <UART_RxISR_8BIT+0x20>
 80038ea:	e0ba      	b.n	8003a62 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	214c      	movs	r1, #76	@ 0x4c
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80038f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b2d9      	uxtb	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	400a      	ands	r2, r1
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	225a      	movs	r2, #90	@ 0x5a
 800391c:	5a9b      	ldrh	r3, [r3, r2]
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b299      	uxth	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	225a      	movs	r2, #90	@ 0x5a
 8003928:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	225a      	movs	r2, #90	@ 0x5a
 800392e:	5a9b      	ldrh	r3, [r3, r2]
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d000      	beq.n	8003938 <UART_RxISR_8BIT+0x6c>
 8003936:	e09c      	b.n	8003a72 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003938:	f3ef 8310 	mrs	r3, PRIMASK
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003942:	2301      	movs	r3, #1
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			@ (mov r8, r8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4948      	ldr	r1, [pc, #288]	@ (8003a7c <UART_RxISR_8BIT+0x1b0>)
 800395a:	400a      	ands	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	f383 8810 	msr	PRIMASK, r3
}
 8003968:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396a:	f3ef 8310 	mrs	r3, PRIMASK
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	647b      	str	r3, [r7, #68]	@ 0x44
 8003974:	2301      	movs	r3, #1
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	438a      	bics	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	f383 8810 	msr	PRIMASK, r3
}
 800399a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	2120      	movs	r1, #32
 80039a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	4013      	ands	r3, r2
 80039bc:	d018      	beq.n	80039f0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039be:	f3ef 8310 	mrs	r3, PRIMASK
 80039c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80039c4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c8:	2301      	movs	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f383 8810 	msr	PRIMASK, r3
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4928      	ldr	r1, [pc, #160]	@ (8003a80 <UART_RxISR_8BIT+0x1b4>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d12f      	bne.n	8003a58 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a04:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a08:	2301      	movs	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2110      	movs	r1, #16
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	2210      	movs	r2, #16
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d103      	bne.n	8003a46 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2258      	movs	r2, #88	@ 0x58
 8003a4a:	5a9a      	ldrh	r2, [r3, r2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff fab3 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a56:	e00c      	b.n	8003a72 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7fc fcce 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8003a60:	e007      	b.n	8003a72 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	619a      	str	r2, [r3, #24]
}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b014      	add	sp, #80	@ 0x50
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	fffffedf 	.word	0xfffffedf
 8003a80:	fbffffff 	.word	0xfbffffff

08003a84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b094      	sub	sp, #80	@ 0x50
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a8c:	204e      	movs	r0, #78	@ 0x4e
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	215c      	movs	r1, #92	@ 0x5c
 8003a94:	5a52      	ldrh	r2, [r2, r1]
 8003a96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	589b      	ldr	r3, [r3, r2]
 8003a9e:	2b22      	cmp	r3, #34	@ 0x22
 8003aa0:	d000      	beq.n	8003aa4 <UART_RxISR_16BIT+0x20>
 8003aa2:	e0ba      	b.n	8003c1a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	214c      	movs	r1, #76	@ 0x4c
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003aae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	183a      	adds	r2, r7, r0
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	1c9a      	adds	r2, r3, #2
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	225a      	movs	r2, #90	@ 0x5a
 8003ad4:	5a9b      	ldrh	r3, [r3, r2]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b299      	uxth	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	225a      	movs	r2, #90	@ 0x5a
 8003ae0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	225a      	movs	r2, #90	@ 0x5a
 8003ae6:	5a9b      	ldrh	r3, [r3, r2]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d000      	beq.n	8003af0 <UART_RxISR_16BIT+0x6c>
 8003aee:	e09c      	b.n	8003c2a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	623b      	str	r3, [r7, #32]
  return(result);
 8003af6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003afa:	2301      	movs	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4948      	ldr	r1, [pc, #288]	@ (8003c34 <UART_RxISR_16BIT+0x1b0>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b22:	f3ef 8310 	mrs	r3, PRIMASK
 8003b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	@ 0x80
 8003b58:	2120      	movs	r1, #32
 8003b5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	4013      	ands	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b76:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b7c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b80:	2301      	movs	r3, #1
 8003b82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4928      	ldr	r1, [pc, #160]	@ (8003c38 <UART_RxISR_16BIT+0x1b4>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d12f      	bne.n	8003c10 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bbc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	438a      	bics	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d103      	bne.n	8003bfe <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2258      	movs	r2, #88	@ 0x58
 8003c02:	5a9a      	ldrh	r2, [r3, r2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff f9d7 	bl	8002fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c0e:	e00c      	b.n	8003c2a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fbf2 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8003c18:	e007      	b.n	8003c2a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2108      	movs	r1, #8
 8003c26:	430a      	orrs	r2, r1
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b014      	add	sp, #80	@ 0x50
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	fffffedf 	.word	0xfffffedf
 8003c38:	fbffffff 	.word	0xfbffffff

08003c3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <memset>:
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	1882      	adds	r2, r0, r2
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d100      	bne.n	8003c56 <memset+0xa>
 8003c54:	4770      	bx	lr
 8003c56:	7019      	strb	r1, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e7f9      	b.n	8003c50 <memset+0x4>

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	2600      	movs	r6, #0
 8003c60:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x38>)
 8003c62:	4d0d      	ldr	r5, [pc, #52]	@ (8003c98 <__libc_init_array+0x3c>)
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	f000 f823 	bl	8003cb8 <_init>
 8003c72:	4c0a      	ldr	r4, [pc, #40]	@ (8003c9c <__libc_init_array+0x40>)
 8003c74:	4d0a      	ldr	r5, [pc, #40]	@ (8003ca0 <__libc_init_array+0x44>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	00b3      	lsls	r3, r6, #2
 8003c82:	58eb      	ldr	r3, [r5, r3]
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	00b3      	lsls	r3, r6, #2
 8003c8c:	58eb      	ldr	r3, [r5, r3]
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08003d80 	.word	0x08003d80
 8003c98:	08003d80 	.word	0x08003d80
 8003c9c:	08003d84 	.word	0x08003d84
 8003ca0:	08003d80 	.word	0x08003d80

08003ca4 <memcpy>:
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d100      	bne.n	8003cae <memcpy+0xa>
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	5ccc      	ldrb	r4, [r1, r3]
 8003cb0:	54c4      	strb	r4, [r0, r3]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	e7f8      	b.n	8003ca8 <memcpy+0x4>
	...

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

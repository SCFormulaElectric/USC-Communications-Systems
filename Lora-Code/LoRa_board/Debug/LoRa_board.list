
LoRa_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a5c  08002a5c  00003a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a94  08002a94  00004018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a94  08002a94  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a98  08002a98  00003a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002a9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  08002ab4  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002ab4  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008657  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141e  00000000  00000000  0000c697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000552  00000000  00000000  0000e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb5  00000000  00000000  0000e6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b33  00000000  00000000  000266a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aece  00000000  00000000  0002f1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba0a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  000ba0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000bb8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a44 	.word	0x08002a44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08002a44 	.word	0x08002a44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 faa7 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f85f 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f911 	bl	8000454 <MX_GPIO_Init>
  MX_CAN_Init();
 8000232:	f000 f8a7 	bl	8000384 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8dd 	bl	80003f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_TxHeaderTypeDef txHeader;
  uint8_t txData[2];
  uint32_t txMailbox;

  txHeader.StdId = 0x123;
 800023a:	2108      	movs	r1, #8
 800023c:	187b      	adds	r3, r7, r1
 800023e:	2224      	movs	r2, #36	@ 0x24
 8000240:	32ff      	adds	r2, #255	@ 0xff
 8000242:	601a      	str	r2, [r3, #0]
  txHeader.RTR = CAN_RTR_DATA;
 8000244:	187b      	adds	r3, r7, r1
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_STD;
 800024a:	187b      	adds	r3, r7, r1
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 2;
 8000250:	187b      	adds	r3, r7, r1
 8000252:	2202      	movs	r2, #2
 8000254:	611a      	str	r2, [r3, #16]
  txHeader.TransmitGlobalTime = DISABLE;
 8000256:	187b      	adds	r3, r7, r1
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800025c:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <main+0xb8>)
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fc10 	bl	8000a84 <HAL_CAN_Start>
 8000264:	1e03      	subs	r3, r0, #0
 8000266:	d001      	beq.n	800026c <main+0x4c>
  {
    Error_Handler();
 8000268:	f000 f95a 	bl	8000520 <Error_Handler>
  }

  // --- START THE FIRST UART RECEPTION WITH INTERRUPT ---
  // This tells the UART hardware to start listening in the background.
  HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_LEN);
 800026c:	491b      	ldr	r1, [pc, #108]	@ (80002dc <main+0xbc>)
 800026e:	4b1c      	ldr	r3, [pc, #112]	@ (80002e0 <main+0xc0>)
 8000270:	2208      	movs	r2, #8
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fd57 	bl	8001d26 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. Transmit the UART message.
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_message, MSG_LEN, 100);
 8000278:	491a      	ldr	r1, [pc, #104]	@ (80002e4 <main+0xc4>)
 800027a:	4819      	ldr	r0, [pc, #100]	@ (80002e0 <main+0xc0>)
 800027c:	2364      	movs	r3, #100	@ 0x64
 800027e:	2208      	movs	r2, #8
 8000280:	f001 fcb2 	bl	8001be8 <HAL_UART_Transmit>

    // 2. Wait for the receive interrupt to set our flag.
    //    (The HAL_UART_RxCpltCallback function below will set this flag to 1)
    while (rx_complete_flag == 0)
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <main+0xc8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0fa      	beq.n	8000286 <main+0x66>
    {
      // Wait here until the interrupt signals that reception is complete.
    }

    // 3. Reception is done. Reset the flag for the next loop.
    rx_complete_flag = 0;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <main+0xc8>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]

    // 4. Check if the received data matches what we sent.
    if (memcmp(tx_message, rx_buffer, MSG_LEN) == 0)
 8000296:	4911      	ldr	r1, [pc, #68]	@ (80002dc <main+0xbc>)
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <main+0xc4>)
 800029a:	2208      	movs	r2, #8
 800029c:	0018      	movs	r0, r3
 800029e:	f002 fb97 	bl	80029d0 <memcmp>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d105      	bne.n	80002b2 <main+0x92>
    {
      // If the data matches, toggle the LED to confirm success.
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002a6:	2390      	movs	r3, #144	@ 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2120      	movs	r1, #32
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 ff3a 	bl	8001126 <HAL_GPIO_TogglePin>
    }

    // 5. Send a CAN message. This will now work because of the Loopback Mode fix.
    txData[0] = 0xAA;
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	22aa      	movs	r2, #170	@ 0xaa
 80002b6:	701a      	strb	r2, [r3, #0]
    txData[1] = 0x55;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2255      	movs	r2, #85	@ 0x55
 80002bc:	705a      	strb	r2, [r3, #1]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 80002be:	003b      	movs	r3, r7
 80002c0:	1d3a      	adds	r2, r7, #4
 80002c2:	2108      	movs	r1, #8
 80002c4:	1879      	adds	r1, r7, r1
 80002c6:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <main+0xb8>)
 80002c8:	f000 fc22 	bl	8000b10 <HAL_CAN_AddTxMessage>

    // 6. Delay to make the LED blink visible.
    HAL_Delay(500);
 80002cc:	23fa      	movs	r3, #250	@ 0xfa
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fab5 	bl	8000840 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_message, MSG_LEN, 100);
 80002d6:	e7cf      	b.n	8000278 <main+0x58>
 80002d8:	20000034 	.word	0x20000034
 80002dc:	200000e4 	.word	0x200000e4
 80002e0:	2000005c 	.word	0x2000005c
 80002e4:	20000000 	.word	0x20000000
 80002e8:	200000ec 	.word	0x200000ec

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b093      	sub	sp, #76	@ 0x4c
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	2414      	movs	r4, #20
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2334      	movs	r3, #52	@ 0x34
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 fb75 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	2310      	movs	r3, #16
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 fb6e 	bl	80029ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	0021      	movs	r1, r4
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2280      	movs	r2, #128	@ 0x80
 800032e:	0212      	lsls	r2, r2, #8
 8000330:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	0352      	lsls	r2, r2, #13
 8000338:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	187b      	adds	r3, r7, r1
 8000342:	0018      	movs	r0, r3
 8000344:	f000 ff0a 	bl	800115c <HAL_RCC_OscConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800034c:	f000 f8e8 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2207      	movs	r2, #7
 8000354:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2202      	movs	r2, #2
 800035a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2101      	movs	r1, #1
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fa7b 	bl	8001868 <HAL_RCC_ClockConfig>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000376:	f000 f8d3 	bl	8000520 <Error_Handler>
  }
}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b013      	add	sp, #76	@ 0x4c
 8000380:	bd90      	pop	{r4, r7, pc}
	...

08000384 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_CAN_Init+0x68>)
 800038a:	4a19      	ldr	r2, [pc, #100]	@ (80003f0 <MX_CAN_Init+0x6c>)
 800038c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_CAN_Init+0x68>)
 8000390:	2206      	movs	r2, #6
 8000392:	605a      	str	r2, [r3, #4]
  // --- IMPORTANT FIX FOR SINGLE-BOARD TESTING ---
  hcan.Init.Mode = CAN_MODE_LOOPBACK; // Use Loopback mode for self-testing
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_CAN_Init+0x68>)
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	05d2      	lsls	r2, r2, #23
 800039a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800039c:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_CAN_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_CAN_Init+0x68>)
 80003a4:	22c0      	movs	r2, #192	@ 0xc0
 80003a6:	0312      	lsls	r2, r2, #12
 80003a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003aa:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <MX_CAN_Init+0x68>)
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	0352      	lsls	r2, r2, #13
 80003b0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_CAN_Init+0x68>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_CAN_Init+0x68>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <MX_CAN_Init+0x68>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003c4:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_CAN_Init+0x68>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <MX_CAN_Init+0x68>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <MX_CAN_Init+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003d6:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <MX_CAN_Init+0x68>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fa55 	bl	8000888 <HAL_CAN_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003e2:	f000 f89d 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000034 	.word	0x20000034
 80003f0:	40006400 	.word	0x40006400

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_USART2_UART_Init+0x58>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	@ (8000450 <MX_USART2_UART_Init+0x5c>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003fe:	4b13      	ldr	r3, [pc, #76]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000400:	2296      	movs	r2, #150	@ 0x96
 8000402:	0212      	lsls	r2, r2, #8
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_USART2_UART_Init+0x58>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b08      	ldr	r3, [pc, #32]	@ (800044c <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <MX_USART2_UART_Init+0x58>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fb81 	bl	8001b40 <HAL_UART_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000442:	f000 f86d 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000005c 	.word	0x2000005c
 8000450:	40004400 	.word	0x40004400

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	@ 0x24
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	240c      	movs	r4, #12
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2314      	movs	r3, #20
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fac1 	bl	80029ec <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	03c9      	lsls	r1, r1, #15
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	03db      	lsls	r3, r3, #15
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 800048c:	2180      	movs	r1, #128	@ 0x80
 800048e:	0289      	lsls	r1, r1, #10
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_GPIO_Init+0x8c>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	029b      	lsls	r3, r3, #10
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004a2:	2390      	movs	r3, #144	@ 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fe1e 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004b0:	0021      	movs	r1, r4
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2220      	movs	r2, #32
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	2390      	movs	r3, #144	@ 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fca2 	bl	8000e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	@ 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_RxCpltCallback>:
  * requested number of bytes has been received via interrupt.
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  // Check if the interrupt is from our UART peripheral
  if (huart->Instance == USART2)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <HAL_UART_RxCpltCallback+0x2c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d108      	bne.n	8000508 <HAL_UART_RxCpltCallback+0x24>
  {
    // Set the flag to signal the main loop that data is ready
    rx_complete_flag = 1;
 80004f6:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <HAL_UART_RxCpltCallback+0x30>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]

    // IMPORTANT: Re-arm the interrupt to be ready for the next message
    HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_LEN);
 80004fc:	4906      	ldr	r1, [pc, #24]	@ (8000518 <HAL_UART_RxCpltCallback+0x34>)
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <HAL_UART_RxCpltCallback+0x38>)
 8000500:	2208      	movs	r2, #8
 8000502:	0018      	movs	r0, r3
 8000504:	f001 fc0f 	bl	8001d26 <HAL_UART_Receive_IT>
  }
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40004400 	.word	0x40004400
 8000514:	200000ec 	.word	0x200000ec
 8000518:	200000e4 	.word	0x200000e4
 800051c:	2000005c 	.word	0x2000005c

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_MspInit+0x50>)
 8000534:	699a      	ldr	r2, [r3, #24]
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <HAL_MspInit+0x50>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	619a      	str	r2, [r3, #24]
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <HAL_MspInit+0x50>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <HAL_MspInit+0x50>)
 800054c:	69da      	ldr	r2, [r3, #28]
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <HAL_MspInit+0x50>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0549      	lsls	r1, r1, #21
 8000554:	430a      	orrs	r2, r1
 8000556:	61da      	str	r2, [r3, #28]
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <HAL_MspInit+0x50>)
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	055b      	lsls	r3, r3, #21
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <HAL_MspInit+0x54>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <HAL_MspInit+0x54>)
 800056c:	2110      	movs	r1, #16
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	2414      	movs	r4, #20
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0018      	movs	r0, r3
 8000592:	2314      	movs	r3, #20
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fa28 	bl	80029ec <memset>
  if(hcan->Instance==CAN)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <HAL_CAN_MspInit+0x94>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d133      	bne.n	800060e <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005a6:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0489      	lsls	r1, r1, #18
 80005b0:	430a      	orrs	r2, r1
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	049b      	lsls	r3, r3, #18
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b16      	ldr	r3, [pc, #88]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_CAN_MspInit+0x98>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	22c0      	movs	r2, #192	@ 0xc0
 80005e2:	0152      	lsls	r2, r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2203      	movs	r2, #3
 80005f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2204      	movs	r2, #4
 80005fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	187a      	adds	r2, r7, r1
 8000602:	2390      	movs	r3, #144	@ 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fc07 	bl	8000e1c <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b00b      	add	sp, #44	@ 0x2c
 8000614:	bd90      	pop	{r4, r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	40006400 	.word	0x40006400
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08b      	sub	sp, #44	@ 0x2c
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	2414      	movs	r4, #20
 800062a:	193b      	adds	r3, r7, r4
 800062c:	0018      	movs	r0, r3
 800062e:	2314      	movs	r3, #20
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 f9da 	bl	80029ec <memset>
  if(huart->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1c      	ldr	r2, [pc, #112]	@ (80006b0 <HAL_UART_MspInit+0x90>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d132      	bne.n	80006a8 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000644:	69da      	ldr	r2, [r3, #28]
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0289      	lsls	r1, r1, #10
 800064c:	430a      	orrs	r2, r1
 800064e:	61da      	str	r2, [r3, #28]
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	029b      	lsls	r3, r3, #10
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	0289      	lsls	r1, r1, #10
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <HAL_UART_MspInit+0x94>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800067a:	0021      	movs	r1, r4
 800067c:	187b      	adds	r3, r7, r1
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2202      	movs	r2, #2
 8000686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2203      	movs	r2, #3
 8000692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	187a      	adds	r2, r7, r1
 800069c:	2390      	movs	r3, #144	@ 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fbba 	bl	8000e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b00b      	add	sp, #44	@ 0x2c
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40021000 	.word	0x40021000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	e7fd      	b.n	80006bc <NMI_Handler+0x4>

080006c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	e7fd      	b.n	80006c4 <HardFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f892 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f8:	f7ff fff7 	bl	80006ea <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006fc:	4812      	ldr	r0, [pc, #72]	@ (8000748 <LoopForever+0x6>)
    LDR R1, [R0]
 80006fe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000700:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <LoopForever+0xa>)
    CMP R1, R2
 8000704:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000706:	d105      	bne.n	8000714 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000708:	4811      	ldr	r0, [pc, #68]	@ (8000750 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800070a:	4912      	ldr	r1, [pc, #72]	@ (8000754 <LoopForever+0x12>)
    STR R1, [R0]
 800070c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800070e:	4812      	ldr	r0, [pc, #72]	@ (8000758 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000710:	4912      	ldr	r1, [pc, #72]	@ (800075c <LoopForever+0x1a>)
    STR R1, [R0]
 8000712:	6001      	str	r1, [r0, #0]

08000714 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	4812      	ldr	r0, [pc, #72]	@ (8000760 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000716:	4913      	ldr	r1, [pc, #76]	@ (8000764 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000718:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <LoopForever+0x26>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800072c:	4c10      	ldr	r4, [pc, #64]	@ (8000770 <LoopForever+0x2e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073a:	f002 f95f 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fd6f 	bl	8000220 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000748:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800074c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000750:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000754:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000758:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800075c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000768:	08002a9c 	.word	0x08002a9c
  ldr r2, =_sbss
 800076c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000770:	200000f4 	.word	0x200000f4

08000774 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_IRQHandler>
	...

08000778 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <HAL_Init+0x24>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_Init+0x24>)
 8000782:	2110      	movs	r1, #16
 8000784:	430a      	orrs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f809 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078e:	f7ff fecd 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_InitTick+0x5c>)
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_InitTick+0x60>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	0019      	movs	r1, r3
 80007b2:	23fa      	movs	r3, #250	@ 0xfa
 80007b4:	0098      	lsls	r0, r3, #2
 80007b6:	f7ff fca7 	bl	8000108 <__udivsi3>
 80007ba:	0003      	movs	r3, r0
 80007bc:	0019      	movs	r1, r3
 80007be:	0020      	movs	r0, r4
 80007c0:	f7ff fca2 	bl	8000108 <__udivsi3>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fb1b 	bl	8000e02 <HAL_SYSTICK_Config>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e00f      	b.n	80007f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d80b      	bhi.n	80007f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 faf8 	bl	8000dd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_InitTick+0x64>)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b003      	add	sp, #12
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	20000014 	.word	0x20000014
 8000804:	20000010 	.word	0x20000010

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	18d2      	adds	r2, r2, r3
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <HAL_IncTick+0x20>)
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	20000014 	.word	0x20000014
 8000828:	200000f0 	.word	0x200000f0

0800082c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	@ (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	200000f0 	.word	0x200000f0

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff fff0 	bl	800082c <HAL_GetTick>
 800084c:	0003      	movs	r3, r0
 800084e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	001a      	movs	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	189b      	adds	r3, r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	f7ff ffe0 	bl	800082c <HAL_GetTick>
 800086c:	0002      	movs	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b004      	add	sp, #16
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	20000014 	.word	0x20000014

08000888 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e0f0      	b.n	8000a7c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2220      	movs	r2, #32
 800089e:	5c9b      	ldrb	r3, [r3, r2]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fe6b 	bl	8000584 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008be:	f7ff ffb5 	bl	800082c <HAL_GetTick>
 80008c2:	0003      	movs	r3, r0
 80008c4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008c6:	e013      	b.n	80008f0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008c8:	f7ff ffb0 	bl	800082c <HAL_GetTick>
 80008cc:	0002      	movs	r2, r0
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2b0a      	cmp	r3, #10
 80008d4:	d90c      	bls.n	80008f0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	0292      	lsls	r2, r2, #10
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2220      	movs	r2, #32
 80008e8:	2105      	movs	r1, #5
 80008ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e0c5      	b.n	8000a7c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	d0e5      	beq.n	80008c8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2102      	movs	r1, #2
 8000908:	438a      	bics	r2, r1
 800090a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800090c:	f7ff ff8e 	bl	800082c <HAL_GetTick>
 8000910:	0003      	movs	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000914:	e013      	b.n	800093e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000916:	f7ff ff89 	bl	800082c <HAL_GetTick>
 800091a:	0002      	movs	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b0a      	cmp	r3, #10
 8000922:	d90c      	bls.n	800093e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	0292      	lsls	r2, r2, #10
 800092c:	431a      	orrs	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2220      	movs	r2, #32
 8000936:	2105      	movs	r1, #5
 8000938:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e09e      	b.n	8000a7c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2202      	movs	r2, #2
 8000946:	4013      	ands	r3, r2
 8000948:	d1e5      	bne.n	8000916 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7e1b      	ldrb	r3, [r3, #24]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d108      	bne.n	8000964 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	430a      	orrs	r2, r1
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	e007      	b.n	8000974 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	438a      	bics	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7e5b      	ldrb	r3, [r3, #25]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d108      	bne.n	800098e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	e007      	b.n	800099e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	438a      	bics	r2, r1
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7e9b      	ldrb	r3, [r3, #26]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d108      	bne.n	80009b8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2120      	movs	r1, #32
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e007      	b.n	80009c8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2120      	movs	r1, #32
 80009c4:	438a      	bics	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	7edb      	ldrb	r3, [r3, #27]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d108      	bne.n	80009e2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2110      	movs	r1, #16
 80009dc:	438a      	bics	r2, r1
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e007      	b.n	80009f2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2110      	movs	r1, #16
 80009ee:	430a      	orrs	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7f1b      	ldrb	r3, [r3, #28]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d108      	bne.n	8000a0c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2108      	movs	r1, #8
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e007      	b.n	8000a1c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2108      	movs	r1, #8
 8000a18:	438a      	bics	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7f5b      	ldrb	r3, [r3, #29]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d108      	bne.n	8000a36 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2104      	movs	r1, #4
 8000a30:	430a      	orrs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e007      	b.n	8000a46 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2104      	movs	r1, #4
 8000a42:	438a      	bics	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	1e5a      	subs	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2220      	movs	r2, #32
 8000a76:	2101      	movs	r1, #1
 8000a78:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b004      	add	sp, #16
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2220      	movs	r2, #32
 8000a90:	5c9b      	ldrb	r3, [r3, r2]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d12f      	bne.n	8000af8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	438a      	bics	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ab0:	f7ff febc 	bl	800082c <HAL_GetTick>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ab8:	e013      	b.n	8000ae2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aba:	f7ff feb7 	bl	800082c <HAL_GetTick>
 8000abe:	0002      	movs	r2, r0
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d90c      	bls.n	8000ae2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	0292      	lsls	r2, r2, #10
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2220      	movs	r2, #32
 8000ada:	2105      	movs	r1, #5
 8000adc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e012      	b.n	8000b08 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	d1e5      	bne.n	8000aba <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e007      	b.n	8000b08 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	0312      	lsls	r2, r2, #12
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
  }
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b1e:	201f      	movs	r0, #31
 8000b20:	183b      	adds	r3, r7, r0
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	2120      	movs	r1, #32
 8000b26:	5c52      	ldrb	r2, [r2, r1]
 8000b28:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b32:	183b      	adds	r3, r7, r0
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d004      	beq.n	8000b44 <HAL_CAN_AddTxMessage+0x34>
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d000      	beq.n	8000b44 <HAL_CAN_AddTxMessage+0x34>
 8000b42:	e0ab      	b.n	8000c9c <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	04db      	lsls	r3, r3, #19
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d10a      	bne.n	8000b64 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	051b      	lsls	r3, r3, #20
 8000b54:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b56:	d105      	bne.n	8000b64 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	2380      	movs	r3, #128	@ 0x80
 8000b5c:	055b      	lsls	r3, r3, #21
 8000b5e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b60:	d100      	bne.n	8000b64 <HAL_CAN_AddTxMessage+0x54>
 8000b62:	e092      	b.n	8000c8a <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	0e1b      	lsrs	r3, r3, #24
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10c      	bne.n	8000b9a <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4311      	orrs	r1, r2
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	3218      	adds	r2, #24
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	50d1      	str	r1, [r2, r3]
 8000b98:	e00f      	b.n	8000bba <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000bb0:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	3218      	adds	r2, #24
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3318      	adds	r3, #24
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	18cb      	adds	r3, r1, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	7d1b      	ldrb	r3, [r3, #20]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d112      	bne.n	8000bfc <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6819      	ldr	r1, [r3, #0]
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	18cb      	adds	r3, r1, r3
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3307      	adds	r3, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	061a      	lsls	r2, r3, #24
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3306      	adds	r3, #6
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	041b      	lsls	r3, r3, #16
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3305      	adds	r3, #5
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	0019      	movs	r1, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	6979      	ldr	r1, [r7, #20]
 8000c28:	23c6      	movs	r3, #198	@ 0xc6
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	0109      	lsls	r1, r1, #4
 8000c2e:	1841      	adds	r1, r0, r1
 8000c30:	18cb      	adds	r3, r1, r3
 8000c32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3303      	adds	r3, #3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	061a      	lsls	r2, r3, #24
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	0019      	movs	r1, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	6979      	ldr	r1, [r7, #20]
 8000c5e:	23c4      	movs	r3, #196	@ 0xc4
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	0109      	lsls	r1, r1, #4
 8000c64:	1841      	adds	r1, r0, r1
 8000c66:	18cb      	adds	r3, r1, r3
 8000c68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	3218      	adds	r2, #24
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	58d2      	ldr	r2, [r2, r3]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4311      	orrs	r1, r2
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	3218      	adds	r2, #24
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e010      	b.n	8000cac <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	0392      	lsls	r2, r2, #14
 8000c92:	431a      	orrs	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e007      	b.n	8000cac <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	02d2      	lsls	r2, r2, #11
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
  }
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b008      	add	sp, #32
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cc8:	d828      	bhi.n	8000d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cca:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	33c0      	adds	r3, #192	@ 0xc0
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	589b      	ldr	r3, [r3, r2]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <__NVIC_SetPriority+0xd4>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	430a      	orrs	r2, r1
 8000d14:	33c0      	adds	r3, #192	@ 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d1a:	e031      	b.n	8000d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0019      	movs	r1, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	400b      	ands	r3, r1
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3306      	adds	r3, #6
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	3304      	adds	r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1dfa      	adds	r2, r7, #7
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	400a      	ands	r2, r1
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	21ff      	movs	r1, #255	@ 0xff
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	019b      	lsls	r3, r3, #6
 8000d52:	22ff      	movs	r2, #255	@ 0xff
 8000d54:	401a      	ands	r2, r3
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	4003      	ands	r3, r0
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	4023      	ands	r3, r4
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	3306      	adds	r3, #6
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	18c3      	adds	r3, r0, r3
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b003      	add	sp, #12
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	045b      	lsls	r3, r3, #17
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d301      	bcc.n	8000da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da4:	2301      	movs	r3, #1
 8000da6:	e010      	b.n	8000dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <SysTick_Config+0x44>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	3a01      	subs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2103      	movs	r1, #3
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ff7c 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x44>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	210f      	movs	r1, #15
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ffbf 	bl	8000d90 <SysTick_Config>
 8000e12:	0003      	movs	r3, r0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e149      	b.n	80010c0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x28>
 8000e42:	e13a      	b.n	80010ba <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	0013      	movs	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	58d3      	ldr	r3, [r2, r3]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2207      	movs	r2, #7
 8000f18:	4013      	ands	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2107      	movs	r1, #7
 8000f32:	400b      	ands	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	6939      	ldr	r1, [r7, #16]
 8000f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	23c0      	movs	r3, #192	@ 0xc0
 8000f88:	029b      	lsls	r3, r3, #10
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d100      	bne.n	8000f90 <HAL_GPIO_Init+0x174>
 8000f8e:	e094      	b.n	80010ba <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b51      	ldr	r3, [pc, #324]	@ (80010d8 <HAL_GPIO_Init+0x2bc>)
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	4b50      	ldr	r3, [pc, #320]	@ (80010d8 <HAL_GPIO_Init+0x2bc>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80010d8 <HAL_GPIO_Init+0x2bc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <HAL_GPIO_Init+0x2c0>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	589b      	ldr	r3, [r3, r2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	4013      	ands	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	2390      	movs	r3, #144	@ 0x90
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x1d6>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a41      	ldr	r2, [pc, #260]	@ (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x1d2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a40      	ldr	r2, [pc, #256]	@ (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x1ce>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x1d8>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x1d8>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x1d8>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	@ (80010dc <HAL_GPIO_Init+0x2c0>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	035b      	lsls	r3, r3, #13
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001036:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800103c:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	039b      	lsls	r3, r3, #14
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001066:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	4013      	ands	r3, r2
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_GPIO_Init+0x2cc>)
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	40da      	lsrs	r2, r3
 80010c8:	1e13      	subs	r3, r2, #0
 80010ca:	d000      	beq.n	80010ce <HAL_GPIO_Init+0x2b2>
 80010cc:	e6ae      	b.n	8000e2c <HAL_GPIO_Init+0x10>
  } 
}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b006      	add	sp, #24
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000800 	.word	0x48000800
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	0008      	movs	r0, r1
 80010f6:	0011      	movs	r1, r2
 80010f8:	1cbb      	adds	r3, r7, #2
 80010fa:	1c02      	adds	r2, r0, #0
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	1c7b      	adds	r3, r7, #1
 8001100:	1c0a      	adds	r2, r1, #0
 8001102:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	000a      	movs	r2, r1
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	1cb9      	adds	r1, r7, #2
 800114a:	8809      	ldrh	r1, [r1, #0]
 800114c:	400b      	ands	r3, r1
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b004      	add	sp, #16
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 fb76 	bl	800185c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x20>
 800117a:	e08e      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117c:	4bc5      	ldr	r3, [pc, #788]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00e      	beq.n	80011a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4bc2      	ldr	r3, [pc, #776]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	220c      	movs	r2, #12
 800118e:	4013      	ands	r3, r2
 8001190:	2b08      	cmp	r3, #8
 8001192:	d117      	bne.n	80011c4 <HAL_RCC_OscConfig+0x68>
 8001194:	4bbf      	ldr	r3, [pc, #764]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	23c0      	movs	r3, #192	@ 0xc0
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	401a      	ands	r2, r3
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10e      	bne.n	80011c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4bbb      	ldr	r3, [pc, #748]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x58>
 80011b2:	e071      	b.n	8001298 <HAL_RCC_OscConfig+0x13c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <HAL_RCC_OscConfig+0x62>
 80011bc:	e06c      	b.n	8001298 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	f000 fb4c 	bl	800185c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d107      	bne.n	80011dc <HAL_RCC_OscConfig+0x80>
 80011cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0249      	lsls	r1, r1, #9
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e02f      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0xa2>
 80011e4:	4bab      	ldr	r3, [pc, #684]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4baa      	ldr	r3, [pc, #680]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011ea:	49ab      	ldr	r1, [pc, #684]	@ (8001498 <HAL_RCC_OscConfig+0x33c>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba7      	ldr	r3, [pc, #668]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80011f6:	49a9      	ldr	r1, [pc, #676]	@ (800149c <HAL_RCC_OscConfig+0x340>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e01e      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d10e      	bne.n	8001224 <HAL_RCC_OscConfig+0xc8>
 8001206:	4ba3      	ldr	r3, [pc, #652]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4ba2      	ldr	r3, [pc, #648]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	02c9      	lsls	r1, r1, #11
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	4b9f      	ldr	r3, [pc, #636]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b9e      	ldr	r3, [pc, #632]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	0249      	lsls	r1, r1, #9
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 8001224:	4b9b      	ldr	r3, [pc, #620]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b9a      	ldr	r3, [pc, #616]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800122a:	499b      	ldr	r1, [pc, #620]	@ (8001498 <HAL_RCC_OscConfig+0x33c>)
 800122c:	400a      	ands	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4b98      	ldr	r3, [pc, #608]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b97      	ldr	r3, [pc, #604]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001236:	4999      	ldr	r1, [pc, #612]	@ (800149c <HAL_RCC_OscConfig+0x340>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d014      	beq.n	800126e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff faf2 	bl	800082c <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff faed 	bl	800082c <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	@ 0x64
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e2fd      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001260:	4b8c      	ldr	r3, [pc, #560]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0xf2>
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fadd 	bl	800082c <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fad8 	bl	800082c <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e2e8      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b82      	ldr	r3, [pc, #520]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x11c>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x14a>
 80012a4:	e06c      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	220c      	movs	r2, #12
 80012ac:	4013      	ands	r3, r2
 80012ae:	d00e      	beq.n	80012ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b0:	4b78      	ldr	r3, [pc, #480]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d11f      	bne.n	80012fc <HAL_RCC_OscConfig+0x1a0>
 80012bc:	4b75      	ldr	r3, [pc, #468]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	23c0      	movs	r3, #192	@ 0xc0
 80012c2:	025b      	lsls	r3, r3, #9
 80012c4:	401a      	ands	r2, r3
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b71      	ldr	r3, [pc, #452]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x188>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e2bb      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	22f8      	movs	r2, #248	@ 0xf8
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00da      	lsls	r2, r3, #3
 80012f4:	4b67      	ldr	r3, [pc, #412]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e041      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d024      	beq.n	800134e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b63      	ldr	r3, [pc, #396]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fa8c 	bl	800082c <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fa87 	bl	800082c <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e297      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b59      	ldr	r3, [pc, #356]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d0f1      	beq.n	800131a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b57      	ldr	r3, [pc, #348]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	22f8      	movs	r2, #248	@ 0xf8
 800133c:	4393      	bics	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	00da      	lsls	r2, r3, #3
 8001346:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e018      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b51      	ldr	r3, [pc, #324]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b50      	ldr	r3, [pc, #320]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001354:	2101      	movs	r1, #1
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fa67 	bl	800082c <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fa62 	bl	800082c <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e272      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d1f1      	bne.n	8001364 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2208      	movs	r2, #8
 8001386:	4013      	ands	r3, r2
 8001388:	d036      	beq.n	80013f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d019      	beq.n	80013c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b40      	ldr	r3, [pc, #256]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001396:	4b3f      	ldr	r3, [pc, #252]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fa45 	bl	800082c <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fa40 	bl	800082c <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e250      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f1      	beq.n	80013a8 <HAL_RCC_OscConfig+0x24c>
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80013c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	438a      	bics	r2, r1
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fa2b 	bl	800082c <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fa26 	bl	800082c <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e236      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f1      	bne.n	80013dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2204      	movs	r2, #4
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_RCC_OscConfig+0x2a8>
 8001402:	e0b5      	b.n	8001570 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001404:	201f      	movs	r0, #31
 8001406:	183b      	adds	r3, r7, r0
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	055b      	lsls	r3, r3, #21
 8001414:	4013      	ands	r3, r2
 8001416:	d110      	bne.n	800143a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	0549      	lsls	r1, r1, #21
 8001422:	430a      	orrs	r2, r1
 8001424:	61da      	str	r2, [r3, #28]
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001434:	183b      	adds	r3, r7, r0
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_RCC_OscConfig+0x344>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_RCC_OscConfig+0x344>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_RCC_OscConfig+0x344>)
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	0049      	lsls	r1, r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001454:	f7ff f9ea 	bl	800082c <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff f9e5 	bl	800082c <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	@ 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1f5      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_RCC_OscConfig+0x344>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10f      	bne.n	80014a4 <HAL_RCC_OscConfig+0x348>
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	4b02      	ldr	r3, [pc, #8]	@ (8001494 <HAL_RCC_OscConfig+0x338>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	621a      	str	r2, [r3, #32]
 8001490:	e036      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	40021000 	.word	0x40021000
 8001498:	fffeffff 	.word	0xfffeffff
 800149c:	fffbffff 	.word	0xfffbffff
 80014a0:	40007000 	.word	0x40007000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x36a>
 80014ac:	4bca      	ldr	r3, [pc, #808]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	4bc9      	ldr	r3, [pc, #804]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	4bc7      	ldr	r3, [pc, #796]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4bc6      	ldr	r3, [pc, #792]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014be:	2104      	movs	r1, #4
 80014c0:	438a      	bics	r2, r1
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x38c>
 80014ce:	4bc2      	ldr	r3, [pc, #776]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	4bc1      	ldr	r3, [pc, #772]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	4bbf      	ldr	r3, [pc, #764]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4bbe      	ldr	r3, [pc, #760]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 80014e8:	4bbb      	ldr	r3, [pc, #748]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4bba      	ldr	r3, [pc, #744]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	4bb8      	ldr	r3, [pc, #736]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4bb7      	ldr	r3, [pc, #732]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff f990 	bl	800082c <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff f98b 	bl	800082c <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4aaf      	ldr	r2, [pc, #700]	@ (80017dc <HAL_RCC_OscConfig+0x680>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e19a      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4bac      	ldr	r3, [pc, #688]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x3b6>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f97b 	bl	800082c <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff f976 	bl	800082c <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4aa5      	ldr	r2, [pc, #660]	@ (80017dc <HAL_RCC_OscConfig+0x680>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e185      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4ba1      	ldr	r3, [pc, #644]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b9c      	ldr	r3, [pc, #624]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4b9b      	ldr	r3, [pc, #620]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800156a:	499d      	ldr	r1, [pc, #628]	@ (80017e0 <HAL_RCC_OscConfig+0x684>)
 800156c:	400a      	ands	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001582:	4b95      	ldr	r3, [pc, #596]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001586:	4b94      	ldr	r3, [pc, #592]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800158e:	4b92      	ldr	r3, [pc, #584]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001592:	4b91      	ldr	r3, [pc, #580]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff f947 	bl	800082c <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015a4:	f7ff f942 	bl	800082c <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e152      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	4b88      	ldr	r3, [pc, #544]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c0:	4b85      	ldr	r3, [pc, #532]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c4:	22f8      	movs	r2, #248	@ 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d6:	e034      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	3305      	adds	r3, #5
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e0:	4b7d      	ldr	r3, [pc, #500]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e4:	4b7c      	ldr	r3, [pc, #496]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ec:	4b7a      	ldr	r3, [pc, #488]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f0:	22f8      	movs	r2, #248	@ 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b76      	ldr	r3, [pc, #472]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
 8001602:	e01e      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001604:	4b74      	ldr	r3, [pc, #464]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001608:	4b73      	ldr	r3, [pc, #460]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800160a:	2104      	movs	r1, #4
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001610:	4b71      	ldr	r3, [pc, #452]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001614:	4b70      	ldr	r3, [pc, #448]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f906 	bl	800082c <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001626:	f7ff f901 	bl	800082c <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e111      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001638:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	4013      	ands	r3, r2
 800164a:	d05c      	beq.n	8001706 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800164c:	4b62      	ldr	r3, [pc, #392]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	220c      	movs	r2, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d00e      	beq.n	8001676 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001658:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	220c      	movs	r2, #12
 800165e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001660:	2b08      	cmp	r3, #8
 8001662:	d114      	bne.n	800168e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001664:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	23c0      	movs	r3, #192	@ 0xc0
 800166a:	025b      	lsls	r3, r3, #9
 800166c:	401a      	ands	r2, r3
 800166e:	23c0      	movs	r3, #192	@ 0xc0
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	429a      	cmp	r2, r3
 8001674:	d10b      	bne.n	800168e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001676:	4b58      	ldr	r3, [pc, #352]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	4013      	ands	r3, r2
 8001680:	d040      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d03c      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0e6      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01b      	beq.n	80016ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001696:	4b50      	ldr	r3, [pc, #320]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800169a:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0249      	lsls	r1, r1, #9
 80016a0:	430a      	orrs	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f8c2 	bl	800082c <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ae:	f7ff f8bd 	bl	800082c <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0cd      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016c0:	4b45      	ldr	r3, [pc, #276]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x552>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016ce:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d2:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016d4:	4943      	ldr	r1, [pc, #268]	@ (80017e4 <HAL_RCC_OscConfig+0x688>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f8a7 	bl	800082c <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e4:	f7ff f8a2 	bl	800082c <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b2      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016f6:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x588>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001704:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x5b4>
 800170e:	e0a4      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	220c      	movs	r2, #12
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x5c2>
 800171c:	e078      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	2b02      	cmp	r3, #2
 8001724:	d14c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800172c:	492e      	ldr	r1, [pc, #184]	@ (80017e8 <HAL_RCC_OscConfig+0x68c>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f87b 	bl	800082c <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff f876 	bl	800082c <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e086      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	220f      	movs	r2, #15
 8001760:	4393      	bics	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <HAL_RCC_OscConfig+0x690>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	431a      	orrs	r2, r3
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	0449      	lsls	r1, r1, #17
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff f849 	bl	800082c <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f844 	bl	800082c <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e054      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	049b      	lsls	r3, r3, #18
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x644>
 80017be:	e04c      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <HAL_RCC_OscConfig+0x68c>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff f82e 	bl	800082c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x6a6>
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	40021000 	.word	0x40021000
 80017dc:	00001388 	.word	0x00001388
 80017e0:	efffffff 	.word	0xefffffff
 80017e4:	fffeffff 	.word	0xfffeffff
 80017e8:	feffffff 	.word	0xfeffffff
 80017ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f81c 	bl	800082c <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e02c      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_RCC_OscConfig+0x708>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	049b      	lsls	r3, r3, #18
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x694>
 800180e:	e024      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e01f      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_RCC_OscConfig+0x708>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_OscConfig+0x708>)
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	23c0      	movs	r3, #192	@ 0xc0
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	429a      	cmp	r2, r3
 8001836:	d10e      	bne.n	8001856 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	220f      	movs	r2, #15
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	23f0      	movs	r3, #240	@ 0xf0
 800184a:	039b      	lsls	r3, r3, #14
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b008      	add	sp, #32
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0bf      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b61      	ldr	r3, [pc, #388]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d911      	bls.n	80018ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2201      	movs	r2, #1
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0a6      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d015      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2204      	movs	r2, #4
 80018be:	4013      	ands	r3, r2
 80018c0:	d006      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018c2:	4b51      	ldr	r3, [pc, #324]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4b50      	ldr	r3, [pc, #320]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018c8:	21e0      	movs	r1, #224	@ 0xe0
 80018ca:	00c9      	lsls	r1, r1, #3
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	22f0      	movs	r2, #240	@ 0xf0
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d04c      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d120      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07a      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	049b      	lsls	r3, r3, #18
 8001916:	4013      	ands	r3, r2
 8001918:	d114      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06e      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001926:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	029b      	lsls	r3, r3, #10
 800192e:	4013      	ands	r3, r2
 8001930:	d108      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e062      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e05b      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001944:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2203      	movs	r2, #3
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7fe ff68 	bl	800082c <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001960:	e009      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001962:	f7fe ff63 	bl	800082c <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_RCC_ClockConfig+0x1a4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e042      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	220c      	movs	r2, #12
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ec      	bne.n	8001962 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d211      	bcs.n	80019ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e020      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_RCC_ClockConfig+0x1a8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019d8:	f000 f820 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_RCC_ClockConfig+0x1ac>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_ClockConfig+0x1b0>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f7fe fed3 	bl	80007a0 <HAL_InitTick>
  
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	fffff8ff 	.word	0xfffff8ff
 8001a14:	08002a5c 	.word	0x08002a5c
 8001a18:	2000000c 	.word	0x2000000c

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d046      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001a46:	d848      	bhi.n	8001ada <HAL_RCC_GetSysClockFreq+0xbe>
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d002      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d003      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x3c>
 8001a50:	e043      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a54:	613b      	str	r3, [r7, #16]
      break;
 8001a56:	e043      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0c9b      	lsrs	r3, r3, #18
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a24      	ldr	r2, [pc, #144]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	4a22      	ldr	r2, [pc, #136]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	23c0      	movs	r3, #192	@ 0xc0
 8001a78:	025b      	lsls	r3, r3, #9
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	481a      	ldr	r0, [pc, #104]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a88:	f7fe fb3e 	bl	8000108 <__udivsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	001a      	movs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4353      	muls	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e01a      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	23c0      	movs	r3, #192	@ 0xc0
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	23c0      	movs	r3, #192	@ 0xc0
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d109      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	4814      	ldr	r0, [pc, #80]	@ (8001afc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001aac:	f7fe fb2c 	bl	8000108 <__udivsi3>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4353      	muls	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e008      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ac0:	f7fe fb22 	bl	8000108 <__udivsi3>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4353      	muls	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
      break;
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ad6:	613b      	str	r3, [r7, #16]
      break;
 8001ad8:	e002      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001adc:	613b      	str	r3, [r7, #16]
      break;
 8001ade:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ae0:	693b      	ldr	r3, [r7, #16]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b006      	add	sp, #24
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000
 8001af0:	007a1200 	.word	0x007a1200
 8001af4:	08002a74 	.word	0x08002a74
 8001af8:	08002a84 	.word	0x08002a84
 8001afc:	02dc6c00 	.word	0x02dc6c00

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b02      	ldr	r3, [pc, #8]	@ (8001b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	2000000c 	.word	0x2000000c

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b18:	f7ff fff2 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	2207      	movs	r2, #7
 8001b26:	4013      	ands	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	40d9      	lsrs	r1, r3
 8001b2e:	000b      	movs	r3, r1
}    
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08002a6c 	.word	0x08002a6c

08001b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e044      	b.n	8001bdc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2278      	movs	r2, #120	@ 0x78
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7fe fd5b 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2224      	movs	r2, #36	@ 0x24
 8001b6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fa6e 	bl	800206c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f92a 	bl	8001dec <UART_SetConfig>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e01c      	b.n	8001bdc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <HAL_UART_Init+0xa4>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	212a      	movs	r1, #42	@ 0x2a
 8001bbe:	438a      	bics	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fafd 	bl	80021d4 <UART_CheckIdleState>
 8001bda:	0003      	movs	r3, r0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	ffffb7ff 	.word	0xffffb7ff

08001be8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d000      	beq.n	8001c02 <HAL_UART_Transmit+0x1a>
 8001c00:	e08c      	b.n	8001d1c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_UART_Transmit+0x28>
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e084      	b.n	8001d1e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d109      	bne.n	8001c34 <HAL_UART_Transmit+0x4c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e074      	b.n	8001d1e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2284      	movs	r2, #132	@ 0x84
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2221      	movs	r2, #33	@ 0x21
 8001c40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c42:	f7fe fdf3 	bl	800082c <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1dba      	adds	r2, r7, #6
 8001c4e:	2150      	movs	r1, #80	@ 0x50
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1dba      	adds	r2, r7, #6
 8001c58:	2152      	movs	r1, #82	@ 0x52
 8001c5a:	8812      	ldrh	r2, [r2, #0]
 8001c5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d108      	bne.n	8001c7c <HAL_UART_Transmit+0x94>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d104      	bne.n	8001c7c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	e003      	b.n	8001c84 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c84:	e02f      	b.n	8001ce6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	0013      	movs	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	f000 fb46 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e03b      	b.n	8001d1e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	05d2      	lsls	r2, r2, #23
 8001cb6:	0dd2      	lsrs	r2, r2, #23
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	e007      	b.n	8001cd4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2252      	movs	r2, #82	@ 0x52
 8001cd8:	5a9b      	ldrh	r3, [r3, r2]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2252      	movs	r2, #82	@ 0x52
 8001ce4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2252      	movs	r2, #82	@ 0x52
 8001cea:	5a9b      	ldrh	r3, [r3, r2]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1c9      	bne.n	8001c86 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2140      	movs	r1, #64	@ 0x40
 8001d00:	f000 fb10 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e005      	b.n	8001d1e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b008      	add	sp, #32
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b088      	sub	sp, #32
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	1dbb      	adds	r3, r7, #6
 8001d32:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	589b      	ldr	r3, [r3, r2]
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d145      	bne.n	8001dca <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_UART_Receive_IT+0x26>
 8001d44:	1dbb      	adds	r3, r7, #6
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e03d      	b.n	8001dcc <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d109      	bne.n	8001d70 <HAL_UART_Receive_IT+0x4a>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e02d      	b.n	8001dcc <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	4013      	ands	r3, r2
 8001d82:	d019      	beq.n	8001db8 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d84:	f3ef 8310 	mrs	r3, PRIMASK
 8001d88:	613b      	str	r3, [r7, #16]
  return(result);
 8001d8a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f383 8810 	msr	PRIMASK, r3
}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	04c9      	lsls	r1, r1, #19
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f383 8810 	msr	PRIMASK, r3
}
 8001db6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001db8:	1dbb      	adds	r3, r7, #6
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fb1f 	bl	8002404 <UART_Start_Receive_IT>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	e000      	b.n	8001dcc <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b008      	add	sp, #32
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	1cbb      	adds	r3, r7, #2
 8001de0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001df4:	231e      	movs	r3, #30
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a8d      	ldr	r2, [pc, #564]	@ (8002050 <UART_SetConfig+0x264>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a88      	ldr	r2, [pc, #544]	@ (8002054 <UART_SetConfig+0x268>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a7f      	ldr	r2, [pc, #508]	@ (8002058 <UART_SetConfig+0x26c>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7b      	ldr	r2, [pc, #492]	@ (800205c <UART_SetConfig+0x270>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d127      	bne.n	8001ec2 <UART_SetConfig+0xd6>
 8001e72:	4b7b      	ldr	r3, [pc, #492]	@ (8002060 <UART_SetConfig+0x274>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d00d      	beq.n	8001e9a <UART_SetConfig+0xae>
 8001e7e:	d81b      	bhi.n	8001eb8 <UART_SetConfig+0xcc>
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d014      	beq.n	8001eae <UART_SetConfig+0xc2>
 8001e84:	d818      	bhi.n	8001eb8 <UART_SetConfig+0xcc>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <UART_SetConfig+0xa4>
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00a      	beq.n	8001ea4 <UART_SetConfig+0xb8>
 8001e8e:	e013      	b.n	8001eb8 <UART_SetConfig+0xcc>
 8001e90:	231f      	movs	r3, #31
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e021      	b.n	8001ede <UART_SetConfig+0xf2>
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e01c      	b.n	8001ede <UART_SetConfig+0xf2>
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	e017      	b.n	8001ede <UART_SetConfig+0xf2>
 8001eae:	231f      	movs	r3, #31
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e012      	b.n	8001ede <UART_SetConfig+0xf2>
 8001eb8:	231f      	movs	r3, #31
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e00d      	b.n	8001ede <UART_SetConfig+0xf2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a67      	ldr	r2, [pc, #412]	@ (8002064 <UART_SetConfig+0x278>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d104      	bne.n	8001ed6 <UART_SetConfig+0xea>
 8001ecc:	231f      	movs	r3, #31
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	e003      	b.n	8001ede <UART_SetConfig+0xf2>
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2210      	movs	r2, #16
 8001edc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d15c      	bne.n	8001fa4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001eea:	231f      	movs	r3, #31
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d015      	beq.n	8001f20 <UART_SetConfig+0x134>
 8001ef4:	dc18      	bgt.n	8001f28 <UART_SetConfig+0x13c>
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00d      	beq.n	8001f16 <UART_SetConfig+0x12a>
 8001efa:	dc15      	bgt.n	8001f28 <UART_SetConfig+0x13c>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <UART_SetConfig+0x11a>
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d005      	beq.n	8001f10 <UART_SetConfig+0x124>
 8001f04:	e010      	b.n	8001f28 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f06:	f7ff fe05 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        break;
 8001f0e:	e012      	b.n	8001f36 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f10:	4b55      	ldr	r3, [pc, #340]	@ (8002068 <UART_SetConfig+0x27c>)
 8001f12:	61bb      	str	r3, [r7, #24]
        break;
 8001f14:	e00f      	b.n	8001f36 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f16:	f7ff fd81 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	61bb      	str	r3, [r7, #24]
        break;
 8001f1e:	e00a      	b.n	8001f36 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	61bb      	str	r3, [r7, #24]
        break;
 8001f26:	e006      	b.n	8001f36 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f2c:	231e      	movs	r3, #30
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
        break;
 8001f34:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d100      	bne.n	8001f3e <UART_SetConfig+0x152>
 8001f3c:	e07a      	b.n	8002034 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	005a      	lsls	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	18d2      	adds	r2, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0019      	movs	r1, r3
 8001f50:	0010      	movs	r0, r2
 8001f52:	f7fe f8d9 	bl	8000108 <__udivsi3>
 8001f56:	0003      	movs	r3, r0
 8001f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d91c      	bls.n	8001f9a <UART_SetConfig+0x1ae>
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d217      	bcs.n	8001f9a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	200e      	movs	r0, #14
 8001f70:	183b      	adds	r3, r7, r0
 8001f72:	210f      	movs	r1, #15
 8001f74:	438a      	bics	r2, r1
 8001f76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	b299      	uxth	r1, r3
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	183a      	adds	r2, r7, r0
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	183a      	adds	r2, r7, r0
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	e04c      	b.n	8002034 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001f9a:	231e      	movs	r3, #30
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e047      	b.n	8002034 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fa4:	231f      	movs	r3, #31
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d015      	beq.n	8001fda <UART_SetConfig+0x1ee>
 8001fae:	dc18      	bgt.n	8001fe2 <UART_SetConfig+0x1f6>
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00d      	beq.n	8001fd0 <UART_SetConfig+0x1e4>
 8001fb4:	dc15      	bgt.n	8001fe2 <UART_SetConfig+0x1f6>
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <UART_SetConfig+0x1d4>
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d005      	beq.n	8001fca <UART_SetConfig+0x1de>
 8001fbe:	e010      	b.n	8001fe2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f7ff fda8 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
        break;
 8001fc8:	e012      	b.n	8001ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <UART_SetConfig+0x27c>)
 8001fcc:	61bb      	str	r3, [r7, #24]
        break;
 8001fce:	e00f      	b.n	8001ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fd0:	f7ff fd24 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
        break;
 8001fd8:	e00a      	b.n	8001ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	61bb      	str	r3, [r7, #24]
        break;
 8001fe0:	e006      	b.n	8001ff0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fe6:	231e      	movs	r3, #30
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
        break;
 8001fee:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01e      	beq.n	8002034 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	085a      	lsrs	r2, r3, #1
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	18d2      	adds	r2, r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f7fe f87e 	bl	8000108 <__udivsi3>
 800200c:	0003      	movs	r3, r0
 800200e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	d90a      	bls.n	800202c <UART_SetConfig+0x240>
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	429a      	cmp	r2, r3
 800201e:	d205      	bcs.n	800202c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	e003      	b.n	8002034 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800202c:	231e      	movs	r3, #30
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002040:	231e      	movs	r3, #30
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b008      	add	sp, #32
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	efff69f3 	.word	0xefff69f3
 8002054:	ffffcfff 	.word	0xffffcfff
 8002058:	fffff4ff 	.word	0xfffff4ff
 800205c:	40013800 	.word	0x40013800
 8002060:	40021000 	.word	0x40021000
 8002064:	40004400 	.word	0x40004400
 8002068:	007a1200 	.word	0x007a1200

0800206c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	2208      	movs	r2, #8
 800207a:	4013      	ands	r3, r2
 800207c:	d00b      	beq.n	8002096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a4a      	ldr	r2, [pc, #296]	@ (80021b0 <UART_AdvFeatureConfig+0x144>)
 8002086:	4013      	ands	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d00b      	beq.n	80020b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a43      	ldr	r2, [pc, #268]	@ (80021b4 <UART_AdvFeatureConfig+0x148>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d00b      	beq.n	80020da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a3b      	ldr	r2, [pc, #236]	@ (80021b8 <UART_AdvFeatureConfig+0x14c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	2204      	movs	r2, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d00b      	beq.n	80020fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <UART_AdvFeatureConfig+0x150>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	2210      	movs	r2, #16
 8002102:	4013      	ands	r3, r2
 8002104:	d00b      	beq.n	800211e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a2c      	ldr	r2, [pc, #176]	@ (80021c0 <UART_AdvFeatureConfig+0x154>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	2220      	movs	r2, #32
 8002124:	4013      	ands	r3, r2
 8002126:	d00b      	beq.n	8002140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <UART_AdvFeatureConfig+0x158>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	d01d      	beq.n	8002186 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a1d      	ldr	r2, [pc, #116]	@ (80021c8 <UART_AdvFeatureConfig+0x15c>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	035b      	lsls	r3, r3, #13
 800216a:	429a      	cmp	r2, r3
 800216c:	d10b      	bne.n	8002186 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <UART_AdvFeatureConfig+0x160>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	4013      	ands	r3, r2
 800218e:	d00b      	beq.n	80021a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a0e      	ldr	r2, [pc, #56]	@ (80021d0 <UART_AdvFeatureConfig+0x164>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }
}
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	ffff7fff 	.word	0xffff7fff
 80021b4:	fffdffff 	.word	0xfffdffff
 80021b8:	fffeffff 	.word	0xfffeffff
 80021bc:	fffbffff 	.word	0xfffbffff
 80021c0:	ffffefff 	.word	0xffffefff
 80021c4:	ffffdfff 	.word	0xffffdfff
 80021c8:	ffefffff 	.word	0xffefffff
 80021cc:	ff9fffff 	.word	0xff9fffff
 80021d0:	fff7ffff 	.word	0xfff7ffff

080021d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b092      	sub	sp, #72	@ 0x48
 80021d8:	af02      	add	r7, sp, #8
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2284      	movs	r2, #132	@ 0x84
 80021e0:	2100      	movs	r1, #0
 80021e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021e4:	f7fe fb22 	bl	800082c <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2208      	movs	r2, #8
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d12c      	bne.n	8002254 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	0391      	lsls	r1, r2, #14
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4a46      	ldr	r2, [pc, #280]	@ (800231c <UART_CheckIdleState+0x148>)
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	f000 f88c 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d021      	beq.n	8002254 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002210:	f3ef 8310 	mrs	r3, PRIMASK
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
 800221a:	2301      	movs	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	f383 8810 	msr	PRIMASK, r3
}
 8002224:	46c0      	nop			@ (mov r8, r8)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	@ 0x80
 8002232:	438a      	bics	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223c:	f383 8810 	msr	PRIMASK, r3
}
 8002240:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2278      	movs	r2, #120	@ 0x78
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e05f      	b.n	8002314 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	2b04      	cmp	r3, #4
 8002260:	d146      	bne.n	80022f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	03d1      	lsls	r1, r2, #15
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <UART_CheckIdleState+0x148>)
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	f000 f858 	bl	8002324 <UART_WaitOnFlagUntilTimeout>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d03b      	beq.n	80022f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002278:	f3ef 8310 	mrs	r3, PRIMASK
 800227c:	60fb      	str	r3, [r7, #12]
  return(result);
 800227e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
 8002282:	2301      	movs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f383 8810 	msr	PRIMASK, r3
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4921      	ldr	r1, [pc, #132]	@ (8002320 <UART_CheckIdleState+0x14c>)
 800229a:	400a      	ands	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f383 8810 	msr	PRIMASK, r3
}
 80022a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022aa:	f3ef 8310 	mrs	r3, PRIMASK
 80022ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80022b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f383 8810 	msr	PRIMASK, r3
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f383 8810 	msr	PRIMASK, r3
}
 80022da:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	2120      	movs	r1, #32
 80022e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2278      	movs	r2, #120	@ 0x78
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e011      	b.n	8002314 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2280      	movs	r2, #128	@ 0x80
 80022fa:	2120      	movs	r1, #32
 80022fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2278      	movs	r2, #120	@ 0x78
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b010      	add	sp, #64	@ 0x40
 800231a:	bd80      	pop	{r7, pc}
 800231c:	01ffffff 	.word	0x01ffffff
 8002320:	fffffedf 	.word	0xfffffedf

08002324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002334:	e051      	b.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3301      	adds	r3, #1
 800233a:	d04e      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233c:	f7fe fa76 	bl	800082c <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	429a      	cmp	r2, r3
 800234a:	d302      	bcc.n	8002352 <UART_WaitOnFlagUntilTimeout+0x2e>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e051      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2204      	movs	r2, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d03b      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b80      	cmp	r3, #128	@ 0x80
 8002366:	d038      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b40      	cmp	r3, #64	@ 0x40
 800236c:	d035      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2208      	movs	r2, #8
 8002376:	4013      	ands	r3, r2
 8002378:	2b08      	cmp	r3, #8
 800237a:	d111      	bne.n	80023a0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2208      	movs	r2, #8
 8002382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 f906 	bl	8002598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2284      	movs	r2, #132	@ 0x84
 8002390:	2108      	movs	r1, #8
 8002392:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2278      	movs	r2, #120	@ 0x78
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e02c      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	401a      	ands	r2, r3
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d112      	bne.n	80023da <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2280      	movs	r2, #128	@ 0x80
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f8e9 	bl	8002598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2284      	movs	r2, #132	@ 0x84
 80023ca:	2120      	movs	r1, #32
 80023cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2278      	movs	r2, #120	@ 0x78
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	425a      	negs	r2, r3
 80023ea:	4153      	adcs	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d09e      	beq.n	8002336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b090      	sub	sp, #64	@ 0x40
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	1dbb      	adds	r3, r7, #6
 8002410:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1dba      	adds	r2, r7, #6
 800241c:	2158      	movs	r1, #88	@ 0x58
 800241e:	8812      	ldrh	r2, [r2, #0]
 8002420:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1dba      	adds	r2, r7, #6
 8002426:	215a      	movs	r1, #90	@ 0x5a
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	429a      	cmp	r2, r3
 800243c:	d10d      	bne.n	800245a <UART_Start_Receive_IT+0x56>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <UART_Start_Receive_IT+0x4c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	225c      	movs	r2, #92	@ 0x5c
 800244a:	4950      	ldr	r1, [pc, #320]	@ (800258c <UART_Start_Receive_IT+0x188>)
 800244c:	5299      	strh	r1, [r3, r2]
 800244e:	e02e      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	225c      	movs	r2, #92	@ 0x5c
 8002454:	21ff      	movs	r1, #255	@ 0xff
 8002456:	5299      	strh	r1, [r3, r2]
 8002458:	e029      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <UART_Start_Receive_IT+0x7a>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <UART_Start_Receive_IT+0x70>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	225c      	movs	r2, #92	@ 0x5c
 800246e:	21ff      	movs	r1, #255	@ 0xff
 8002470:	5299      	strh	r1, [r3, r2]
 8002472:	e01c      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	225c      	movs	r2, #92	@ 0x5c
 8002478:	217f      	movs	r1, #127	@ 0x7f
 800247a:	5299      	strh	r1, [r3, r2]
 800247c:	e017      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	055b      	lsls	r3, r3, #21
 8002486:	429a      	cmp	r2, r3
 8002488:	d10d      	bne.n	80024a6 <UART_Start_Receive_IT+0xa2>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <UART_Start_Receive_IT+0x98>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	225c      	movs	r2, #92	@ 0x5c
 8002496:	217f      	movs	r1, #127	@ 0x7f
 8002498:	5299      	strh	r1, [r3, r2]
 800249a:	e008      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	225c      	movs	r2, #92	@ 0x5c
 80024a0:	213f      	movs	r1, #63	@ 0x3f
 80024a2:	5299      	strh	r1, [r3, r2]
 80024a4:	e003      	b.n	80024ae <UART_Start_Receive_IT+0xaa>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	225c      	movs	r2, #92	@ 0x5c
 80024aa:	2100      	movs	r1, #0
 80024ac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2284      	movs	r2, #132	@ 0x84
 80024b2:	2100      	movs	r1, #0
 80024b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2280      	movs	r2, #128	@ 0x80
 80024ba:	2122      	movs	r1, #34	@ 0x22
 80024bc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024be:	f3ef 8310 	mrs	r3, PRIMASK
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ce:	f383 8810 	msr	PRIMASK, r3
}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	f383 8810 	msr	PRIMASK, r3
}
 80024ee:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <UART_Start_Receive_IT+0x108>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <UART_Start_Receive_IT+0x18c>)
 8002508:	669a      	str	r2, [r3, #104]	@ 0x68
 800250a:	e002      	b.n	8002512 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <UART_Start_Receive_IT+0x190>)
 8002510:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251a:	f3ef 8310 	mrs	r3, PRIMASK
 800251e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002520:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002522:	637b      	str	r3, [r7, #52]	@ 0x34
 8002524:	2301      	movs	r3, #1
 8002526:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f383 8810 	msr	PRIMASK, r3
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2190      	movs	r1, #144	@ 0x90
 800253c:	0049      	lsls	r1, r1, #1
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	e018      	b.n	8002580 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	613b      	str	r3, [r7, #16]
  return(result);
 8002554:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002558:	2301      	movs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2120      	movs	r1, #32
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002576:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b010      	add	sp, #64	@ 0x40
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	000001ff 	.word	0x000001ff
 8002590:	08002819 	.word	0x08002819
 8002594:	08002661 	.word	0x08002661

08002598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a0:	f3ef 8310 	mrs	r3, PRIMASK
 80025a4:	617b      	str	r3, [r7, #20]
  return(result);
 80025a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4926      	ldr	r1, [pc, #152]	@ (800265c <UART_EndRxTransfer+0xc4>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f383 8810 	msr	PRIMASK, r3
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d2:	f3ef 8310 	mrs	r3, PRIMASK
 80025d6:	623b      	str	r3, [r7, #32]
  return(result);
 80025d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	438a      	bics	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	f383 8810 	msr	PRIMASK, r3
}
 8002602:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002608:	2b01      	cmp	r3, #1
 800260a:	d118      	bne.n	800263e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260c:	f3ef 8310 	mrs	r3, PRIMASK
 8002610:	60bb      	str	r3, [r7, #8]
  return(result);
 8002612:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002616:	2301      	movs	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2110      	movs	r1, #16
 800262e:	438a      	bics	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2280      	movs	r2, #128	@ 0x80
 8002642:	2120      	movs	r1, #32
 8002644:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b00e      	add	sp, #56	@ 0x38
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	fffffedf 	.word	0xfffffedf

08002660 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b094      	sub	sp, #80	@ 0x50
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002668:	204e      	movs	r0, #78	@ 0x4e
 800266a:	183b      	adds	r3, r7, r0
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	215c      	movs	r1, #92	@ 0x5c
 8002670:	5a52      	ldrh	r2, [r2, r1]
 8002672:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	589b      	ldr	r3, [r3, r2]
 800267a:	2b22      	cmp	r3, #34	@ 0x22
 800267c:	d000      	beq.n	8002680 <UART_RxISR_8BIT+0x20>
 800267e:	e0ba      	b.n	80027f6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	214c      	movs	r1, #76	@ 0x4c
 8002686:	187b      	adds	r3, r7, r1
 8002688:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800268a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800268c:	187b      	adds	r3, r7, r1
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	183b      	adds	r3, r7, r0
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b2d9      	uxtb	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	400a      	ands	r2, r1
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	225a      	movs	r2, #90	@ 0x5a
 80026b0:	5a9b      	ldrh	r3, [r3, r2]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b299      	uxth	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	225a      	movs	r2, #90	@ 0x5a
 80026bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	225a      	movs	r2, #90	@ 0x5a
 80026c2:	5a9b      	ldrh	r3, [r3, r2]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d000      	beq.n	80026cc <UART_RxISR_8BIT+0x6c>
 80026ca:	e09c      	b.n	8002806 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026cc:	f3ef 8310 	mrs	r3, PRIMASK
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d6:	2301      	movs	r3, #1
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4948      	ldr	r1, [pc, #288]	@ (8002810 <UART_RxISR_8BIT+0x1b0>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	647b      	str	r3, [r7, #68]	@ 0x44
 8002708:	2301      	movs	r3, #1
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270e:	f383 8810 	msr	PRIMASK, r3
}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	438a      	bics	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	2120      	movs	r1, #32
 8002736:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d018      	beq.n	8002784 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002752:	f3ef 8310 	mrs	r3, PRIMASK
 8002756:	61bb      	str	r3, [r7, #24]
  return(result);
 8002758:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800275a:	643b      	str	r3, [r7, #64]	@ 0x40
 800275c:	2301      	movs	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4928      	ldr	r1, [pc, #160]	@ (8002814 <UART_RxISR_8BIT+0x1b4>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800277a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f383 8810 	msr	PRIMASK, r3
}
 8002782:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	2b01      	cmp	r3, #1
 800278a:	d12f      	bne.n	80027ec <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002792:	f3ef 8310 	mrs	r3, PRIMASK
 8002796:	60fb      	str	r3, [r7, #12]
  return(result);
 8002798:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f383 8810 	msr	PRIMASK, r3
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2110      	movs	r1, #16
 80027b4:	438a      	bics	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	2210      	movs	r2, #16
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d103      	bne.n	80027da <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2210      	movs	r2, #16
 80027d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2258      	movs	r2, #88	@ 0x58
 80027de:	5a9a      	ldrh	r2, [r3, r2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff faf5 	bl	8001dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80027ea:	e00c      	b.n	8002806 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7fd fe78 	bl	80004e4 <HAL_UART_RxCpltCallback>
}
 80027f4:	e007      	b.n	8002806 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2108      	movs	r1, #8
 8002802:	430a      	orrs	r2, r1
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b014      	add	sp, #80	@ 0x50
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	fffffedf 	.word	0xfffffedf
 8002814:	fbffffff 	.word	0xfbffffff

08002818 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b094      	sub	sp, #80	@ 0x50
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002820:	204e      	movs	r0, #78	@ 0x4e
 8002822:	183b      	adds	r3, r7, r0
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	215c      	movs	r1, #92	@ 0x5c
 8002828:	5a52      	ldrh	r2, [r2, r1]
 800282a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	589b      	ldr	r3, [r3, r2]
 8002832:	2b22      	cmp	r3, #34	@ 0x22
 8002834:	d000      	beq.n	8002838 <UART_RxISR_16BIT+0x20>
 8002836:	e0ba      	b.n	80029ae <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	214c      	movs	r1, #76	@ 0x4c
 800283e:	187b      	adds	r3, r7, r1
 8002840:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002842:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800284a:	187b      	adds	r3, r7, r1
 800284c:	183a      	adds	r2, r7, r0
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	4013      	ands	r3, r2
 8002854:	b29a      	uxth	r2, r3
 8002856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	1c9a      	adds	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	225a      	movs	r2, #90	@ 0x5a
 8002868:	5a9b      	ldrh	r3, [r3, r2]
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b299      	uxth	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	225a      	movs	r2, #90	@ 0x5a
 8002874:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	225a      	movs	r2, #90	@ 0x5a
 800287a:	5a9b      	ldrh	r3, [r3, r2]
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d000      	beq.n	8002884 <UART_RxISR_16BIT+0x6c>
 8002882:	e09c      	b.n	80029be <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	623b      	str	r3, [r7, #32]
  return(result);
 800288a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
 800288e:	2301      	movs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f383 8810 	msr	PRIMASK, r3
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4948      	ldr	r1, [pc, #288]	@ (80029c8 <UART_RxISR_16BIT+0x1b0>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	f383 8810 	msr	PRIMASK, r3
}
 80028b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028be:	643b      	str	r3, [r7, #64]	@ 0x40
 80028c0:	2301      	movs	r3, #1
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	f383 8810 	msr	PRIMASK, r3
}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	438a      	bics	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	2120      	movs	r1, #32
 80028ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	4013      	ands	r3, r2
 8002908:	d018      	beq.n	800293c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290a:	f3ef 8310 	mrs	r3, PRIMASK
 800290e:	617b      	str	r3, [r7, #20]
  return(result);
 8002910:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002914:	2301      	movs	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f383 8810 	msr	PRIMASK, r3
}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4928      	ldr	r1, [pc, #160]	@ (80029cc <UART_RxISR_16BIT+0x1b4>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f383 8810 	msr	PRIMASK, r3
}
 800293a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002940:	2b01      	cmp	r3, #1
 8002942:	d12f      	bne.n	80029a4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800294a:	f3ef 8310 	mrs	r3, PRIMASK
 800294e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002950:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002954:	2301      	movs	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2110      	movs	r1, #16
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2210      	movs	r2, #16
 8002984:	4013      	ands	r3, r2
 8002986:	2b10      	cmp	r3, #16
 8002988:	d103      	bne.n	8002992 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2258      	movs	r2, #88	@ 0x58
 8002996:	5a9a      	ldrh	r2, [r3, r2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff fa19 	bl	8001dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80029a2:	e00c      	b.n	80029be <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fd9c 	bl	80004e4 <HAL_UART_RxCpltCallback>
}
 80029ac:	e007      	b.n	80029be <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2108      	movs	r1, #8
 80029ba:	430a      	orrs	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b014      	add	sp, #80	@ 0x50
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	fffffedf 	.word	0xfffffedf
 80029cc:	fbffffff 	.word	0xfbffffff

080029d0 <memcmp>:
 80029d0:	b530      	push	{r4, r5, lr}
 80029d2:	2400      	movs	r4, #0
 80029d4:	3901      	subs	r1, #1
 80029d6:	42a2      	cmp	r2, r4
 80029d8:	d101      	bne.n	80029de <memcmp+0xe>
 80029da:	2000      	movs	r0, #0
 80029dc:	e005      	b.n	80029ea <memcmp+0x1a>
 80029de:	5d03      	ldrb	r3, [r0, r4]
 80029e0:	3401      	adds	r4, #1
 80029e2:	5d0d      	ldrb	r5, [r1, r4]
 80029e4:	42ab      	cmp	r3, r5
 80029e6:	d0f6      	beq.n	80029d6 <memcmp+0x6>
 80029e8:	1b58      	subs	r0, r3, r5
 80029ea:	bd30      	pop	{r4, r5, pc}

080029ec <memset>:
 80029ec:	0003      	movs	r3, r0
 80029ee:	1882      	adds	r2, r0, r2
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	7019      	strb	r1, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4c0c      	ldr	r4, [pc, #48]	@ (8002a34 <__libc_init_array+0x38>)
 8002a02:	4d0d      	ldr	r5, [pc, #52]	@ (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	f000 f819 	bl	8002a44 <_init>
 8002a12:	4c0a      	ldr	r4, [pc, #40]	@ (8002a3c <__libc_init_array+0x40>)
 8002a14:	4d0a      	ldr	r5, [pc, #40]	@ (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	00b3      	lsls	r3, r6, #2
 8002a22:	58eb      	ldr	r3, [r5, r3]
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	00b3      	lsls	r3, r6, #2
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002a94 	.word	0x08002a94
 8002a38:	08002a94 	.word	0x08002a94
 8002a3c:	08002a98 	.word	0x08002a98
 8002a40:	08002a94 	.word	0x08002a94

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

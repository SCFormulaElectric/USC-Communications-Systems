
LoRa_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003568  08003568  00004568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003610  08003610  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003610  08003610  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003614  08003614  00004614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003618  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000010  08003628  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003628  000051b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4b9  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  0000f4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00010f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063d  00000000  00000000  00011790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018325  00000000  00000000  00011dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a408  00000000  00000000  0002a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3aa  00000000  00000000  000344fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf8a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bfc  00000000  00000000  000bf8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c14e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003550 	.word	0x08003550

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003550 	.word	0x08003550

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <toggle_LED>:
CAN_TxHeaderTypeDef pHeader; //declare a specific header for message transmittions
CAN_RxHeaderTypeDef pRxHeader; //declare header for message reception
CAN_FilterTypeDef sFilterConfig; //declare CAN filter structure


void toggle_LED() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000224:	2390      	movs	r3, #144	@ 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2120      	movs	r1, #32
 800022a:	0018      	movs	r0, r3
 800022c:	f001 f9cb 	bl	80015c6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000230:	2064      	movs	r0, #100	@ 0x64
 8000232:	f000 fc63 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000236:	2390      	movs	r3, #144	@ 0x90
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2120      	movs	r1, #32
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f9c2 	bl	80015c6 <HAL_GPIO_TogglePin>
}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <AT_Config>:



void AT_Config(void) {
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	b09b      	sub	sp, #108	@ 0x6c
 800024c:	af00      	add	r7, sp, #0
	 // AT configuration

	  HAL_UART_Receive_IT(&huart2, temp, 1);   // interrupt initialization
 800024e:	493d      	ldr	r1, [pc, #244]	@ (8000344 <AT_Config+0xfc>)
 8000250:	4b3d      	ldr	r3, [pc, #244]	@ (8000348 <AT_Config+0x100>)
 8000252:	2201      	movs	r2, #1
 8000254:	0018      	movs	r0, r3
 8000256:	f001 ffb6 	bl	80021c6 <HAL_UART_Receive_IT>

	  // +++ to AT mode
	  uint8_t cmd_enter_config[] = {0x2B, 0x2B, 0x2B, 0x0d, 0x0a};
 800025a:	2560      	movs	r5, #96	@ 0x60
 800025c:	197b      	adds	r3, r7, r5
 800025e:	4a3b      	ldr	r2, [pc, #236]	@ (800034c <AT_Config+0x104>)
 8000260:	6811      	ldr	r1, [r2, #0]
 8000262:	6019      	str	r1, [r3, #0]
 8000264:	7912      	ldrb	r2, [r2, #4]
 8000266:	711a      	strb	r2, [r3, #4]

	  // AT+MODE0\r\n
	  uint8_t cmd_mode1[] = {0x41, 0x54, 0x2B, 0x4D, 0x4F, 0x44, 0x45, 0x31, 0x0D, 0x0A};
 8000268:	2654      	movs	r6, #84	@ 0x54
 800026a:	19bb      	adds	r3, r7, r6
 800026c:	4a38      	ldr	r2, [pc, #224]	@ (8000350 <AT_Config+0x108>)
 800026e:	ca03      	ldmia	r2!, {r0, r1}
 8000270:	c303      	stmia	r3!, {r0, r1}
 8000272:	8812      	ldrh	r2, [r2, #0]
 8000274:	801a      	strh	r2, [r3, #0]

	  // AT+LEVEL7\r\n
	  uint8_t cmd_level7[] = {0x41, 0x54, 0x2B, 0x4C, 0x45, 0x56, 0x45, 0x4C, 0x37, 0x0D, 0x0A};
 8000276:	2348      	movs	r3, #72	@ 0x48
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	4a36      	ldr	r2, [pc, #216]	@ (8000354 <AT_Config+0x10c>)
 800027c:	ca03      	ldmia	r2!, {r0, r1}
 800027e:	c303      	stmia	r3!, {r0, r1}
 8000280:	8811      	ldrh	r1, [r2, #0]
 8000282:	8019      	strh	r1, [r3, #0]
 8000284:	7892      	ldrb	r2, [r2, #2]
 8000286:	709a      	strb	r2, [r3, #2]

	  // AT+CHANNEL03\r\n
	  uint8_t cmd_channel03[] = {0x41, 0x54, 0x2B, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x30, 0x33, 0x0D, 0x0A};
 8000288:	2238      	movs	r2, #56	@ 0x38
 800028a:	18bb      	adds	r3, r7, r2
 800028c:	4a32      	ldr	r2, [pc, #200]	@ (8000358 <AT_Config+0x110>)
 800028e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000290:	c313      	stmia	r3!, {r0, r1, r4}
 8000292:	8812      	ldrh	r2, [r2, #0]
 8000294:	801a      	strh	r2, [r3, #0]

	  // AT+MAC0a,02\r\n
	  uint8_t cmd_mac0a02[] = {0x41, 0x54, 0x2B, 0x4D, 0x41, 0x43, 0x30, 0x61, 0x2C, 0x30, 0x32, 0x0D, 0x0A};
 8000296:	2128      	movs	r1, #40	@ 0x28
 8000298:	187b      	adds	r3, r7, r1
 800029a:	4a30      	ldr	r2, [pc, #192]	@ (800035c <AT_Config+0x114>)
 800029c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029e:	c313      	stmia	r3!, {r0, r1, r4}
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	701a      	strb	r2, [r3, #0]
	  uint8_t cmd_sf12[] = {0x41, 0x54, 0x2B, 0x53, 0x46, 0x31, 0x32, 0x0D, 0x0A};
 80002a4:	241c      	movs	r4, #28
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000360 <AT_Config+0x118>)
 80002aa:	ca03      	ldmia	r2!, {r0, r1}
 80002ac:	c303      	stmia	r3!, {r0, r1}
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	701a      	strb	r2, [r3, #0]

	  // AT+POWE22\r\n
	  uint8_t cmd_powe22[] = {0x41, 0x54, 0x2B, 0x50, 0x4F, 0x57, 0x45, 0x32, 0x32, 0x0D, 0x0A};
 80002b2:	2010      	movs	r0, #16
 80002b4:	183b      	adds	r3, r7, r0
 80002b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000364 <AT_Config+0x11c>)
 80002b8:	ca03      	ldmia	r2!, {r0, r1}
 80002ba:	c303      	stmia	r3!, {r0, r1}
 80002bc:	8811      	ldrh	r1, [r2, #0]
 80002be:	8019      	strh	r1, [r3, #0]
 80002c0:	7892      	ldrb	r2, [r2, #2]
 80002c2:	709a      	strb	r2, [r3, #2]

	    // AT+RESET\r\n
	    uint8_t cmd_reset[] = {0x41, 0x54, 0x2B, 0x52, 0x45, 0x53, 0x45, 0x54, 0x0D, 0x0A};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4a28      	ldr	r2, [pc, #160]	@ (8000368 <AT_Config+0x120>)
 80002c8:	ca03      	ldmia	r2!, {r0, r1}
 80002ca:	c303      	stmia	r3!, {r0, r1}
 80002cc:	8812      	ldrh	r2, [r2, #0]
 80002ce:	801a      	strh	r2, [r3, #0]

		// should receive "Entry AT\r\n" or something
		// HAL_Delay(6000); // A small delay is often good practice after commands
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 80002d0:	197b      	adds	r3, r7, r5
 80002d2:	2105      	movs	r1, #5
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fa45 	bl	8000764 <send_command_and_wait>
		// Set transmission mode
	  send_command_and_wait(cmd_mode1, sizeof(cmd_mode1));
 80002da:	19bb      	adds	r3, r7, r6
 80002dc:	210a      	movs	r1, #10
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fa40 	bl	8000764 <send_command_and_wait>
		// HAL_Delay(6000);
	  // Set air data rate level
	  send_command_and_wait(cmd_level7, sizeof(cmd_level7));
 80002e4:	2348      	movs	r3, #72	@ 0x48
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	210b      	movs	r1, #11
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fa3a 	bl	8000764 <send_command_and_wait>
	  // Set frequency channel
	  send_command_and_wait(cmd_channel03, sizeof(cmd_channel03));
 80002f0:	2238      	movs	r2, #56	@ 0x38
 80002f2:	18bb      	adds	r3, r7, r2
 80002f4:	210e      	movs	r1, #14
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fa34 	bl	8000764 <send_command_and_wait>
	  // Set device address
	  send_command_and_wait(cmd_mac0a02, sizeof(cmd_mac0a02));
 80002fc:	2128      	movs	r1, #40	@ 0x28
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	210d      	movs	r1, #13
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fa2e 	bl	8000764 <send_command_and_wait>
	  // Set TX power
	  send_command_and_wait(cmd_powe22, sizeof(cmd_powe22));
 8000308:	2010      	movs	r0, #16
 800030a:	183b      	adds	r3, r7, r0
 800030c:	210b      	movs	r1, #11
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fa28 	bl	8000764 <send_command_and_wait>
	  //send SF
	  send_command_and_wait(cmd_sf12, sizeof(cmd_sf12));
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2109      	movs	r1, #9
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fa23 	bl	8000764 <send_command_and_wait>
	  // check AT for OK
	  // Reset the module to apply settings
	  send_command_and_wait(cmd_reset, sizeof(cmd_reset));
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	210a      	movs	r1, #10
 8000322:	0018      	movs	r0, r3
 8000324:	f000 fa1e 	bl	8000764 <send_command_and_wait>
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 8000328:	197b      	adds	r3, r7, r5
 800032a:	2105      	movs	r1, #5
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fa19 	bl	8000764 <send_command_and_wait>
	  send_command_and_wait(cmd_enter_config, sizeof(cmd_enter_config));
 8000332:	197b      	adds	r3, r7, r5
 8000334:	2105      	movs	r1, #5
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fa14 	bl	8000764 <send_command_and_wait>


}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b01b      	add	sp, #108	@ 0x6c
 8000342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000344:	20000104 	.word	0x20000104
 8000348:	20000054 	.word	0x20000054
 800034c:	08003568 	.word	0x08003568
 8000350:	08003570 	.word	0x08003570
 8000354:	0800357c 	.word	0x0800357c
 8000358:	08003588 	.word	0x08003588
 800035c:	08003598 	.word	0x08003598
 8000360:	080035a8 	.word	0x080035a8
 8000364:	080035b4 	.word	0x080035b4
 8000368:	080035c0 	.word	0x080035c0

0800036c <CAN_Config>:

void CAN_Config(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b08e      	sub	sp, #56	@ 0x38
 8000370:	af00      	add	r7, sp, #0
	// CAN Initialization

	  uint8_t bigData[20] = { /* ... */ };
 8000372:	2324      	movs	r3, #36	@ 0x24
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2314      	movs	r3, #20
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f003 f8b1 	bl	80034e4 <memset>

	  CAN_TxHeaderTypeDef txHeader;
		  // uint8_t txData[20];
		  uint32_t txMailbox;

		  txHeader.StdId = 0x123;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2224      	movs	r2, #36	@ 0x24
 8000386:	32ff      	adds	r2, #255	@ 0xff
 8000388:	601a      	str	r2, [r3, #0]
		  txHeader.RTR = CAN_RTR_DATA;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
		  txHeader.IDE = CAN_ID_STD;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
		  txHeader.DLC = 2;			// sending 16
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2202      	movs	r2, #2
 800039a:	611a      	str	r2, [r3, #16]
		  txHeader.TransmitGlobalTime = DISABLE;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	751a      	strb	r2, [r3, #20]

		// https://github.com/timsonater/stm32-CAN-bus-example-HAL-API/blob/master/main.c

		pHeader.DLC=1; //give message size of 1 byte
 80003a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <CAN_Config+0xa8>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	611a      	str	r2, [r3, #16]
		pHeader.IDE=CAN_ID_STD; //set identifier to standard
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <CAN_Config+0xa8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
		pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 80003ae:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <CAN_Config+0xa8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
		pHeader.StdId=0x244; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <CAN_Config+0xa8>)
 80003b6:	2291      	movs	r2, #145	@ 0x91
 80003b8:	0092      	lsls	r2, r2, #2
 80003ba:	601a      	str	r2, [r3, #0]

		//filter one (stack light blink)
		sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 80003bc:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <CAN_Config+0xac>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterIdHigh=0x245<<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <CAN_Config+0xac>)
 80003c4:	4a15      	ldr	r2, [pc, #84]	@ (800041c <CAN_Config+0xb0>)
 80003c6:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow=0;
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <CAN_Config+0xac>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh=0;
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <CAN_Config+0xac>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow=0;
 80003d4:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <CAN_Config+0xac>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <CAN_Config+0xac>)
 80003dc:	2201      	movs	r2, #1
 80003de:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterActivation=ENABLE;
 80003e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <CAN_Config+0xac>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	621a      	str	r2, [r3, #32]

		HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 80003e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000418 <CAN_Config+0xac>)
 80003e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <CAN_Config+0xb4>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fca7 	bl	8000d40 <HAL_CAN_ConfigFilter>

	  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <CAN_Config+0xb4>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fd95 	bl	8000f24 <HAL_CAN_Start>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <CAN_Config+0x96>
	  {
	    Error_Handler();
 80003fe:	f000 f9d7 	bl	80007b0 <Error_Handler>
	  }
	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <CAN_Config+0xb4>)
 8000404:	2102      	movs	r1, #2
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fdd2 	bl	8000fb0 <HAL_CAN_ActivateNotification>

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b00e      	add	sp, #56	@ 0x38
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000170 	.word	0x20000170
 8000418:	20000188 	.word	0x20000188
 800041c:	000048a0 	.word	0x000048a0
 8000420:	2000002c 	.word	0x2000002c

08000424 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

		uint8_t received_byte = temp[0];
 800042c:	210f      	movs	r1, #15
 800042e:	187b      	adds	r3, r7, r1
 8000430:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <HAL_UART_RxCpltCallback+0x78>)
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	701a      	strb	r2, [r3, #0]

		// if ends with \n, then message complete
		if (received_byte == 0x0a) {
 8000436:	187b      	adds	r3, r7, r1
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b0a      	cmp	r3, #10
 800043c:	d102      	bne.n	8000444 <HAL_UART_RxCpltCallback+0x20>
			message_received_flag = 1;
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <HAL_UART_RxCpltCallback+0x7c>)
 8000440:	2201      	movs	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
		}
		// if not complete message or not max length, store it
		if (indx < (MAX_MESSAGE_LENGTH - 1) && message_received_flag == 0) { // Leave 1 byte for null terminator
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <HAL_UART_RxCpltCallback+0x80>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1e5a      	subs	r2, r3, #1
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	dd10      	ble.n	8000474 <HAL_UART_RxCpltCallback+0x50>
 8000452:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <HAL_UART_RxCpltCallback+0x7c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <HAL_UART_RxCpltCallback+0x50>
			RxData[indx] = received_byte;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <HAL_UART_RxCpltCallback+0x88>)
 8000460:	210f      	movs	r1, #15
 8000462:	1879      	adds	r1, r7, r1
 8000464:	7809      	ldrb	r1, [r1, #0]
 8000466:	54d1      	strb	r1, [r2, r3]
			indx++;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	e009      	b.n	8000488 <HAL_UART_RxCpltCallback+0x64>
		}
		else if (indx >= (MAX_MESSAGE_LENGTH - 1)) {
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <HAL_UART_RxCpltCallback+0x80>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	dc02      	bgt.n	8000488 <HAL_UART_RxCpltCallback+0x64>
			// Buffer overflow occurred before newline, treat as error/reset
			indx = 0;
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <HAL_UART_RxCpltCallback+0x84>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
		}

		// Restart the interrupt
		HAL_UART_Receive_IT(&huart2, temp, 1);
 8000488:	4904      	ldr	r1, [pc, #16]	@ (800049c <HAL_UART_RxCpltCallback+0x78>)
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <HAL_UART_RxCpltCallback+0x8c>)
 800048c:	2201      	movs	r2, #1
 800048e:	0018      	movs	r0, r3
 8000490:	f001 fe99 	bl	80021c6 <HAL_UART_Receive_IT>

}
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b004      	add	sp, #16
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000104 	.word	0x20000104
 80004a0:	2000016c 	.word	0x2000016c
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000168 	.word	0x20000168
 80004ac:	200000f0 	.word	0x200000f0
 80004b0:	20000054 	.word	0x20000054

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ba:	f000 fabb 	bl	8000a34 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004be:	f000 f841 	bl	8000544 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c2:	f000 f8f3 	bl	80006ac <MX_GPIO_Init>
  MX_CAN_Init();
 80004c6:	f000 f889 	bl	80005dc <MX_CAN_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f8bf 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  AT_Config();
 80004ce:	f7ff febb 	bl	8000248 <AT_Config>

  CAN_Config();
 80004d2:	f7ff ff4b 	bl	800036c <CAN_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	if (message_received_flag)
 80004d6:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <main+0x7c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00f      	beq.n	80004fe <main+0x4a>
	  	{
	  		// indx holds the number of bytes received (up to, but not including, the '\n')
	  		memcpy(FinalData, RxData, indx);
 80004de:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <main+0x80>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	4914      	ldr	r1, [pc, #80]	@ (8000538 <main+0x84>)
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <main+0x88>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f003 f827 	bl	800353c <memcpy>

	  		// Toggle the LED to signal received
	  		toggle_LED();
 80004ee:	f7ff fe97 	bl	8000220 <toggle_LED>

	  		// clear the flag and reset index
	  		message_received_flag = 0;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <main+0x7c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
	  		indx = 0;
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <main+0x80>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
	  	}


    // 1. Transmit the UART message.
	  	// address 0a01, channel 3, "selena"
	   uint8_t lora_message[] = {0x0A, 0x01, 0x03, 0x73, 0x65, 0x6C, 0x65, 0x6E, 0x61, 0x0D, 0x0A};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <main+0x8c>)
 8000502:	ca03      	ldmia	r2!, {r0, r1}
 8000504:	c303      	stmia	r3!, {r0, r1}
 8000506:	8811      	ldrh	r1, [r2, #0]
 8000508:	8019      	strh	r1, [r3, #0]
 800050a:	7892      	ldrb	r2, [r2, #2]
 800050c:	709a      	strb	r2, [r3, #2]
	   send_at_command(lora_message, sizeof(lora_message));
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	210b      	movs	r1, #11
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f912 	bl	800073c <send_at_command>
	   HAL_Delay(100);
 8000518:	2064      	movs	r0, #100	@ 0x64
 800051a:	f000 faef 	bl	8000afc <HAL_Delay>

	   toggle_LED();
 800051e:	f7ff fe7f 	bl	8000220 <toggle_LED>
		message_received_flag = 0;
 8000522:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <main+0x7c>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
		indx = 0;
 8000528:	4b02      	ldr	r3, [pc, #8]	@ (8000534 <main+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
  {
 800052e:	e7d2      	b.n	80004d6 <main+0x22>
 8000530:	2000016c 	.word	0x2000016c
 8000534:	20000168 	.word	0x20000168
 8000538:	200000f0 	.word	0x200000f0
 800053c:	200000dc 	.word	0x200000dc
 8000540:	080035cc 	.word	0x080035cc

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b093      	sub	sp, #76	@ 0x4c
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	2414      	movs	r4, #20
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2334      	movs	r3, #52	@ 0x34
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 ffc5 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	2310      	movs	r3, #16
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 ffbe 	bl	80034e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	0021      	movs	r1, r4
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2202      	movs	r2, #2
 800056e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2201      	movs	r2, #1
 8000574:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2210      	movs	r2, #16
 800057a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2202      	movs	r2, #2
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	0212      	lsls	r2, r2, #8
 8000588:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	@ 0x80
 800058e:	0352      	lsls	r2, r2, #13
 8000590:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	187b      	adds	r3, r7, r1
 800059a:	0018      	movs	r0, r3
 800059c:	f001 f82e 	bl	80015fc <HAL_RCC_OscConfig>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005a4:	f000 f904 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2207      	movs	r2, #7
 80005ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2202      	movs	r2, #2
 80005b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2101      	movs	r1, #1
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fb9f 	bl	8001d08 <HAL_RCC_ClockConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ce:	f000 f8ef 	bl	80007b0 <Error_Handler>
  }
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b013      	add	sp, #76	@ 0x4c
 80005d8:	bd90      	pop	{r4, r7, pc}
	...

080005dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_CAN_Init+0x68>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <MX_CAN_Init+0x6c>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <MX_CAN_Init+0x68>)
 80005e8:	2206      	movs	r2, #6
 80005ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_CAN_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_CAN_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_CAN_Init+0x68>)
 80005fa:	22c0      	movs	r2, #192	@ 0xc0
 80005fc:	0312      	lsls	r2, r2, #12
 80005fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000600:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_CAN_Init+0x68>)
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	0352      	lsls	r2, r2, #13
 8000606:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_CAN_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <MX_CAN_Init+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <MX_CAN_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <MX_CAN_Init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <MX_CAN_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000626:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <MX_CAN_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <MX_CAN_Init+0x68>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fa88 	bl	8000b44 <HAL_CAN_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f8ba 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	2000002c 	.word	0x2000002c
 8000648:	40006400 	.word	0x40006400

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <MX_USART2_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000658:	2296      	movs	r2, #150	@ 0x96
 800065a:	0192      	lsls	r2, r2, #6
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <MX_USART2_UART_Init+0x58>)
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fca5 	bl	8001fe0 <HAL_UART_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f889 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000054 	.word	0x20000054
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	240c      	movs	r4, #12
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2314      	movs	r3, #20
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f002 ff11 	bl	80034e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	03c9      	lsls	r1, r1, #15
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	03db      	lsls	r3, r3, #15
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	0289      	lsls	r1, r1, #10
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_GPIO_Init+0x8c>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fa:	2390      	movs	r3, #144	@ 0x90
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	0018      	movs	r0, r3
 8000704:	f000 ff42 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2220      	movs	r2, #32
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2201      	movs	r2, #1
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	187a      	adds	r2, r7, r1
 8000724:	2390      	movs	r3, #144	@ 0x90
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	0011      	movs	r1, r2
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fdc6 	bl	80012bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b009      	add	sp, #36	@ 0x24
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40021000 	.word	0x40021000

0800073c <send_at_command>:
  * @param  huart: UART handle
  * @retval None
  */


void send_at_command(const uint8_t* hex_cmd, uint16_t len) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	000a      	movs	r2, r1
 8000746:	1cbb      	adds	r3, r7, #2
 8000748:	801a      	strh	r2, [r3, #0]
    // Buffer to hold the command plus the required "\r\n"
	HAL_UART_Transmit(&huart2, (uint8_t*)hex_cmd, len, 100);
 800074a:	1cbb      	adds	r3, r7, #2
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <send_at_command+0x24>)
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	f001 fc98 	bl	8002088 <HAL_UART_Transmit>
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000054 	.word	0x20000054

08000764 <send_command_and_wait>:

void send_command_and_wait(const uint8_t *cmd, uint16_t len) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	000a      	movs	r2, r1
 800076e:	1cbb      	adds	r3, r7, #2
 8000770:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)cmd, len, 100);
 8000772:	1cbb      	adds	r3, r7, #2
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <send_command_and_wait+0x40>)
 800077a:	2364      	movs	r3, #100	@ 0x64
 800077c:	f001 fc84 	bl	8002088 <HAL_UART_Transmit>
    while (message_received_flag == 0) {}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <send_command_and_wait+0x44>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0fb      	beq.n	8000782 <send_command_and_wait+0x1e>
    toggle_LED();
 800078a:	f7ff fd49 	bl	8000220 <toggle_LED>
    message_received_flag = 0;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <send_command_and_wait+0x44>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
    indx = 0;
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <send_command_and_wait+0x48>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000054 	.word	0x20000054
 80007a8:	2000016c 	.word	0x2000016c
 80007ac:	20000168 	.word	0x20000168

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_MspInit+0x50>)
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HAL_MspInit+0x50>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_MspInit+0x50>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_MspInit+0x50>)
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <HAL_MspInit+0x50>)
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	0549      	lsls	r1, r1, #21
 80007e4:	430a      	orrs	r2, r1
 80007e6:	61da      	str	r2, [r3, #28]
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HAL_MspInit+0x50>)
 80007ea:	69da      	ldr	r2, [r3, #28]
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	055b      	lsls	r3, r3, #21
 80007f0:	4013      	ands	r3, r2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x54>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_MspInit+0x54>)
 80007fc:	2110      	movs	r1, #16
 80007fe:	430a      	orrs	r2, r1
 8000800:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000

08000814 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	@ 0x2c
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	2414      	movs	r4, #20
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f002 fe5c 	bl	80034e4 <memset>
  if(hcan->Instance==CAN)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1d      	ldr	r2, [pc, #116]	@ (80008a8 <HAL_CAN_MspInit+0x94>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d133      	bne.n	800089e <HAL_CAN_MspInit+0x8a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000836:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	0489      	lsls	r1, r1, #18
 8000840:	430a      	orrs	r2, r1
 8000842:	61da      	str	r2, [r3, #28]
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 8000846:	69da      	ldr	r2, [r3, #28]
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	049b      	lsls	r3, r3, #18
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 8000858:	2180      	movs	r1, #128	@ 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_CAN_MspInit+0x98>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	029b      	lsls	r3, r3, #10
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	0152      	lsls	r2, r2, #5
 8000874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	0021      	movs	r1, r4
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2202      	movs	r2, #2
 800087c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2203      	movs	r2, #3
 8000888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2204      	movs	r2, #4
 800088e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	2390      	movs	r3, #144	@ 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fd0f 	bl	80012bc <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b00b      	add	sp, #44	@ 0x2c
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40006400 	.word	0x40006400
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b08b      	sub	sp, #44	@ 0x2c
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	2414      	movs	r4, #20
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	2314      	movs	r3, #20
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 fe0e 	bl	80034e4 <memset>
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	@ (8000950 <HAL_UART_MspInit+0xa0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d13a      	bne.n	8000948 <HAL_UART_MspInit+0x98>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008d4:	69da      	ldr	r2, [r3, #28]
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	0289      	lsls	r1, r1, #10
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	029b      	lsls	r3, r3, #10
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0289      	lsls	r1, r1, #10
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_UART_MspInit+0xa4>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	029b      	lsls	r3, r3, #10
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090a:	0021      	movs	r1, r4
 800090c:	187b      	adds	r3, r7, r1
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2203      	movs	r2, #3
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2201      	movs	r2, #1
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	187a      	adds	r2, r7, r1
 800092c:	2390      	movs	r3, #144	@ 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fcc2 	bl	80012bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	201c      	movs	r0, #28
 800093e:	f000 fc0d 	bl	800115c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000942:	201c      	movs	r0, #28
 8000944:	f000 fc1f 	bl	8001186 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b00b      	add	sp, #44	@ 0x2c
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8a0 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <USART2_IRQHandler+0x14>)
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fc6e 	bl	8002274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000054 	.word	0x20000054

080009a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b4:	f7ff fff6 	bl	80009a4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009b8:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <LoopForever+0x6>)
    LDR R1, [R0]
 80009ba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009bc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <LoopForever+0xa>)
    CMP R1, R2
 80009c0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009c2:	d105      	bne.n	80009d0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009c4:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009c6:	4912      	ldr	r1, [pc, #72]	@ (8000a10 <LoopForever+0x12>)
    STR R1, [R0]
 80009c8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ca:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009cc:	4912      	ldr	r1, [pc, #72]	@ (8000a18 <LoopForever+0x1a>)
    STR R1, [R0]
 80009ce:	6001      	str	r1, [r0, #0]

080009d0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <LoopForever+0x1e>)
  ldr r1, =_edata
 80009d2:	4913      	ldr	r1, [pc, #76]	@ (8000a20 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009d4:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <LoopForever+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009e8:	4c10      	ldr	r4, [pc, #64]	@ (8000a2c <LoopForever+0x2e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f002 fd7d 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fd5b 	bl	80004b4 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a04:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a08:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a0c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a10:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a14:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a18:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a24:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8000a28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a2c:	200001b4 	.word	0x200001b4

08000a30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_IRQHandler>
	...

08000a34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <HAL_Init+0x24>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_Init+0x24>)
 8000a3e:	2110      	movs	r1, #16
 8000a40:	430a      	orrs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f809 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4a:	f7ff feb7 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <HAL_InitTick+0x5c>)
 8000a66:	681c      	ldr	r4, [r3, #0]
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <HAL_InitTick+0x60>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	23fa      	movs	r3, #250	@ 0xfa
 8000a70:	0098      	lsls	r0, r3, #2
 8000a72:	f7ff fb49 	bl	8000108 <__udivsi3>
 8000a76:	0003      	movs	r3, r0
 8000a78:	0019      	movs	r1, r3
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	f7ff fb44 	bl	8000108 <__udivsi3>
 8000a80:	0003      	movs	r3, r0
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fb8f 	bl	80011a6 <HAL_SYSTICK_Config>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e00f      	b.n	8000ab0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d80b      	bhi.n	8000aae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fb5c 	bl	800115c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_InitTick+0x64>)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b003      	add	sp, #12
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	2000000c 	.word	0x2000000c
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	18d2      	adds	r2, r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	200001b0 	.word	0x200001b0

08000ae8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	200001b0 	.word	0x200001b0

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff0 	bl	8000ae8 <HAL_GetTick>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	f7ff ffe0 	bl	8000ae8 <HAL_GetTick>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	2000000c 	.word	0x2000000c

08000b44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0f0      	b.n	8000d38 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2220      	movs	r2, #32
 8000b5a:	5c9b      	ldrb	r3, [r3, r2]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fe55 	bl	8000814 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b7a:	f7ff ffb5 	bl	8000ae8 <HAL_GetTick>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b82:	e013      	b.n	8000bac <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b84:	f7ff ffb0 	bl	8000ae8 <HAL_GetTick>
 8000b88:	0002      	movs	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b0a      	cmp	r3, #10
 8000b90:	d90c      	bls.n	8000bac <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	0292      	lsls	r2, r2, #10
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e0c5      	b.n	8000d38 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d0e5      	beq.n	8000b84 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc8:	f7ff ff8e 	bl	8000ae8 <HAL_GetTick>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bd0:	e013      	b.n	8000bfa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bd2:	f7ff ff89 	bl	8000ae8 <HAL_GetTick>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	d90c      	bls.n	8000bfa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	0292      	lsls	r2, r2, #10
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e09e      	b.n	8000d38 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2202      	movs	r2, #2
 8000c02:	4013      	ands	r3, r2
 8000c04:	d1e5      	bne.n	8000bd2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7e1b      	ldrb	r3, [r3, #24]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d108      	bne.n	8000c20 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e007      	b.n	8000c30 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	438a      	bics	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7e5b      	ldrb	r3, [r3, #25]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d108      	bne.n	8000c4a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2140      	movs	r1, #64	@ 0x40
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e007      	b.n	8000c5a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2140      	movs	r1, #64	@ 0x40
 8000c56:	438a      	bics	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7e9b      	ldrb	r3, [r3, #26]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d108      	bne.n	8000c74 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e007      	b.n	8000c84 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2120      	movs	r1, #32
 8000c80:	438a      	bics	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7edb      	ldrb	r3, [r3, #27]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2110      	movs	r1, #16
 8000c98:	438a      	bics	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e007      	b.n	8000cae <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2110      	movs	r1, #16
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7f1b      	ldrb	r3, [r3, #28]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d108      	bne.n	8000cc8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e007      	b.n	8000cd8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7f5b      	ldrb	r3, [r3, #29]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2104      	movs	r1, #4
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e007      	b.n	8000d02 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	438a      	bics	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	431a      	orrs	r2, r3
 8000d18:	0011      	movs	r1, r2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2220      	movs	r2, #32
 8000d32:	2101      	movs	r1, #1
 8000d34:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d50:	2013      	movs	r0, #19
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	2120      	movs	r1, #32
 8000d58:	5c52      	ldrb	r2, [r2, r1]
 8000d5a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	18bb      	adds	r3, r7, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d004      	beq.n	8000d70 <HAL_CAN_ConfigFilter+0x30>
 8000d66:	18bb      	adds	r3, r7, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d000      	beq.n	8000d70 <HAL_CAN_ConfigFilter+0x30>
 8000d6e:	e0cd      	b.n	8000f0c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	58d3      	ldr	r3, [r2, r3]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	221f      	movs	r2, #31
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2201      	movs	r2, #1
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	2387      	movs	r3, #135	@ 0x87
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	58d3      	ldr	r3, [r2, r3]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	2387      	movs	r3, #135	@ 0x87
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d129      	bne.n	8000e0a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	2383      	movs	r3, #131	@ 0x83
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	58d3      	ldr	r3, [r2, r3]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	43d2      	mvns	r2, r2
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	2383      	movs	r3, #131	@ 0x83
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000de0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3248      	adds	r2, #72	@ 0x48
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dfc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dfe:	6979      	ldr	r1, [r7, #20]
 8000e00:	3348      	adds	r3, #72	@ 0x48
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	18cb      	adds	r3, r1, r3
 8000e06:	3304      	adds	r3, #4
 8000e08:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d128      	bne.n	8000e64 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	2383      	movs	r3, #131	@ 0x83
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	58d2      	ldr	r2, [r2, r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	0011      	movs	r1, r2
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2383      	movs	r3, #131	@ 0x83
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	041b      	lsls	r3, r3, #16
 8000e34:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e3a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3248      	adds	r2, #72	@ 0x48
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e58:	6979      	ldr	r1, [r7, #20]
 8000e5a:	3348      	adds	r3, #72	@ 0x48
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	18cb      	adds	r3, r1, r3
 8000e60:	3304      	adds	r3, #4
 8000e62:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10c      	bne.n	8000e86 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	2381      	movs	r3, #129	@ 0x81
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	58d3      	ldr	r3, [r2, r3]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	43d2      	mvns	r2, r2
 8000e78:	401a      	ands	r2, r3
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	2381      	movs	r3, #129	@ 0x81
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	50d1      	str	r1, [r2, r3]
 8000e84:	e00a      	b.n	8000e9c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	2381      	movs	r3, #129	@ 0x81
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58d2      	ldr	r2, [r2, r3]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	0011      	movs	r1, r2
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	2381      	movs	r3, #129	@ 0x81
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	2385      	movs	r3, #133	@ 0x85
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	58d3      	ldr	r3, [r2, r3]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	43d2      	mvns	r2, r2
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2385      	movs	r3, #133	@ 0x85
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	50d1      	str	r1, [r2, r3]
 8000ebc:	e00a      	b.n	8000ed4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	2385      	movs	r3, #133	@ 0x85
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	58d2      	ldr	r2, [r2, r3]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	0011      	movs	r1, r2
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	2385      	movs	r3, #133	@ 0x85
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10a      	bne.n	8000ef2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2387      	movs	r3, #135	@ 0x87
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	58d2      	ldr	r2, [r2, r3]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	0011      	movs	r1, r2
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	2387      	movs	r3, #135	@ 0x87
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	58d3      	ldr	r3, [r2, r3]
 8000efa:	2201      	movs	r2, #1
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	02d2      	lsls	r2, r2, #11
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
  }
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	5c9b      	ldrb	r3, [r3, r2]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d12f      	bne.n	8000f98 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f50:	f7ff fdca 	bl	8000ae8 <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f58:	e013      	b.n	8000f82 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5a:	f7ff fdc5 	bl	8000ae8 <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b0a      	cmp	r3, #10
 8000f66:	d90c      	bls.n	8000f82 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	0292      	lsls	r2, r2, #10
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e012      	b.n	8000fa8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1e5      	bne.n	8000f5a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	0312      	lsls	r2, r2, #12
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
  }
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b004      	add	sp, #16
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fba:	200f      	movs	r0, #15
 8000fbc:	183b      	adds	r3, r7, r0
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	5c52      	ldrb	r2, [r2, r1]
 8000fc4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	18bb      	adds	r3, r7, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d003      	beq.n	8000fd8 <HAL_CAN_ActivateNotification+0x28>
 8000fd0:	18bb      	adds	r3, r7, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d109      	bne.n	8000fec <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6959      	ldr	r1, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	02d2      	lsls	r2, r2, #11
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
  }
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b7f      	cmp	r3, #127	@ 0x7f
 8001016:	d809      	bhi.n	800102c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	231f      	movs	r3, #31
 8001020:	401a      	ands	r2, r3
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_EnableIRQ+0x30>)
 8001024:	2101      	movs	r1, #1
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
  }
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	0002      	movs	r2, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b7f      	cmp	r3, #127	@ 0x7f
 800104c:	d828      	bhi.n	80010a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104e:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <__NVIC_SetPriority+0xd4>)
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b25b      	sxtb	r3, r3
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	33c0      	adds	r3, #192	@ 0xc0
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	589b      	ldr	r3, [r3, r2]
 800105e:	1dfa      	adds	r2, r7, #7
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	0011      	movs	r1, r2
 8001064:	2203      	movs	r2, #3
 8001066:	400a      	ands	r2, r1
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	21ff      	movs	r1, #255	@ 0xff
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	43d2      	mvns	r2, r2
 8001072:	401a      	ands	r2, r3
 8001074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	22ff      	movs	r2, #255	@ 0xff
 800107c:	401a      	ands	r2, r3
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	2303      	movs	r3, #3
 8001086:	4003      	ands	r3, r0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	481f      	ldr	r0, [pc, #124]	@ (800110c <__NVIC_SetPriority+0xd4>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	430a      	orrs	r2, r1
 8001098:	33c0      	adds	r3, #192	@ 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800109e:	e031      	b.n	8001104 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <__NVIC_SetPriority+0xd8>)
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	0019      	movs	r1, r3
 80010a8:	230f      	movs	r3, #15
 80010aa:	400b      	ands	r3, r1
 80010ac:	3b08      	subs	r3, #8
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3306      	adds	r3, #6
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1dfa      	adds	r2, r7, #7
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	0011      	movs	r1, r2
 80010c0:	2203      	movs	r2, #3
 80010c2:	400a      	ands	r2, r1
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	21ff      	movs	r1, #255	@ 0xff
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	401a      	ands	r2, r3
 80010d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	22ff      	movs	r2, #255	@ 0xff
 80010d8:	401a      	ands	r2, r3
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	2303      	movs	r3, #3
 80010e2:	4003      	ands	r3, r0
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	4809      	ldr	r0, [pc, #36]	@ (8001110 <__NVIC_SetPriority+0xd8>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	001c      	movs	r4, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	4023      	ands	r3, r4
 80010f4:	3b08      	subs	r3, #8
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	430a      	orrs	r2, r1
 80010fa:	3306      	adds	r3, #6
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	18c3      	adds	r3, r0, r3
 8001100:	3304      	adds	r3, #4
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b003      	add	sp, #12
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	045b      	lsls	r3, r3, #17
 8001124:	429a      	cmp	r2, r3
 8001126:	d301      	bcc.n	800112c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001128:	2301      	movs	r3, #1
 800112a:	e010      	b.n	800114e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <SysTick_Config+0x44>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	3a01      	subs	r2, #1
 8001132:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2103      	movs	r1, #3
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff7c 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <SysTick_Config+0x44>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <SysTick_Config+0x44>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	210f      	movs	r1, #15
 8001168:	187b      	adds	r3, r7, r1
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	187b      	adds	r3, r7, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	0002      	movs	r2, r0
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ff33 	bl	8001004 <__NVIC_EnableIRQ>
}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ffaf 	bl	8001114 <SysTick_Config>
 80011b6:	0003      	movs	r3, r0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2221      	movs	r2, #33	@ 0x21
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d008      	beq.n	80011e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2204      	movs	r2, #4
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e020      	b.n	8001228 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	210e      	movs	r1, #14
 80011f2:	438a      	bics	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2101      	movs	r1, #1
 8001202:	438a      	bics	r2, r1
 8001204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120e:	2101      	movs	r1, #1
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2221      	movs	r2, #33	@ 0x21
 800121a:	2101      	movs	r1, #1
 800121c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	2100      	movs	r1, #0
 8001224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	210f      	movs	r1, #15
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2221      	movs	r2, #33	@ 0x21
 8001244:	5c9b      	ldrb	r3, [r3, r2]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d006      	beq.n	800125a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e028      	b.n	80012ac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	210e      	movs	r1, #14
 8001266:	438a      	bics	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	438a      	bics	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001282:	2101      	movs	r1, #1
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2221      	movs	r2, #33	@ 0x21
 800128e:	2101      	movs	r1, #1
 8001290:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	0010      	movs	r0, r2
 80012aa:	4798      	blx	r3
    }
  }
  return status;
 80012ac:	230f      	movs	r3, #15
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e149      	b.n	8001560 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <HAL_GPIO_Init+0x28>
 80012e2:	e13a      	b.n	800155a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d130      	bne.n	800135e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	409a      	lsls	r2, r3
 800130a:	0013      	movs	r3, r2
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	2201      	movs	r2, #1
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	4013      	ands	r3, r2
 8001366:	2b03      	cmp	r3, #3
 8001368:	d017      	beq.n	800139a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d123      	bne.n	80013ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	58d3      	ldr	r3, [r2, r3]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2207      	movs	r2, #7
 80013b8:	4013      	ands	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2107      	movs	r1, #7
 80013d2:	400b      	ands	r3, r1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	401a      	ands	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	23c0      	movs	r3, #192	@ 0xc0
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_GPIO_Init+0x174>
 800142e:	e094      	b.n	800155a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <HAL_GPIO_Init+0x2bc>)
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <HAL_GPIO_Init+0x2bc>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	4b4e      	ldr	r3, [pc, #312]	@ (8001578 <HAL_GPIO_Init+0x2bc>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001448:	4a4c      	ldr	r2, [pc, #304]	@ (800157c <HAL_GPIO_Init+0x2c0>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	589b      	ldr	r3, [r3, r2]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	2390      	movs	r3, #144	@ 0x90
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	429a      	cmp	r2, r3
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1d6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a41      	ldr	r2, [pc, #260]	@ (8001580 <HAL_GPIO_Init+0x2c4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1d2>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a40      	ldr	r2, [pc, #256]	@ (8001584 <HAL_GPIO_Init+0x2c8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1ce>
 8001486:	2302      	movs	r3, #2
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 800148a:	2305      	movs	r3, #5
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 8001492:	2300      	movs	r3, #0
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	2103      	movs	r1, #3
 8001498:	400a      	ands	r2, r1
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	@ (800157c <HAL_GPIO_Init+0x2c0>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b2:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	035b      	lsls	r3, r3, #13
 80014ca:	4013      	ands	r3, r2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43da      	mvns	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	4013      	ands	r3, r2
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <HAL_GPIO_Init+0x2cc>)
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	40da      	lsrs	r2, r3
 8001568:	1e13      	subs	r3, r2, #0
 800156a:	d000      	beq.n	800156e <HAL_GPIO_Init+0x2b2>
 800156c:	e6ae      	b.n	80012cc <HAL_GPIO_Init+0x10>
  } 
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b006      	add	sp, #24
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	0008      	movs	r0, r1
 8001596:	0011      	movs	r1, r2
 8001598:	1cbb      	adds	r3, r7, #2
 800159a:	1c02      	adds	r2, r0, #0
 800159c:	801a      	strh	r2, [r3, #0]
 800159e:	1c7b      	adds	r3, r7, #1
 80015a0:	1c0a      	adds	r2, r1, #0
 80015a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	1c7b      	adds	r3, r7, #1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ac:	1cbb      	adds	r3, r7, #2
 80015ae:	881a      	ldrh	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b6:	1cbb      	adds	r3, r7, #2
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	000a      	movs	r2, r1
 80015d0:	1cbb      	adds	r3, r7, #2
 80015d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015da:	1cbb      	adds	r3, r7, #2
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	041a      	lsls	r2, r3, #16
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	1cb9      	adds	r1, r7, #2
 80015ea:	8809      	ldrh	r1, [r1, #0]
 80015ec:	400b      	ands	r3, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
}
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 fb76 	bl	8001cfc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_RCC_OscConfig+0x20>
 800161a:	e08e      	b.n	800173a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800161c:	4bc5      	ldr	r3, [pc, #788]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	220c      	movs	r2, #12
 8001622:	4013      	ands	r3, r2
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00e      	beq.n	8001646 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4bc2      	ldr	r3, [pc, #776]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	220c      	movs	r2, #12
 800162e:	4013      	ands	r3, r2
 8001630:	2b08      	cmp	r3, #8
 8001632:	d117      	bne.n	8001664 <HAL_RCC_OscConfig+0x68>
 8001634:	4bbf      	ldr	r3, [pc, #764]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	23c0      	movs	r3, #192	@ 0xc0
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	401a      	ands	r2, r3
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	429a      	cmp	r2, r3
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001646:	4bbb      	ldr	r3, [pc, #748]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	029b      	lsls	r3, r3, #10
 800164e:	4013      	ands	r3, r2
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x58>
 8001652:	e071      	b.n	8001738 <HAL_RCC_OscConfig+0x13c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d000      	beq.n	800165e <HAL_RCC_OscConfig+0x62>
 800165c:	e06c      	b.n	8001738 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f000 fb4c 	bl	8001cfc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x80>
 800166c:	4bb1      	ldr	r3, [pc, #708]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4bb0      	ldr	r3, [pc, #704]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	0249      	lsls	r1, r1, #9
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e02f      	b.n	80016dc <HAL_RCC_OscConfig+0xe0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0xa2>
 8001684:	4bab      	ldr	r3, [pc, #684]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4baa      	ldr	r3, [pc, #680]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800168a:	49ab      	ldr	r1, [pc, #684]	@ (8001938 <HAL_RCC_OscConfig+0x33c>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	4ba8      	ldr	r3, [pc, #672]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4ba7      	ldr	r3, [pc, #668]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001696:	49a9      	ldr	r1, [pc, #676]	@ (800193c <HAL_RCC_OscConfig+0x340>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e01e      	b.n	80016dc <HAL_RCC_OscConfig+0xe0>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10e      	bne.n	80016c4 <HAL_RCC_OscConfig+0xc8>
 80016a6:	4ba3      	ldr	r3, [pc, #652]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	02c9      	lsls	r1, r1, #11
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4b9f      	ldr	r3, [pc, #636]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b9e      	ldr	r3, [pc, #632]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016ba:	2180      	movs	r1, #128	@ 0x80
 80016bc:	0249      	lsls	r1, r1, #9
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xe0>
 80016c4:	4b9b      	ldr	r3, [pc, #620]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016ca:	499b      	ldr	r1, [pc, #620]	@ (8001938 <HAL_RCC_OscConfig+0x33c>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	4b98      	ldr	r3, [pc, #608]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b97      	ldr	r3, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80016d6:	4999      	ldr	r1, [pc, #612]	@ (800193c <HAL_RCC_OscConfig+0x340>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d014      	beq.n	800170e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fa00 	bl	8000ae8 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ee:	f7ff f9fb 	bl	8000ae8 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	@ 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e2fd      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	4b8c      	ldr	r3, [pc, #560]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0xf2>
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff f9eb 	bl	8000ae8 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff f9e6 	bl	8000ae8 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e2e8      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	029b      	lsls	r3, r3, #10
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x11c>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x14a>
 8001744:	e06c      	b.n	8001820 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001746:	4b7b      	ldr	r3, [pc, #492]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	220c      	movs	r2, #12
 800174c:	4013      	ands	r3, r2
 800174e:	d00e      	beq.n	800176e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001750:	4b78      	ldr	r3, [pc, #480]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	220c      	movs	r2, #12
 8001756:	4013      	ands	r3, r2
 8001758:	2b08      	cmp	r3, #8
 800175a:	d11f      	bne.n	800179c <HAL_RCC_OscConfig+0x1a0>
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	23c0      	movs	r3, #192	@ 0xc0
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	401a      	ands	r2, r3
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	429a      	cmp	r2, r3
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b71      	ldr	r3, [pc, #452]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d005      	beq.n	8001784 <HAL_RCC_OscConfig+0x188>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2bb      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	22f8      	movs	r2, #248	@ 0xf8
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00da      	lsls	r2, r3, #3
 8001794:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e041      	b.n	8001820 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d024      	beq.n	80017ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b62      	ldr	r3, [pc, #392]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff f99a 	bl	8000ae8 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff f995 	bl	8000ae8 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e297      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f1      	beq.n	80017ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b57      	ldr	r3, [pc, #348]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	22f8      	movs	r2, #248	@ 0xf8
 80017dc:	4393      	bics	r3, r2
 80017de:	0019      	movs	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	00da      	lsls	r2, r3, #3
 80017e6:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e018      	b.n	8001820 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b51      	ldr	r3, [pc, #324]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b50      	ldr	r3, [pc, #320]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	438a      	bics	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f975 	bl	8000ae8 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff f970 	bl	8000ae8 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e272      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d1f1      	bne.n	8001804 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2208      	movs	r2, #8
 8001826:	4013      	ands	r3, r2
 8001828:	d036      	beq.n	8001898 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001838:	2101      	movs	r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff f953 	bl	8000ae8 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff f94e 	bl	8000ae8 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e250      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b36      	ldr	r3, [pc, #216]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d0f1      	beq.n	8001848 <HAL_RCC_OscConfig+0x24c>
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800186a:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800186c:	2101      	movs	r1, #1
 800186e:	438a      	bics	r2, r1
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f939 	bl	8000ae8 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff f934 	bl	8000ae8 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e236      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188e:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d1f1      	bne.n	800187c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2204      	movs	r2, #4
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2a8>
 80018a2:	e0b5      	b.n	8001a10 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a4:	201f      	movs	r0, #31
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ac:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	055b      	lsls	r3, r3, #21
 80018b4:	4013      	ands	r3, r2
 80018b6:	d110      	bne.n	80018da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	0549      	lsls	r1, r1, #21
 80018c2:	430a      	orrs	r2, r1
 80018c4:	61da      	str	r2, [r3, #28]
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	055b      	lsls	r3, r3, #21
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018d4:	183b      	adds	r3, r7, r0
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_RCC_OscConfig+0x344>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_RCC_OscConfig+0x344>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_RCC_OscConfig+0x344>)
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f4:	f7ff f8f8 	bl	8000ae8 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7ff f8f3 	bl	8000ae8 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	@ 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1f5      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_OscConfig+0x344>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10f      	bne.n	8001944 <HAL_RCC_OscConfig+0x348>
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 8001926:	6a1a      	ldr	r2, [r3, #32]
 8001928:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <HAL_RCC_OscConfig+0x338>)
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	621a      	str	r2, [r3, #32]
 8001930:	e036      	b.n	80019a0 <HAL_RCC_OscConfig+0x3a4>
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	40021000 	.word	0x40021000
 8001938:	fffeffff 	.word	0xfffeffff
 800193c:	fffbffff 	.word	0xfffbffff
 8001940:	40007000 	.word	0x40007000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x36a>
 800194c:	4bca      	ldr	r3, [pc, #808]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800194e:	6a1a      	ldr	r2, [r3, #32]
 8001950:	4bc9      	ldr	r3, [pc, #804]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001952:	2101      	movs	r1, #1
 8001954:	438a      	bics	r2, r1
 8001956:	621a      	str	r2, [r3, #32]
 8001958:	4bc7      	ldr	r3, [pc, #796]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4bc6      	ldr	r3, [pc, #792]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800195e:	2104      	movs	r1, #4
 8001960:	438a      	bics	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x3a4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x38c>
 800196e:	4bc2      	ldr	r3, [pc, #776]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001970:	6a1a      	ldr	r2, [r3, #32]
 8001972:	4bc1      	ldr	r3, [pc, #772]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001974:	2104      	movs	r1, #4
 8001976:	430a      	orrs	r2, r1
 8001978:	621a      	str	r2, [r3, #32]
 800197a:	4bbf      	ldr	r3, [pc, #764]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	4bbe      	ldr	r3, [pc, #760]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001980:	2101      	movs	r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x3a4>
 8001988:	4bbb      	ldr	r3, [pc, #748]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	4bba      	ldr	r3, [pc, #744]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	621a      	str	r2, [r3, #32]
 8001994:	4bb8      	ldr	r3, [pc, #736]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4bb7      	ldr	r3, [pc, #732]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 800199a:	2104      	movs	r1, #4
 800199c:	438a      	bics	r2, r1
 800199e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d014      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff f89e 	bl	8000ae8 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e009      	b.n	80019c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f899 	bl	8000ae8 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4aaf      	ldr	r2, [pc, #700]	@ (8001c7c <HAL_RCC_OscConfig+0x680>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e19a      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	4bac      	ldr	r3, [pc, #688]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3b6>
 80019d0:	e013      	b.n	80019fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f889 	bl	8000ae8 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	e009      	b.n	80019f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f884 	bl	8000ae8 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	4aa5      	ldr	r2, [pc, #660]	@ (8001c7c <HAL_RCC_OscConfig+0x680>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e185      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	4ba1      	ldr	r3, [pc, #644]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019fa:	231f      	movs	r3, #31
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	4b9c      	ldr	r3, [pc, #624]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	4b9b      	ldr	r3, [pc, #620]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	499d      	ldr	r1, [pc, #628]	@ (8001c80 <HAL_RCC_OscConfig+0x684>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2210      	movs	r2, #16
 8001a16:	4013      	ands	r3, r2
 8001a18:	d063      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d12a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a22:	4b95      	ldr	r3, [pc, #596]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a26:	4b94      	ldr	r3, [pc, #592]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	2104      	movs	r1, #4
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a2e:	4b92      	ldr	r3, [pc, #584]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a32:	4b91      	ldr	r3, [pc, #580]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f855 	bl	8000ae8 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a44:	f7ff f850 	bl	8000ae8 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e152      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a56:	4b88      	ldr	r3, [pc, #544]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d0f1      	beq.n	8001a44 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a60:	4b85      	ldr	r3, [pc, #532]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a64:	22f8      	movs	r2, #248	@ 0xf8
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	00da      	lsls	r2, r3, #3
 8001a70:	4b81      	ldr	r3, [pc, #516]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a76:	e034      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	d111      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a80:	4b7d      	ldr	r3, [pc, #500]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a84:	4b7c      	ldr	r3, [pc, #496]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	22f8      	movs	r2, #248	@ 0xf8
 8001a92:	4393      	bics	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	4b76      	ldr	r3, [pc, #472]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa2:	e01e      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aa4:	4b74      	ldr	r3, [pc, #464]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa8:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	2104      	movs	r1, #4
 8001aac:	430a      	orrs	r2, r1
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ab0:	4b71      	ldr	r3, [pc, #452]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab4:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff f814 	bl	8000ae8 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ac6:	f7ff f80f 	bl	8000ae8 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e111      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ad8:	4b67      	ldr	r3, [pc, #412]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001adc:	2202      	movs	r2, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1f1      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d05c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001aec:	4b62      	ldr	r3, [pc, #392]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d00e      	beq.n	8001b16 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001af8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d114      	bne.n	8001b2e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b04:	4b5c      	ldr	r3, [pc, #368]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	23c0      	movs	r3, #192	@ 0xc0
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	23c0      	movs	r3, #192	@ 0xc0
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b16:	4b58      	ldr	r3, [pc, #352]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d040      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5a8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d03c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e6      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01b      	beq.n	8001b6e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b36:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	0249      	lsls	r1, r1, #9
 8001b40:	430a      	orrs	r2, r1
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe ffd0 	bl	8000ae8 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4e:	f7fe ffcb 	bl	8000ae8 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0cd      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x552>
 8001b6c:	e01b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b6e:	4b42      	ldr	r3, [pc, #264]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	4943      	ldr	r1, [pc, #268]	@ (8001c84 <HAL_RCC_OscConfig+0x688>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe ffb5 	bl	8000ae8 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b84:	f7fe ffb0 	bl	8000ae8 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0b2      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x588>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ba4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d100      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5b4>
 8001bae:	e0a4      	b.n	8001cfa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5c2>
 8001bbc:	e078      	b.n	8001cb0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d14c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001bcc:	492e      	ldr	r1, [pc, #184]	@ (8001c88 <HAL_RCC_OscConfig+0x68c>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe ff89 	bl	8000ae8 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe ff84 	bl	8000ae8 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e086      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	049b      	lsls	r3, r3, #18
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	220f      	movs	r2, #15
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_RCC_OscConfig+0x690>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	431a      	orrs	r2, r3
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	0449      	lsls	r1, r1, #17
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe ff57 	bl	8000ae8 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe ff52 	bl	8000ae8 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e054      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	@ 0x80
 8001c58:	049b      	lsls	r3, r3, #18
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x644>
 8001c5e:	e04c      	b.n	8001cfa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <HAL_RCC_OscConfig+0x68c>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ff3c 	bl	8000ae8 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6a6>
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	fffeffff 	.word	0xfffeffff
 8001c88:	feffffff 	.word	0xfeffffff
 8001c8c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe ff2a 	bl	8000ae8 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e02c      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <HAL_RCC_OscConfig+0x708>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	049b      	lsls	r3, r3, #18
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x694>
 8001cae:	e024      	b.n	8001cfa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01f      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_RCC_OscConfig+0x708>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_RCC_OscConfig+0x708>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	23c0      	movs	r3, #192	@ 0xc0
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	220f      	movs	r2, #15
 8001cdc:	401a      	ands	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	23f0      	movs	r3, #240	@ 0xf0
 8001cea:	039b      	lsls	r3, r3, #14
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b008      	add	sp, #32
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0bf      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d911      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0a6      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d015      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d006      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d62:	4b51      	ldr	r3, [pc, #324]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4b50      	ldr	r3, [pc, #320]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d68:	21e0      	movs	r1, #224	@ 0xe0
 8001d6a:	00c9      	lsls	r1, r1, #3
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	22f0      	movs	r2, #240	@ 0xf0
 8001d76:	4393      	bics	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d04c      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d120      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07a      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	049b      	lsls	r3, r3, #18
 8001db6:	4013      	ands	r3, r2
 8001db8:	d114      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06e      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e062      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e05b      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2203      	movs	r2, #3
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fe76 	bl	8000ae8 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7fe fe71 	bl	8000ae8 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a27      	ldr	r2, [pc, #156]	@ (8001eac <HAL_RCC_ClockConfig+0x1a4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e042      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ec      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d211      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e48:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_RCC_ClockConfig+0x19c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e020      	b.n	8001e9c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1a8>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e78:	f000 f820 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	220f      	movs	r2, #15
 8001e86:	4013      	ands	r3, r2
 8001e88:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1ac>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	40da      	lsrs	r2, r3
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f7fe fde1 	bl	8000a5c <HAL_InitTick>
  
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	00001388 	.word	0x00001388
 8001eb0:	fffff8ff 	.word	0xfffff8ff
 8001eb4:	080035d8 	.word	0x080035d8
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	220c      	movs	r2, #12
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d046      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0xb8>
 8001ee6:	d848      	bhi.n	8001f7a <HAL_RCC_GetSysClockFreq+0xbe>
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d002      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x3c>
 8001ef0:	e043      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ef4:	613b      	str	r3, [r7, #16]
      break;
 8001ef6:	e043      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	220f      	movs	r2, #15
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	23c0      	movs	r3, #192	@ 0xc0
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	481a      	ldr	r0, [pc, #104]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f28:	f7fe f8ee 	bl	8000108 <__udivsi3>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	001a      	movs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4353      	muls	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e01a      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	23c0      	movs	r3, #192	@ 0xc0
 8001f3c:	025b      	lsls	r3, r3, #9
 8001f3e:	401a      	ands	r2, r3
 8001f40:	23c0      	movs	r3, #192	@ 0xc0
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d109      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f4c:	f7fe f8dc 	bl	8000108 <__udivsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	001a      	movs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4353      	muls	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f60:	f7fe f8d2 	bl	8000108 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	001a      	movs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4353      	muls	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	613b      	str	r3, [r7, #16]
      break;
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f76:	613b      	str	r3, [r7, #16]
      break;
 8001f78:	e002      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f7c:	613b      	str	r3, [r7, #16]
      break;
 8001f7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f80:	693b      	ldr	r3, [r7, #16]
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b006      	add	sp, #24
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	080035f0 	.word	0x080035f0
 8001f98:	08003600 	.word	0x08003600
 8001f9c:	02dc6c00 	.word	0x02dc6c00

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	0001      	movs	r1, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	40d9      	lsrs	r1, r3
 8001fce:	000b      	movs	r3, r1
}    
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080035e8 	.word	0x080035e8

08001fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e044      	b.n	800207c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2278      	movs	r2, #120	@ 0x78
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f7fe fc53 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2224      	movs	r2, #36	@ 0x24
 800200e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 fd5e 	bl	8002aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fc1a 	bl	800286c <UART_SetConfig>
 8002038:	0003      	movs	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e01c      	b.n	800207c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	490d      	ldr	r1, [pc, #52]	@ (8002084 <HAL_UART_Init+0xa4>)
 800204e:	400a      	ands	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	212a      	movs	r1, #42	@ 0x2a
 800205e:	438a      	bics	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 fded 	bl	8002c54 <UART_CheckIdleState>
 800207a:	0003      	movs	r3, r0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}
 8002084:	ffffb7ff 	.word	0xffffb7ff

08002088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800209c:	2b20      	cmp	r3, #32
 800209e:	d000      	beq.n	80020a2 <HAL_UART_Transmit+0x1a>
 80020a0:	e08c      	b.n	80021bc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_UART_Transmit+0x28>
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e084      	b.n	80021be <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	429a      	cmp	r2, r3
 80020be:	d109      	bne.n	80020d4 <HAL_UART_Transmit+0x4c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e074      	b.n	80021be <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2284      	movs	r2, #132	@ 0x84
 80020d8:	2100      	movs	r1, #0
 80020da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2221      	movs	r2, #33	@ 0x21
 80020e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e2:	f7fe fd01 	bl	8000ae8 <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1dba      	adds	r2, r7, #6
 80020ee:	2150      	movs	r1, #80	@ 0x50
 80020f0:	8812      	ldrh	r2, [r2, #0]
 80020f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1dba      	adds	r2, r7, #6
 80020f8:	2152      	movs	r1, #82	@ 0x52
 80020fa:	8812      	ldrh	r2, [r2, #0]
 80020fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	015b      	lsls	r3, r3, #5
 8002106:	429a      	cmp	r2, r3
 8002108:	d108      	bne.n	800211c <HAL_UART_Transmit+0x94>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e003      	b.n	8002124 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002124:	e02f      	b.n	8002186 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	0013      	movs	r3, r2
 8002130:	2200      	movs	r2, #0
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	f000 fe36 	bl	8002da4 <UART_WaitOnFlagUntilTimeout>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d004      	beq.n	8002146 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03b      	b.n	80021be <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	05d2      	lsls	r2, r2, #23
 8002156:	0dd2      	lsrs	r2, r2, #23
 8002158:	b292      	uxth	r2, r2
 800215a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	3302      	adds	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e007      	b.n	8002174 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2252      	movs	r2, #82	@ 0x52
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b299      	uxth	r1, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2252      	movs	r2, #82	@ 0x52
 8002184:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2252      	movs	r2, #82	@ 0x52
 800218a:	5a9b      	ldrh	r3, [r3, r2]
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1c9      	bne.n	8002126 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	0013      	movs	r3, r2
 800219c:	2200      	movs	r2, #0
 800219e:	2140      	movs	r1, #64	@ 0x40
 80021a0:	f000 fe00 	bl	8002da4 <UART_WaitOnFlagUntilTimeout>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e005      	b.n	80021be <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b008      	add	sp, #32
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b088      	sub	sp, #32
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	589b      	ldr	r3, [r3, r2]
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d145      	bne.n	800226a <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_UART_Receive_IT+0x26>
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e03d      	b.n	800226c <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d109      	bne.n	8002210 <HAL_UART_Receive_IT+0x4a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	d001      	beq.n	8002210 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e02d      	b.n	800226c <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	4013      	ands	r3, r2
 8002222:	d019      	beq.n	8002258 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002224:	f3ef 8310 	mrs	r3, PRIMASK
 8002228:	613b      	str	r3, [r7, #16]
  return(result);
 800222a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2301      	movs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f383 8810 	msr	PRIMASK, r3
}
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2180      	movs	r1, #128	@ 0x80
 8002246:	04c9      	lsls	r1, r1, #19
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 fe0f 	bl	8002e84 <UART_Start_Receive_IT>
 8002266:	0003      	movs	r3, r0
 8002268:	e000      	b.n	800226c <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b008      	add	sp, #32
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b0ab      	sub	sp, #172	@ 0xac
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	22a4      	movs	r2, #164	@ 0xa4
 8002284:	18b9      	adds	r1, r7, r2
 8002286:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	20a0      	movs	r0, #160	@ 0xa0
 8002290:	1839      	adds	r1, r7, r0
 8002292:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	219c      	movs	r1, #156	@ 0x9c
 800229c:	1879      	adds	r1, r7, r1
 800229e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022a0:	0011      	movs	r1, r2
 80022a2:	18bb      	adds	r3, r7, r2
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a99      	ldr	r2, [pc, #612]	@ (800250c <HAL_UART_IRQHandler+0x298>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	2298      	movs	r2, #152	@ 0x98
 80022ac:	18bc      	adds	r4, r7, r2
 80022ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80022b0:	18bb      	adds	r3, r7, r2
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d114      	bne.n	80022e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	4013      	ands	r3, r2
 80022c0:	d00f      	beq.n	80022e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2220      	movs	r2, #32
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00a      	beq.n	80022e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d100      	bne.n	80022d6 <HAL_UART_IRQHandler+0x62>
 80022d4:	e29e      	b.n	8002814 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	0010      	movs	r0, r2
 80022de:	4798      	blx	r3
      }
      return;
 80022e0:	e298      	b.n	8002814 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022e2:	2398      	movs	r3, #152	@ 0x98
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_UART_IRQHandler+0x7a>
 80022ec:	e114      	b.n	8002518 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80022ee:	239c      	movs	r3, #156	@ 0x9c
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d106      	bne.n	8002308 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80022fa:	23a0      	movs	r3, #160	@ 0xa0
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a83      	ldr	r2, [pc, #524]	@ (8002510 <HAL_UART_IRQHandler+0x29c>)
 8002302:	4013      	ands	r3, r2
 8002304:	d100      	bne.n	8002308 <HAL_UART_IRQHandler+0x94>
 8002306:	e107      	b.n	8002518 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002308:	23a4      	movs	r3, #164	@ 0xa4
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d012      	beq.n	800233a <HAL_UART_IRQHandler+0xc6>
 8002314:	23a0      	movs	r3, #160	@ 0xa0
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4013      	ands	r3, r2
 8002320:	d00b      	beq.n	800233a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2201      	movs	r2, #1
 8002328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2284      	movs	r2, #132	@ 0x84
 800232e:	589b      	ldr	r3, [r3, r2]
 8002330:	2201      	movs	r2, #1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2184      	movs	r1, #132	@ 0x84
 8002338:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800233a:	23a4      	movs	r3, #164	@ 0xa4
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d011      	beq.n	800236a <HAL_UART_IRQHandler+0xf6>
 8002346:	239c      	movs	r3, #156	@ 0x9c
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d00b      	beq.n	800236a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2202      	movs	r2, #2
 8002358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2284      	movs	r2, #132	@ 0x84
 800235e:	589b      	ldr	r3, [r3, r2]
 8002360:	2204      	movs	r2, #4
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2184      	movs	r1, #132	@ 0x84
 8002368:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800236a:	23a4      	movs	r3, #164	@ 0xa4
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	d011      	beq.n	800239a <HAL_UART_IRQHandler+0x126>
 8002376:	239c      	movs	r3, #156	@ 0x9c
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d00b      	beq.n	800239a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2204      	movs	r2, #4
 8002388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2284      	movs	r2, #132	@ 0x84
 800238e:	589b      	ldr	r3, [r3, r2]
 8002390:	2202      	movs	r2, #2
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2184      	movs	r1, #132	@ 0x84
 8002398:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800239a:	23a4      	movs	r3, #164	@ 0xa4
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2208      	movs	r2, #8
 80023a2:	4013      	ands	r3, r2
 80023a4:	d017      	beq.n	80023d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023a6:	23a0      	movs	r3, #160	@ 0xa0
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2220      	movs	r2, #32
 80023ae:	4013      	ands	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023b2:	239c      	movs	r3, #156	@ 0x9c
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023bc:	d00b      	beq.n	80023d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2208      	movs	r2, #8
 80023c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2284      	movs	r2, #132	@ 0x84
 80023ca:	589b      	ldr	r3, [r3, r2]
 80023cc:	2208      	movs	r2, #8
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2184      	movs	r1, #132	@ 0x84
 80023d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023d6:	23a4      	movs	r3, #164	@ 0xa4
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_UART_IRQHandler+0x198>
 80023e4:	23a0      	movs	r3, #160	@ 0xa0
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	04db      	lsls	r3, r3, #19
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00c      	beq.n	800240c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2284      	movs	r2, #132	@ 0x84
 8002400:	589b      	ldr	r3, [r3, r2]
 8002402:	2220      	movs	r2, #32
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2184      	movs	r1, #132	@ 0x84
 800240a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2284      	movs	r2, #132	@ 0x84
 8002410:	589b      	ldr	r3, [r3, r2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <HAL_UART_IRQHandler+0x1a4>
 8002416:	e1ff      	b.n	8002818 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002418:	23a4      	movs	r3, #164	@ 0xa4
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2220      	movs	r2, #32
 8002420:	4013      	ands	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002424:	23a0      	movs	r3, #160	@ 0xa0
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2220      	movs	r2, #32
 800242c:	4013      	ands	r3, r2
 800242e:	d008      	beq.n	8002442 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	0010      	movs	r0, r2
 8002440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2284      	movs	r2, #132	@ 0x84
 8002446:	589b      	ldr	r3, [r3, r2]
 8002448:	2194      	movs	r1, #148	@ 0x94
 800244a:	187a      	adds	r2, r7, r1
 800244c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2240      	movs	r2, #64	@ 0x40
 8002456:	4013      	ands	r3, r2
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d004      	beq.n	8002466 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800245c:	187b      	adds	r3, r7, r1
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2228      	movs	r2, #40	@ 0x28
 8002462:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002464:	d047      	beq.n	80024f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fdd5 	bl	8003018 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2240      	movs	r2, #64	@ 0x40
 8002476:	4013      	ands	r3, r2
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d137      	bne.n	80024ec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800247c:	f3ef 8310 	mrs	r3, PRIMASK
 8002480:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002484:	2090      	movs	r0, #144	@ 0x90
 8002486:	183a      	adds	r2, r7, r0
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	2301      	movs	r3, #1
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			@ (mov r8, r8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2140      	movs	r1, #64	@ 0x40
 80024a2:	438a      	bics	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	183b      	adds	r3, r7, r0
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ae:	f383 8810 	msr	PRIMASK, r3
}
 80024b2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c0:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <HAL_UART_IRQHandler+0x2a0>)
 80024c2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe feb1 	bl	8001230 <HAL_DMA_Abort_IT>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d01a      	beq.n	8002508 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024dc:	0018      	movs	r0, r3
 80024de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	e012      	b.n	8002508 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f9ad 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ea:	e00d      	b.n	8002508 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f9a8 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f4:	e008      	b.n	8002508 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f9a3 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2284      	movs	r2, #132	@ 0x84
 8002502:	2100      	movs	r1, #0
 8002504:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002506:	e187      	b.n	8002818 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	46c0      	nop			@ (mov r8, r8)
    return;
 800250a:	e185      	b.n	8002818 <HAL_UART_IRQHandler+0x5a4>
 800250c:	0000080f 	.word	0x0000080f
 8002510:	04000120 	.word	0x04000120
 8002514:	080030e1 	.word	0x080030e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251c:	2b01      	cmp	r3, #1
 800251e:	d000      	beq.n	8002522 <HAL_UART_IRQHandler+0x2ae>
 8002520:	e139      	b.n	8002796 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002522:	23a4      	movs	r3, #164	@ 0xa4
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	4013      	ands	r3, r2
 800252c:	d100      	bne.n	8002530 <HAL_UART_IRQHandler+0x2bc>
 800252e:	e132      	b.n	8002796 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002530:	23a0      	movs	r3, #160	@ 0xa0
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2210      	movs	r2, #16
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_UART_IRQHandler+0x2ca>
 800253c:	e12b      	b.n	8002796 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2240      	movs	r2, #64	@ 0x40
 800254e:	4013      	ands	r3, r2
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d000      	beq.n	8002556 <HAL_UART_IRQHandler+0x2e2>
 8002554:	e09f      	b.n	8002696 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	217e      	movs	r1, #126	@ 0x7e
 8002560:	187b      	adds	r3, r7, r1
 8002562:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002564:	187b      	adds	r3, r7, r1
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <HAL_UART_IRQHandler+0x2fa>
 800256c:	e156      	b.n	800281c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2258      	movs	r2, #88	@ 0x58
 8002572:	5a9b      	ldrh	r3, [r3, r2]
 8002574:	187a      	adds	r2, r7, r1
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d300      	bcc.n	800257e <HAL_UART_IRQHandler+0x30a>
 800257c:	e14e      	b.n	800281c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	187a      	adds	r2, r7, r1
 8002582:	215a      	movs	r1, #90	@ 0x5a
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b20      	cmp	r3, #32
 8002590:	d06f      	beq.n	8002672 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002592:	f3ef 8310 	mrs	r3, PRIMASK
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800259a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800259c:	2301      	movs	r3, #1
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a2:	f383 8810 	msr	PRIMASK, r3
}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	499e      	ldr	r1, [pc, #632]	@ (800282c <HAL_UART_IRQHandler+0x5b8>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	f383 8810 	msr	PRIMASK, r3
}
 80025c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8310 	mrs	r3, PRIMASK
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80025ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80025ce:	2301      	movs	r3, #1
 80025d0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d4:	f383 8810 	msr	PRIMASK, r3
}
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	438a      	bics	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025f0:	f383 8810 	msr	PRIMASK, r3
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f6:	f3ef 8310 	mrs	r3, PRIMASK
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80025fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002600:	2301      	movs	r3, #1
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	438a      	bics	r2, r1
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800261e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	2120      	movs	r1, #32
 800262e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002636:	f3ef 8310 	mrs	r3, PRIMASK
 800263a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800263c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002640:	2301      	movs	r3, #1
 8002642:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002646:	f383 8810 	msr	PRIMASK, r3
}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2110      	movs	r1, #16
 8002658:	438a      	bics	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800265e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002662:	f383 8810 	msr	PRIMASK, r3
}
 8002666:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	0018      	movs	r0, r3
 800266e:	f7fe fda7 	bl	80011c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2258      	movs	r2, #88	@ 0x58
 800267c:	5a9a      	ldrh	r2, [r3, r2]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	215a      	movs	r1, #90	@ 0x5a
 8002682:	5a5b      	ldrh	r3, [r3, r1]
 8002684:	b29b      	uxth	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f8e0 	bl	8002854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002694:	e0c2      	b.n	800281c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2258      	movs	r2, #88	@ 0x58
 800269a:	5a99      	ldrh	r1, [r3, r2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	225a      	movs	r2, #90	@ 0x5a
 80026a0:	5a9b      	ldrh	r3, [r3, r2]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	208e      	movs	r0, #142	@ 0x8e
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	1a8a      	subs	r2, r1, r2
 80026aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	225a      	movs	r2, #90	@ 0x5a
 80026b0:	5a9b      	ldrh	r3, [r3, r2]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d100      	bne.n	80026ba <HAL_UART_IRQHandler+0x446>
 80026b8:	e0b2      	b.n	8002820 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80026ba:	183b      	adds	r3, r7, r0
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_UART_IRQHandler+0x450>
 80026c2:	e0ad      	b.n	8002820 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c4:	f3ef 8310 	mrs	r3, PRIMASK
 80026c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026cc:	2488      	movs	r4, #136	@ 0x88
 80026ce:	193a      	adds	r2, r7, r4
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f383 8810 	msr	PRIMASK, r3
}
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4951      	ldr	r1, [pc, #324]	@ (8002830 <HAL_UART_IRQHandler+0x5bc>)
 80026ea:	400a      	ands	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002700:	61bb      	str	r3, [r7, #24]
  return(result);
 8002702:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002704:	2484      	movs	r4, #132	@ 0x84
 8002706:	193a      	adds	r2, r7, r4
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f383 8810 	msr	PRIMASK, r3
}
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	193b      	adds	r3, r7, r4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2280      	movs	r2, #128	@ 0x80
 8002738:	2120      	movs	r1, #32
 800273a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002748:	f3ef 8310 	mrs	r3, PRIMASK
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002750:	2480      	movs	r4, #128	@ 0x80
 8002752:	193a      	adds	r2, r7, r4
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	2301      	movs	r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	f383 8810 	msr	PRIMASK, r3
}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2110      	movs	r1, #16
 800276e:	438a      	bics	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	193b      	adds	r3, r7, r4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277a:	f383 8810 	msr	PRIMASK, r3
}
 800277e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002786:	183b      	adds	r3, r7, r0
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0011      	movs	r1, r2
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f860 	bl	8002854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002794:	e044      	b.n	8002820 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002796:	23a4      	movs	r3, #164	@ 0xa4
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	035b      	lsls	r3, r3, #13
 80027a0:	4013      	ands	r3, r2
 80027a2:	d010      	beq.n	80027c6 <HAL_UART_IRQHandler+0x552>
 80027a4:	239c      	movs	r3, #156	@ 0x9c
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	03db      	lsls	r3, r3, #15
 80027ae:	4013      	ands	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	0352      	lsls	r2, r2, #13
 80027ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 fe88 	bl	80034d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027c4:	e02f      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027c6:	23a4      	movs	r3, #164	@ 0xa4
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2280      	movs	r2, #128	@ 0x80
 80027ce:	4013      	ands	r3, r2
 80027d0:	d00f      	beq.n	80027f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027d2:	23a0      	movs	r3, #160	@ 0xa0
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	4013      	ands	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01e      	beq.n	8002824 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	0010      	movs	r0, r2
 80027ee:	4798      	blx	r3
    }
    return;
 80027f0:	e018      	b.n	8002824 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027f2:	23a4      	movs	r3, #164	@ 0xa4
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2240      	movs	r2, #64	@ 0x40
 80027fa:	4013      	ands	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_UART_IRQHandler+0x5b2>
 80027fe:	23a0      	movs	r3, #160	@ 0xa0
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2240      	movs	r2, #64	@ 0x40
 8002806:	4013      	ands	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fc7e 	bl	800310e <UART_EndTransmit_IT>
    return;
 8002812:	e008      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	e006      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	e004      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
      return;
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	e002      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	e000      	b.n	8002826 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002824:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002826:	46bd      	mov	sp, r7
 8002828:	b02b      	add	sp, #172	@ 0xac
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	fffffeff 	.word	0xfffffeff
 8002830:	fffffedf 	.word	0xfffffedf

08002834 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	000a      	movs	r2, r1
 800285e:	1cbb      	adds	r3, r7, #2
 8002860:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002874:	231e      	movs	r3, #30
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a8d      	ldr	r2, [pc, #564]	@ (8002ad0 <UART_SetConfig+0x264>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a88      	ldr	r2, [pc, #544]	@ (8002ad4 <UART_SetConfig+0x268>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad8 <UART_SetConfig+0x26c>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7b      	ldr	r2, [pc, #492]	@ (8002adc <UART_SetConfig+0x270>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d127      	bne.n	8002942 <UART_SetConfig+0xd6>
 80028f2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae0 <UART_SetConfig+0x274>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	2203      	movs	r2, #3
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d00d      	beq.n	800291a <UART_SetConfig+0xae>
 80028fe:	d81b      	bhi.n	8002938 <UART_SetConfig+0xcc>
 8002900:	2b02      	cmp	r3, #2
 8002902:	d014      	beq.n	800292e <UART_SetConfig+0xc2>
 8002904:	d818      	bhi.n	8002938 <UART_SetConfig+0xcc>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <UART_SetConfig+0xa4>
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00a      	beq.n	8002924 <UART_SetConfig+0xb8>
 800290e:	e013      	b.n	8002938 <UART_SetConfig+0xcc>
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e021      	b.n	800295e <UART_SetConfig+0xf2>
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e01c      	b.n	800295e <UART_SetConfig+0xf2>
 8002924:	231f      	movs	r3, #31
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2204      	movs	r2, #4
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e017      	b.n	800295e <UART_SetConfig+0xf2>
 800292e:	231f      	movs	r3, #31
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2208      	movs	r2, #8
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e012      	b.n	800295e <UART_SetConfig+0xf2>
 8002938:	231f      	movs	r3, #31
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2210      	movs	r2, #16
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e00d      	b.n	800295e <UART_SetConfig+0xf2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a67      	ldr	r2, [pc, #412]	@ (8002ae4 <UART_SetConfig+0x278>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d104      	bne.n	8002956 <UART_SetConfig+0xea>
 800294c:	231f      	movs	r3, #31
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e003      	b.n	800295e <UART_SetConfig+0xf2>
 8002956:	231f      	movs	r3, #31
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2210      	movs	r2, #16
 800295c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	429a      	cmp	r2, r3
 8002968:	d15c      	bne.n	8002a24 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800296a:	231f      	movs	r3, #31
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d015      	beq.n	80029a0 <UART_SetConfig+0x134>
 8002974:	dc18      	bgt.n	80029a8 <UART_SetConfig+0x13c>
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00d      	beq.n	8002996 <UART_SetConfig+0x12a>
 800297a:	dc15      	bgt.n	80029a8 <UART_SetConfig+0x13c>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <UART_SetConfig+0x11a>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d005      	beq.n	8002990 <UART_SetConfig+0x124>
 8002984:	e010      	b.n	80029a8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002986:	f7ff fb15 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 800298a:	0003      	movs	r3, r0
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e012      	b.n	80029b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002990:	4b55      	ldr	r3, [pc, #340]	@ (8002ae8 <UART_SetConfig+0x27c>)
 8002992:	61bb      	str	r3, [r7, #24]
        break;
 8002994:	e00f      	b.n	80029b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002996:	f7ff fa91 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        break;
 800299e:	e00a      	b.n	80029b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	61bb      	str	r3, [r7, #24]
        break;
 80029a6:	e006      	b.n	80029b6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029ac:	231e      	movs	r3, #30
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
        break;
 80029b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d100      	bne.n	80029be <UART_SetConfig+0x152>
 80029bc:	e07a      	b.n	8002ab4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	005a      	lsls	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	18d2      	adds	r2, r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0019      	movs	r1, r3
 80029d0:	0010      	movs	r0, r2
 80029d2:	f7fd fb99 	bl	8000108 <__udivsi3>
 80029d6:	0003      	movs	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d91c      	bls.n	8002a1a <UART_SetConfig+0x1ae>
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	025b      	lsls	r3, r3, #9
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d217      	bcs.n	8002a1a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	200e      	movs	r0, #14
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	210f      	movs	r1, #15
 80029f4:	438a      	bics	r2, r1
 80029f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	b299      	uxth	r1, r3
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	183a      	adds	r2, r7, r0
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	183a      	adds	r2, r7, r0
 8002a14:	8812      	ldrh	r2, [r2, #0]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e04c      	b.n	8002ab4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1a:	231e      	movs	r3, #30
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e047      	b.n	8002ab4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a24:	231f      	movs	r3, #31
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d015      	beq.n	8002a5a <UART_SetConfig+0x1ee>
 8002a2e:	dc18      	bgt.n	8002a62 <UART_SetConfig+0x1f6>
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00d      	beq.n	8002a50 <UART_SetConfig+0x1e4>
 8002a34:	dc15      	bgt.n	8002a62 <UART_SetConfig+0x1f6>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <UART_SetConfig+0x1d4>
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d005      	beq.n	8002a4a <UART_SetConfig+0x1de>
 8002a3e:	e010      	b.n	8002a62 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff fab8 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
        break;
 8002a48:	e012      	b.n	8002a70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <UART_SetConfig+0x27c>)
 8002a4c:	61bb      	str	r3, [r7, #24]
        break;
 8002a4e:	e00f      	b.n	8002a70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a50:	f7ff fa34 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e00a      	b.n	8002a70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	61bb      	str	r3, [r7, #24]
        break;
 8002a60:	e006      	b.n	8002a70 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a66:	231e      	movs	r3, #30
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
        break;
 8002a6e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01e      	beq.n	8002ab4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	085a      	lsrs	r2, r3, #1
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	18d2      	adds	r2, r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0019      	movs	r1, r3
 8002a86:	0010      	movs	r0, r2
 8002a88:	f7fd fb3e 	bl	8000108 <__udivsi3>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	d90a      	bls.n	8002aac <UART_SetConfig+0x240>
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d205      	bcs.n	8002aac <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	e003      	b.n	8002ab4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002aac:	231e      	movs	r3, #30
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ac0:	231e      	movs	r3, #30
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b008      	add	sp, #32
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	efff69f3 	.word	0xefff69f3
 8002ad4:	ffffcfff 	.word	0xffffcfff
 8002ad8:	fffff4ff 	.word	0xfffff4ff
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40004400 	.word	0x40004400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	2208      	movs	r2, #8
 8002afa:	4013      	ands	r3, r2
 8002afc:	d00b      	beq.n	8002b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a4a      	ldr	r2, [pc, #296]	@ (8002c30 <UART_AdvFeatureConfig+0x144>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d00b      	beq.n	8002b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a43      	ldr	r2, [pc, #268]	@ (8002c34 <UART_AdvFeatureConfig+0x148>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d00b      	beq.n	8002b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a3b      	ldr	r2, [pc, #236]	@ (8002c38 <UART_AdvFeatureConfig+0x14c>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a34      	ldr	r2, [pc, #208]	@ (8002c3c <UART_AdvFeatureConfig+0x150>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	2210      	movs	r2, #16
 8002b82:	4013      	ands	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c40 <UART_AdvFeatureConfig+0x154>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a25      	ldr	r2, [pc, #148]	@ (8002c44 <UART_AdvFeatureConfig+0x158>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	2240      	movs	r2, #64	@ 0x40
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <UART_AdvFeatureConfig+0x15c>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	035b      	lsls	r3, r3, #13
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10b      	bne.n	8002c06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <UART_AdvFeatureConfig+0x160>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a0e      	ldr	r2, [pc, #56]	@ (8002c50 <UART_AdvFeatureConfig+0x164>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
  }
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	ffff7fff 	.word	0xffff7fff
 8002c34:	fffdffff 	.word	0xfffdffff
 8002c38:	fffeffff 	.word	0xfffeffff
 8002c3c:	fffbffff 	.word	0xfffbffff
 8002c40:	ffffefff 	.word	0xffffefff
 8002c44:	ffffdfff 	.word	0xffffdfff
 8002c48:	ffefffff 	.word	0xffefffff
 8002c4c:	ff9fffff 	.word	0xff9fffff
 8002c50:	fff7ffff 	.word	0xfff7ffff

08002c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b092      	sub	sp, #72	@ 0x48
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2284      	movs	r2, #132	@ 0x84
 8002c60:	2100      	movs	r1, #0
 8002c62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c64:	f7fd ff40 	bl	8000ae8 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2208      	movs	r2, #8
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d12c      	bne.n	8002cd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7c:	2280      	movs	r2, #128	@ 0x80
 8002c7e:	0391      	lsls	r1, r2, #14
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <UART_CheckIdleState+0x148>)
 8002c84:	9200      	str	r2, [sp, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f000 f88c 	bl	8002da4 <UART_WaitOnFlagUntilTimeout>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d021      	beq.n	8002cd4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c90:	f3ef 8310 	mrs	r3, PRIMASK
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2180      	movs	r1, #128	@ 0x80
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2278      	movs	r2, #120	@ 0x78
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e05f      	b.n	8002d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d146      	bne.n	8002d70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	03d1      	lsls	r1, r2, #15
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4a2c      	ldr	r2, [pc, #176]	@ (8002d9c <UART_CheckIdleState+0x148>)
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f000 f858 	bl	8002da4 <UART_WaitOnFlagUntilTimeout>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d03b      	beq.n	8002d70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d02:	2301      	movs	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4921      	ldr	r1, [pc, #132]	@ (8002da0 <UART_CheckIdleState+0x14c>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d34:	2301      	movs	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f383 8810 	msr	PRIMASK, r3
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2280      	movs	r2, #128	@ 0x80
 8002d60:	2120      	movs	r1, #32
 8002d62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2278      	movs	r2, #120	@ 0x78
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e011      	b.n	8002d94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2280      	movs	r2, #128	@ 0x80
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2278      	movs	r2, #120	@ 0x78
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b010      	add	sp, #64	@ 0x40
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	01ffffff 	.word	0x01ffffff
 8002da0:	fffffedf 	.word	0xfffffedf

08002da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db4:	e051      	b.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	d04e      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fd fe94 	bl	8000ae8 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e051      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4013      	ands	r3, r2
 8002de0:	d03b      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b80      	cmp	r3, #128	@ 0x80
 8002de6:	d038      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b40      	cmp	r3, #64	@ 0x40
 8002dec:	d035      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2208      	movs	r2, #8
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d111      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f906 	bl	8003018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2284      	movs	r2, #132	@ 0x84
 8002e10:	2108      	movs	r1, #8
 8002e12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2278      	movs	r2, #120	@ 0x78
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e02c      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d112      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 f8e9 	bl	8003018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2284      	movs	r2, #132	@ 0x84
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2278      	movs	r2, #120	@ 0x78
 8002e52:	2100      	movs	r1, #0
 8002e54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e00f      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	425a      	negs	r2, r3
 8002e6a:	4153      	adcs	r3, r2
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	001a      	movs	r2, r3
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d09e      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b090      	sub	sp, #64	@ 0x40
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	1dbb      	adds	r3, r7, #6
 8002e90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1dba      	adds	r2, r7, #6
 8002e9c:	2158      	movs	r1, #88	@ 0x58
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1dba      	adds	r2, r7, #6
 8002ea6:	215a      	movs	r1, #90	@ 0x5a
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	015b      	lsls	r3, r3, #5
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10d      	bne.n	8002eda <UART_Start_Receive_IT+0x56>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <UART_Start_Receive_IT+0x4c>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	225c      	movs	r2, #92	@ 0x5c
 8002eca:	4950      	ldr	r1, [pc, #320]	@ (800300c <UART_Start_Receive_IT+0x188>)
 8002ecc:	5299      	strh	r1, [r3, r2]
 8002ece:	e02e      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	225c      	movs	r2, #92	@ 0x5c
 8002ed4:	21ff      	movs	r1, #255	@ 0xff
 8002ed6:	5299      	strh	r1, [r3, r2]
 8002ed8:	e029      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <UART_Start_Receive_IT+0x7a>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <UART_Start_Receive_IT+0x70>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	225c      	movs	r2, #92	@ 0x5c
 8002eee:	21ff      	movs	r1, #255	@ 0xff
 8002ef0:	5299      	strh	r1, [r3, r2]
 8002ef2:	e01c      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	225c      	movs	r2, #92	@ 0x5c
 8002ef8:	217f      	movs	r1, #127	@ 0x7f
 8002efa:	5299      	strh	r1, [r3, r2]
 8002efc:	e017      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	055b      	lsls	r3, r3, #21
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10d      	bne.n	8002f26 <UART_Start_Receive_IT+0xa2>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <UART_Start_Receive_IT+0x98>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	225c      	movs	r2, #92	@ 0x5c
 8002f16:	217f      	movs	r1, #127	@ 0x7f
 8002f18:	5299      	strh	r1, [r3, r2]
 8002f1a:	e008      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	225c      	movs	r2, #92	@ 0x5c
 8002f20:	213f      	movs	r1, #63	@ 0x3f
 8002f22:	5299      	strh	r1, [r3, r2]
 8002f24:	e003      	b.n	8002f2e <UART_Start_Receive_IT+0xaa>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	225c      	movs	r2, #92	@ 0x5c
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2284      	movs	r2, #132	@ 0x84
 8002f32:	2100      	movs	r1, #0
 8002f34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	2122      	movs	r1, #34	@ 0x22
 8002f3c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f48:	2301      	movs	r3, #1
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	015b      	lsls	r3, r3, #5
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <UART_Start_Receive_IT+0x108>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <UART_Start_Receive_IT+0x18c>)
 8002f88:	669a      	str	r2, [r3, #104]	@ 0x68
 8002f8a:	e002      	b.n	8002f92 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <UART_Start_Receive_IT+0x190>)
 8002f90:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2190      	movs	r1, #144	@ 0x90
 8002fbc:	0049      	lsls	r1, r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	e018      	b.n	8003000 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fd8:	2301      	movs	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2120      	movs	r1, #32
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b010      	add	sp, #64	@ 0x40
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	000001ff 	.word	0x000001ff
 8003010:	0800331d 	.word	0x0800331d
 8003014:	08003165 	.word	0x08003165

08003018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	@ 0x38
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003020:	f3ef 8310 	mrs	r3, PRIMASK
 8003024:	617b      	str	r3, [r7, #20]
  return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4926      	ldr	r1, [pc, #152]	@ (80030dc <UART_EndRxTransfer+0xc4>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	623b      	str	r3, [r7, #32]
  return(result);
 8003058:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	633b      	str	r3, [r7, #48]	@ 0x30
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003088:	2b01      	cmp	r3, #1
 800308a:	d118      	bne.n	80030be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	60bb      	str	r3, [r7, #8]
  return(result);
 8003092:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2110      	movs	r1, #16
 80030ae:	438a      	bics	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	2120      	movs	r1, #32
 80030c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b00e      	add	sp, #56	@ 0x38
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	fffffedf 	.word	0xfffffedf

080030e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	225a      	movs	r2, #90	@ 0x5a
 80030f2:	2100      	movs	r1, #0
 80030f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2252      	movs	r2, #82	@ 0x52
 80030fa:	2100      	movs	r1, #0
 80030fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff fb9f 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}

0800310e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003116:	f3ef 8310 	mrs	r3, PRIMASK
 800311a:	60bb      	str	r3, [r7, #8]
  return(result);
 800311c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	2301      	movs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2140      	movs	r1, #64	@ 0x40
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff fb6c 	bl	8002834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b006      	add	sp, #24
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b094      	sub	sp, #80	@ 0x50
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800316c:	204e      	movs	r0, #78	@ 0x4e
 800316e:	183b      	adds	r3, r7, r0
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	215c      	movs	r1, #92	@ 0x5c
 8003174:	5a52      	ldrh	r2, [r2, r1]
 8003176:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	589b      	ldr	r3, [r3, r2]
 800317e:	2b22      	cmp	r3, #34	@ 0x22
 8003180:	d000      	beq.n	8003184 <UART_RxISR_8BIT+0x20>
 8003182:	e0ba      	b.n	80032fa <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	214c      	movs	r1, #76	@ 0x4c
 800318a:	187b      	adds	r3, r7, r1
 800318c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800318e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003190:	187b      	adds	r3, r7, r1
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	183b      	adds	r3, r7, r0
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	400a      	ands	r2, r1
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	225a      	movs	r2, #90	@ 0x5a
 80031b4:	5a9b      	ldrh	r3, [r3, r2]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b299      	uxth	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	225a      	movs	r2, #90	@ 0x5a
 80031c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	225a      	movs	r2, #90	@ 0x5a
 80031c6:	5a9b      	ldrh	r3, [r3, r2]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d000      	beq.n	80031d0 <UART_RxISR_8BIT+0x6c>
 80031ce:	e09c      	b.n	800330a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d0:	f3ef 8310 	mrs	r3, PRIMASK
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031da:	2301      	movs	r3, #1
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4948      	ldr	r1, [pc, #288]	@ (8003314 <UART_RxISR_8BIT+0x1b0>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	647b      	str	r3, [r7, #68]	@ 0x44
 800320c:	2301      	movs	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	2120      	movs	r1, #32
 800323a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4013      	ands	r3, r2
 8003254:	d018      	beq.n	8003288 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003256:	f3ef 8310 	mrs	r3, PRIMASK
 800325a:	61bb      	str	r3, [r7, #24]
  return(result);
 800325c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800325e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003260:	2301      	movs	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4928      	ldr	r1, [pc, #160]	@ (8003318 <UART_RxISR_8BIT+0x1b4>)
 8003278:	400a      	ands	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328c:	2b01      	cmp	r3, #1
 800328e:	d12f      	bne.n	80032f0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003296:	f3ef 8310 	mrs	r3, PRIMASK
 800329a:	60fb      	str	r3, [r7, #12]
  return(result);
 800329c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2110      	movs	r1, #16
 80032b8:	438a      	bics	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	2210      	movs	r2, #16
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d103      	bne.n	80032de <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2210      	movs	r2, #16
 80032dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2258      	movs	r2, #88	@ 0x58
 80032e2:	5a9a      	ldrh	r2, [r3, r2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fab3 	bl	8002854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032ee:	e00c      	b.n	800330a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd f896 	bl	8000424 <HAL_UART_RxCpltCallback>
}
 80032f8:	e007      	b.n	800330a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2108      	movs	r1, #8
 8003306:	430a      	orrs	r2, r1
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b014      	add	sp, #80	@ 0x50
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	fffffedf 	.word	0xfffffedf
 8003318:	fbffffff 	.word	0xfbffffff

0800331c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b094      	sub	sp, #80	@ 0x50
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003324:	204e      	movs	r0, #78	@ 0x4e
 8003326:	183b      	adds	r3, r7, r0
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	215c      	movs	r1, #92	@ 0x5c
 800332c:	5a52      	ldrh	r2, [r2, r1]
 800332e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	589b      	ldr	r3, [r3, r2]
 8003336:	2b22      	cmp	r3, #34	@ 0x22
 8003338:	d000      	beq.n	800333c <UART_RxISR_16BIT+0x20>
 800333a:	e0ba      	b.n	80034b2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	214c      	movs	r1, #76	@ 0x4c
 8003342:	187b      	adds	r3, r7, r1
 8003344:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003346:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800334e:	187b      	adds	r3, r7, r1
 8003350:	183a      	adds	r2, r7, r0
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	4013      	ands	r3, r2
 8003358:	b29a      	uxth	r2, r3
 800335a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800335c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	225a      	movs	r2, #90	@ 0x5a
 800336c:	5a9b      	ldrh	r3, [r3, r2]
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b299      	uxth	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	225a      	movs	r2, #90	@ 0x5a
 8003378:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	225a      	movs	r2, #90	@ 0x5a
 800337e:	5a9b      	ldrh	r3, [r3, r2]
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d000      	beq.n	8003388 <UART_RxISR_16BIT+0x6c>
 8003386:	e09c      	b.n	80034c2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	623b      	str	r3, [r7, #32]
  return(result);
 800338e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
 8003392:	2301      	movs	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4948      	ldr	r1, [pc, #288]	@ (80034cc <UART_RxISR_16BIT+0x1b0>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ba:	f3ef 8310 	mrs	r3, PRIMASK
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80033c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80033c4:	2301      	movs	r3, #1
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2280      	movs	r2, #128	@ 0x80
 80033f0:	2120      	movs	r1, #32
 80033f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	2380      	movs	r3, #128	@ 0x80
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	4013      	ands	r3, r2
 800340c:	d018      	beq.n	8003440 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	617b      	str	r3, [r7, #20]
  return(result);
 8003414:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003418:	2301      	movs	r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4928      	ldr	r1, [pc, #160]	@ (80034d0 <UART_RxISR_16BIT+0x1b4>)
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	2b01      	cmp	r3, #1
 8003446:	d12f      	bne.n	80034a8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	60bb      	str	r3, [r7, #8]
  return(result);
 8003454:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2110      	movs	r1, #16
 8003470:	438a      	bics	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2210      	movs	r2, #16
 8003488:	4013      	ands	r3, r2
 800348a:	2b10      	cmp	r3, #16
 800348c:	d103      	bne.n	8003496 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2258      	movs	r2, #88	@ 0x58
 800349a:	5a9a      	ldrh	r2, [r3, r2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff f9d7 	bl	8002854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034a6:	e00c      	b.n	80034c2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fc ffba 	bl	8000424 <HAL_UART_RxCpltCallback>
}
 80034b0:	e007      	b.n	80034c2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2108      	movs	r1, #8
 80034be:	430a      	orrs	r2, r1
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b014      	add	sp, #80	@ 0x50
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	fffffedf 	.word	0xfffffedf
 80034d0:	fbffffff 	.word	0xfbffffff

080034d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <memset>:
 80034e4:	0003      	movs	r3, r0
 80034e6:	1882      	adds	r2, r0, r2
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	2600      	movs	r6, #0
 80034f8:	4c0c      	ldr	r4, [pc, #48]	@ (800352c <__libc_init_array+0x38>)
 80034fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003530 <__libc_init_array+0x3c>)
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	42a6      	cmp	r6, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	2600      	movs	r6, #0
 8003506:	f000 f823 	bl	8003550 <_init>
 800350a:	4c0a      	ldr	r4, [pc, #40]	@ (8003534 <__libc_init_array+0x40>)
 800350c:	4d0a      	ldr	r5, [pc, #40]	@ (8003538 <__libc_init_array+0x44>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	42a6      	cmp	r6, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	00b3      	lsls	r3, r6, #2
 800351a:	58eb      	ldr	r3, [r5, r3]
 800351c:	4798      	blx	r3
 800351e:	3601      	adds	r6, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	00b3      	lsls	r3, r6, #2
 8003524:	58eb      	ldr	r3, [r5, r3]
 8003526:	4798      	blx	r3
 8003528:	3601      	adds	r6, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	08003610 	.word	0x08003610
 8003530:	08003610 	.word	0x08003610
 8003534:	08003614 	.word	0x08003614
 8003538:	08003610 	.word	0x08003610

0800353c <memcpy>:
 800353c:	2300      	movs	r3, #0
 800353e:	b510      	push	{r4, lr}
 8003540:	429a      	cmp	r2, r3
 8003542:	d100      	bne.n	8003546 <memcpy+0xa>
 8003544:	bd10      	pop	{r4, pc}
 8003546:	5ccc      	ldrb	r4, [r1, r3]
 8003548:	54c4      	strb	r4, [r0, r3]
 800354a:	3301      	adds	r3, #1
 800354c:	e7f8      	b.n	8003540 <memcpy+0x4>
	...

08003550 <_init>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr

0800355c <_fini>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr


lora_stm_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007104  08007104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007198  08007198  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007198  08007198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a0  080071a0  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a0  080071a0  000081a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071a4  080071a4  000081a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080071a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000006c  08007214  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007214  0000945c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012de2  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291e  00000000  00000000  0001be7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4b  00000000  00000000  0001f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f56  00000000  00000000  000203eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011797  00000000  00000000  00049341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff7ba  00000000  00000000  0005aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  0015a2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015edd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070ec 	.word	0x080070ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080070ec 	.word	0x080070ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <toggle_LED>:
    // Buffer to hold the command plus the required "\r\n"
	HAL_UART_Transmit(&huart1, (uint8_t*)hex_cmd, len, 100);
}


void toggle_LED() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005a0:	2120      	movs	r1, #32
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a6:	f002 fee5 	bl	8003374 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	@ 0x64
 80005ac:	f000 feb8 	bl	8001320 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005b0:	2120      	movs	r1, #32
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b6:	f002 fedd 	bl	8003374 <HAL_GPIO_TogglePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <HAL_UART_RxCpltCallback>:
*/

// interrupt response for uart1 - receive from lora
//						  uart2 - receive from computer
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART1) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <HAL_UART_RxCpltCallback+0x94>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d132      	bne.n	8000638 <HAL_UART_RxCpltCallback+0x78>
    	// once lora sends it, want to store and send to computer
    	// only receiving 1 byte at a time

		// if ends with \n, then message complete
		if (received_byte == '\n') {
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <HAL_UART_RxCpltCallback+0x98>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	d107      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x2a>
			message_received_flag = 1;
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <HAL_UART_RxCpltCallback+0x9c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
			indx++;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 80005e8:	6013      	str	r3, [r2, #0]
		}
		// if not complete message or not max length, store it
		if (indx < (MAX_MESSAGE_LENGTH - 1) && message_received_flag == 0) { // Leave 1 byte for null terminator
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <HAL_UART_RxCpltCallback+0xa4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dd0f      	ble.n	8000618 <HAL_UART_RxCpltCallback+0x58>
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <HAL_UART_RxCpltCallback+0x9c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10b      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x58>
			RxData[indx] = received_byte;
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <HAL_UART_RxCpltCallback+0x98>)
 8000606:	7811      	ldrb	r1, [r2, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <HAL_UART_RxCpltCallback+0xa8>)
 800060a:	54d1      	strb	r1, [r2, r3]
			indx++;
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e009      	b.n	800062c <HAL_UART_RxCpltCallback+0x6c>
		}
		else if (indx >= (MAX_MESSAGE_LENGTH - 1)) {
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <HAL_UART_RxCpltCallback+0xa4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1e5a      	subs	r2, r3, #1
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	dc02      	bgt.n	800062c <HAL_UART_RxCpltCallback+0x6c>
			// Buffer overflow occurred before newline, treat as error/reset
			indx = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <HAL_UART_RxCpltCallback+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
		/*
		message_received_flag = 1;
		RxData[indx] = received_byte;
		indx++;
		*/
		HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	490a      	ldr	r1, [pc, #40]	@ (8000658 <HAL_UART_RxCpltCallback+0x98>)
 8000630:	480e      	ldr	r0, [pc, #56]	@ (800066c <HAL_UART_RxCpltCallback+0xac>)
 8000632:	f004 fab1 	bl	8004b98 <HAL_UART_Receive_IT>
    else if (huart->Instance == USART2) {
        // dunno what to do yet
        HAL_UART_Receive_IT(&huart2, &received_byte2, 1); // re-enable interrupt
    }

}
 8000636:	e009      	b.n	800064c <HAL_UART_RxCpltCallback+0x8c>
    else if (huart->Instance == USART2) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <HAL_UART_RxCpltCallback+0xb0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d104      	bne.n	800064c <HAL_UART_RxCpltCallback+0x8c>
        HAL_UART_Receive_IT(&huart2, &received_byte2, 1); // re-enable interrupt
 8000642:	2201      	movs	r2, #1
 8000644:	490b      	ldr	r1, [pc, #44]	@ (8000674 <HAL_UART_RxCpltCallback+0xb4>)
 8000646:	480c      	ldr	r0, [pc, #48]	@ (8000678 <HAL_UART_RxCpltCallback+0xb8>)
 8000648:	f004 faa6 	bl	8004b98 <HAL_UART_Receive_IT>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013800 	.word	0x40013800
 8000658:	20000300 	.word	0x20000300
 800065c:	200002d4 	.word	0x200002d4
 8000660:	200002d0 	.word	0x200002d0
 8000664:	20000000 	.word	0x20000000
 8000668:	200002ec 	.word	0x200002ec
 800066c:	200001c0 	.word	0x200001c0
 8000670:	40004400 	.word	0x40004400
 8000674:	20000301 	.word	0x20000301
 8000678:	20000248 	.word	0x20000248

0800067c <_write>:


int _write(int file, char *ptr, int len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b29a      	uxth	r2, r3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000690:	68b9      	ldr	r1, [r7, #8]
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <_write+0x28>)
 8000694:	f004 f9f6 	bl	8004a84 <HAL_UART_Transmit>
  return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000248 	.word	0x20000248

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fdbc 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f84e 	bl	8000750 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b4:	f000 f89d 	bl	80007f2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fa52 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 80006bc:	f000 fa32 	bl	8000b24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c0:	f000 fa00 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006c4:	f000 f8c0 	bl	8000848 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006c8:	f000 f934 	bl	8000934 <MX_ADC2_Init>
  MX_CAN1_Init();
 80006cc:	f000 f996 	bl	80009fc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80006d0:	f000 f9c8 	bl	8000a64 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  // interrupt initialization
  HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	4914      	ldr	r1, [pc, #80]	@ (8000728 <main+0x80>)
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <main+0x84>)
 80006da:	f004 fa5d 	bl	8004b98 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &received_byte2, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	4913      	ldr	r1, [pc, #76]	@ (8000730 <main+0x88>)
 80006e2:	4814      	ldr	r0, [pc, #80]	@ (8000734 <main+0x8c>)
 80006e4:	f004 fa58 	bl	8004b98 <HAL_UART_Receive_IT>

  // test printing to serial
  printf("Hello STM32!\r\n");
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <main+0x90>)
 80006ea:	f005 fe91 	bl	8006410 <puts>
	  /*
	  uint8_t aba[5] = {0x68, 0x69, 0x0D, 0x0A, 0x00};
	  printf("%s", aba);
	   */

	  if (message_received_flag) {
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <main+0x94>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0fb      	beq.n	80006ee <main+0x46>
		// indx holds the number of bytes received (up to, but not including, the '\n')
		memcpy(FinalData, RxData, indx);
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <main+0x98>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4911      	ldr	r1, [pc, #68]	@ (8000744 <main+0x9c>)
 80006fe:	4812      	ldr	r0, [pc, #72]	@ (8000748 <main+0xa0>)
 8000700:	f005 fec3 	bl	800648a <memcpy>

		// send to serial
		FinalData[indx] = 0x00;		// need null-termination to print without looping
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <main+0x98>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <main+0xa0>)
 800070a:	2100      	movs	r1, #0
 800070c:	54d1      	strb	r1, [r2, r3]
		printf("%s\r\n",FinalData);
 800070e:	490e      	ldr	r1, [pc, #56]	@ (8000748 <main+0xa0>)
 8000710:	480e      	ldr	r0, [pc, #56]	@ (800074c <main+0xa4>)
 8000712:	f005 fe15 	bl	8006340 <iprintf>
			printf("%c",FinalData[i]);
		}
		*/

		// Toggle the LED to signal received
		toggle_LED();
 8000716:	f7ff ff41 	bl	800059c <toggle_LED>

		// clear the flag and reset index
		message_received_flag = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <main+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
		indx = 0;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <main+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
	  if (message_received_flag) {
 8000726:	e7e2      	b.n	80006ee <main+0x46>
 8000728:	20000300 	.word	0x20000300
 800072c:	200001c0 	.word	0x200001c0
 8000730:	20000301 	.word	0x20000301
 8000734:	20000248 	.word	0x20000248
 8000738:	08007104 	.word	0x08007104
 800073c:	200002d4 	.word	0x200002d4
 8000740:	200002d0 	.word	0x200002d0
 8000744:	200002ec 	.word	0x200002ec
 8000748:	200002d8 	.word	0x200002d8
 800074c:	08007114 	.word	0x08007114

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	@ 0x58
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2244      	movs	r2, #68	@ 0x44
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f005 fe5e 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000772:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000776:	f002 fe25 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000780:	f000 fa54 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079e:	230a      	movs	r3, #10
 80007a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a2:	2307      	movs	r3, #7
 80007a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fe5c 	bl	8003470 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007be:	f000 fa35 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fa24 	bl	8003c28 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 fa21 	bl	8000c2c <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	@ 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b0a2      	sub	sp, #136	@ 0x88
 80007f6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2288      	movs	r2, #136	@ 0x88
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fe0e 	bl	8006420 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000804:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000808:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800080a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800080e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000818:	2308      	movs	r3, #8
 800081a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800081c:	2307      	movs	r3, #7
 800081e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800082c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fc1d 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800083c:	f000 f9f6 	bl	8000c2c <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3788      	adds	r7, #136	@ 0x88
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800086a:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <MX_ADC1_Init+0xe0>)
 800086c:	4a2f      	ldr	r2, [pc, #188]	@ (800092c <MX_ADC1_Init+0xe4>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087c:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_ADC1_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <MX_ADC1_Init+0xe0>)
 800088a:	2204      	movs	r2, #4
 800088c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_ADC1_Init+0xe0>)
 800089c:	2201      	movs	r2, #1
 800089e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ca:	4817      	ldr	r0, [pc, #92]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008cc:	f000 ff1a 	bl	8001704 <HAL_ADC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008d6:	f000 f9a9 	bl	8000c2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	@ (8000928 <MX_ADC1_Init+0xe0>)
 80008e6:	f001 fedf 	bl	80026a8 <HAL_ADCEx_MultiModeConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008f0:	f000 f99c 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_ADC1_Init+0xe8>)
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2306      	movs	r3, #6
 80008fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000900:	237f      	movs	r3, #127	@ 0x7f
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_ADC1_Init+0xe0>)
 8000912:	f001 fa7f 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800091c:	f000 f986 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	@ 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000088 	.word	0x20000088
 800092c:	50040000 	.word	0x50040000
 8000930:	2e300800 	.word	0x2e300800

08000934 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800094c:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000950:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800096a:	2204      	movs	r2, #4
 800096c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800097c:	2201      	movs	r2, #1
 800097e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 80009ac:	f000 feaa 	bl	8001704 <HAL_ADC_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80009b6:	f000 f939 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_ADC2_Init+0xc4>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009be:	2306      	movs	r3, #6
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c6:	237f      	movs	r3, #127	@ 0x7f
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_ADC2_Init+0xbc>)
 80009d8:	f001 fa1c 	bl	8001e14 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f000 f923 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000ec 	.word	0x200000ec
 80009f4:	50040100 	.word	0x50040100
 80009f8:	32601000 	.word	0x32601000

080009fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <MX_CAN1_Init+0x64>)
 8000a04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 116;
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a08:	2274      	movs	r2, #116	@ 0x74
 8000a0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_CAN1_Init+0x60>)
 8000a4a:	f001 fedd 	bl	8002808 <HAL_CAN_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f8ea 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000198 	.word	0x20000198
 8000a60:	40006400 	.word	0x40006400

08000a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <MX_USART1_UART_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART1_UART_Init+0x58>)
 8000aa8:	f003 ff9e 	bl	80049e8 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 f8bb 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001c0 	.word	0x200001c0
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_USART2_UART_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART2_UART_Init+0x58>)
 8000b08:	f003 ff6e 	bl	80049e8 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f88b 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000248 	.word	0x20000248
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_DMA_Init+0x38>)
 8000b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <MX_DMA_Init+0x38>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_DMA_Init+0x38>)
 8000b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	200b      	movs	r0, #11
 8000b48:	f002 f835 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b4c:	200b      	movs	r0, #11
 8000b4e:	f002 f84e 	bl	8002bee <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a24      	ldr	r2, [pc, #144]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a18      	ldr	r2, [pc, #96]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_GPIO_Init+0xc4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bde:	f002 fbb1 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <MX_GPIO_Init+0xc8>)
 8000bfa:	f002 f9f9 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f002 f9ea 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000800 	.word	0x48000800

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a51      	ldr	r2, [pc, #324]	@ (8000de4 <HAL_ADC_MspInit+0x164>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d161      	bne.n	8000d66 <HAL_ADC_MspInit+0xe6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ca2:	4b51      	ldr	r3, [pc, #324]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000caa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000cac:	4b4e      	ldr	r3, [pc, #312]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d10b      	bne.n	8000ccc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a46      	ldr	r2, [pc, #280]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b44      	ldr	r3, [pc, #272]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce4:	2340      	movs	r3, #64	@ 0x40
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f002 f979 	bl	8002ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d00:	4a3c      	ldr	r2, [pc, #240]	@ (8000df4 <HAL_ADC_MspInit+0x174>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d04:	4b3a      	ldr	r3, [pc, #232]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d10:	4b37      	ldr	r3, [pc, #220]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1c:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d24:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d38:	482d      	ldr	r0, [pc, #180]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d3a:	f001 ff73 	bl	8002c24 <HAL_DMA_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000d44:	f7ff ff72 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a29      	ldr	r2, [pc, #164]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d4e:	4a28      	ldr	r2, [pc, #160]	@ (8000df0 <HAL_ADC_MspInit+0x170>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2012      	movs	r0, #18
 8000d5a:	f001 ff2c 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d5e:	2012      	movs	r0, #18
 8000d60:	f001 ff45 	bl	8002bee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d64:	e03a      	b.n	8000ddc <HAL_ADC_MspInit+0x15c>
  else if(hadc->Instance==ADC2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a23      	ldr	r2, [pc, #140]	@ (8000df8 <HAL_ADC_MspInit+0x178>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d135      	bne.n	8000ddc <HAL_ADC_MspInit+0x15c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000d78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_ADC_MspInit+0x168>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000d88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a13      	ldr	r2, [pc, #76]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_ADC_MspInit+0x16c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000db6:	230b      	movs	r3, #11
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc8:	f002 f912 	bl	8002ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f001 fef0 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dd6:	2012      	movs	r0, #18
 8000dd8:	f001 ff09 	bl	8002bee <HAL_NVIC_EnableIRQ>
}
 8000ddc:	bf00      	nop
 8000dde:	3730      	adds	r7, #48	@ 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	50040000 	.word	0x50040000
 8000de8:	20000304 	.word	0x20000304
 8000dec:	40021000 	.word	0x40021000
 8000df0:	20000150 	.word	0x20000150
 8000df4:	40020008 	.word	0x40020008
 8000df8:	50040100 	.word	0x50040100

08000dfc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <HAL_CAN_MspInit+0x80>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d129      	bne.n	8000e72 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_CAN_MspInit+0x84>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e4e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e60:	2309      	movs	r3, #9
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6e:	f002 f8bf 	bl	8002ff0 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	@ 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40006400 	.word	0x40006400
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ae      	sub	sp, #184	@ 0xb8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2288      	movs	r2, #136	@ 0x88
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fabb 	bl	8006420 <memset>
  if(huart->Instance==USART1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_UART_MspInit+0x158>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d145      	bne.n	8000f40 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 f8d5 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ecc:	f7ff feae 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed0:	4b43      	ldr	r3, [pc, #268]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed4:	4a42      	ldr	r2, [pc, #264]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6613      	str	r3, [r2, #96]	@ 0x60
 8000edc:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	4a3c      	ldr	r2, [pc, #240]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2a:	f002 f861 	bl	8002ff0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2025      	movs	r0, #37	@ 0x25
 8000f34:	f001 fe3f 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f38:	2025      	movs	r0, #37	@ 0x25
 8000f3a:	f001 fe58 	bl	8002bee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3e:	e048      	b.n	8000fd2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <HAL_UART_MspInit+0x160>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d143      	bne.n	8000fd2 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f88a 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000f62:	f7ff fe63 	bl	8000c2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0x15c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f96:	230c      	movs	r3, #12
 8000f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbe:	f002 f817 	bl	8002ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2026      	movs	r0, #38	@ 0x26
 8000fc8:	f001 fdf5 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fcc:	2026      	movs	r0, #38	@ 0x26
 8000fce:	f001 fe0e 	bl	8002bee <HAL_NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	37b8      	adds	r7, #184	@ 0xb8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f94f 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Channel1_IRQHandler+0x10>)
 800104e:	f001 ff20 	bl	8002e92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000150 	.word	0x20000150

0800105c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <ADC1_2_IRQHandler+0x14>)
 8001062:	f000 fc9f 	bl	80019a4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <ADC1_2_IRQHandler+0x18>)
 8001068:	f000 fc9c 	bl	80019a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000088 	.word	0x20000088
 8001074:	200000ec 	.word	0x200000ec

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART1_IRQHandler+0x10>)
 800107e:	f003 fdd7 	bl	8004c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001c0 	.word	0x200001c0

0800108c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <USART2_IRQHandler+0x10>)
 8001092:	f003 fdcd 	bl	8004c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000248 	.word	0x20000248

080010a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
  }

  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:
  }
  return len;
}

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001102:	605a      	str	r2, [r3, #4]
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f005 f95c 	bl	8006430 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20018000 	.word	0x20018000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	20000308 	.word	0x20000308
 80011ac:	20000460 	.word	0x20000460

080011b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff ffea 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f005 f91b 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001206:	f7ff fa4f 	bl	80006a8 <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800120c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001218:	080071a8 	.word	0x080071a8
  ldr r2, =_sbss
 800121c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001220:	2000045c 	.word	0x2000045c

08001224 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC3_IRQHandler>
	...

08001228 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_Init+0x3c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_Init+0x3c>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f001 fcae 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001244:	2000      	movs	r0, #0
 8001246:	f000 f80f 	bl	8001268 <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	e001      	b.n	800125a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001256:	f7ff fcef 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125a:	79fb      	ldrb	r3, [r7, #7]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d023      	beq.n	80012c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x70>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fcb9 	bl	8002c0a <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d809      	bhi.n	80012b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	f001 fc83 	bl	8002bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_InitTick+0x74>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e004      	b.n	80012c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e001      	b.n	80012c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	2000030c 	.word	0x2000030c

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000030c 	.word	0x2000030c

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c

08001368 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	609a      	str	r2, [r3, #8]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3360      	adds	r3, #96	@ 0x60
 80013e2:	461a      	mov	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <LL_ADC_SetOffset+0x44>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	4313      	orrs	r3, r2
 8001400:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	03fff000 	.word	0x03fff000

08001418 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3360      	adds	r3, #96	@ 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3360      	adds	r3, #96	@ 0x60
 8001454:	461a      	mov	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	431a      	orrs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800146e:	bf00      	nop
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3330      	adds	r3, #48	@ 0x30
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	4413      	add	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	211f      	movs	r1, #31
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0e9b      	lsrs	r3, r3, #26
 80014d8:	f003 011f 	and.w	r1, r3, #31
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800151e:	b480      	push	{r7}
 8001520:	b087      	sub	sp, #28
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3314      	adds	r3, #20
 800152e:	461a      	mov	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	0e5b      	lsrs	r3, r3, #25
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	0d1b      	lsrs	r3, r3, #20
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2107      	movs	r1, #7
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	401a      	ands	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	0d1b      	lsrs	r3, r3, #20
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	431a      	orrs	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0318 	and.w	r3, r3, #24
 8001596:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001598:	40d9      	lsrs	r1, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	400b      	ands	r3, r1
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	0007ffff 	.word	0x0007ffff

080015bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 031f 	and.w	r3, r3, #31
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6093      	str	r3, [r2, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001654:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <LL_ADC_IsEnabled+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_ADC_IsEnabled+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d101      	bne.n	80016ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b089      	sub	sp, #36	@ 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e130      	b.n	8001980 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff faa7 	bl	8000c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff67 	bl	8001618 <LL_ADC_IsDeepPowerDownEnabled>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff4d 	bl	80015f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff82 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d115      	bne.n	8001796 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff66 	bl	8001640 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001774:	4b84      	ldr	r3, [pc, #528]	@ (8001988 <HAL_ADC_Init+0x284>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	4a84      	ldr	r2, [pc, #528]	@ (800198c <HAL_ADC_Init+0x288>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001788:	e002      	b.n	8001790 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff64 	bl	8001668 <LL_ADC_IsInternalRegulatorEnabled>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff75 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 80017cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 80c9 	bne.w	800196e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80c5 	bne.w	800196e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017ec:	f043 0202 	orr.w	r2, r3, #2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff49 	bl	8001690 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d115      	bne.n	8001830 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001804:	4862      	ldr	r0, [pc, #392]	@ (8001990 <HAL_ADC_Init+0x28c>)
 8001806:	f7ff ff43 	bl	8001690 <LL_ADC_IsEnabled>
 800180a:	4604      	mov	r4, r0
 800180c:	4861      	ldr	r0, [pc, #388]	@ (8001994 <HAL_ADC_Init+0x290>)
 800180e:	f7ff ff3f 	bl	8001690 <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	431c      	orrs	r4, r3
 8001816:	4860      	ldr	r0, [pc, #384]	@ (8001998 <HAL_ADC_Init+0x294>)
 8001818:	f7ff ff3a 	bl	8001690 <LL_ADC_IsEnabled>
 800181c:	4603      	mov	r3, r0
 800181e:	4323      	orrs	r3, r4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	485c      	ldr	r0, [pc, #368]	@ (800199c <HAL_ADC_Init+0x298>)
 800182c:	f7ff fd9c 	bl	8001368 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e5b      	ldrb	r3, [r3, #25]
 8001834:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001840:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001846:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d106      	bne.n	800186c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	3b01      	subs	r3, #1
 8001864:	045b      	lsls	r3, r3, #17
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <HAL_ADC_Init+0x29c>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	430b      	orrs	r3, r1
 800189a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff1b 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 80018a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d13d      	bne.n	800192a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d13a      	bne.n	800192a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018d0:	f023 0302 	bic.w	r3, r3, #2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	69b9      	ldr	r1, [r7, #24]
 80018da:	430b      	orrs	r3, r1
 80018dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d118      	bne.n	800191a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800190a:	430a      	orrs	r2, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	e007      	b.n	800192a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10c      	bne.n	800194c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001938:	f023 010f 	bic.w	r1, r3, #15
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
 800194a:	e007      	b.n	800195c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 020f 	bic.w	r2, r2, #15
 800195a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	f023 0303 	bic.w	r3, r3, #3
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
 800196c:	e007      	b.n	800197e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800197e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	@ 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	20000004 	.word	0x20000004
 800198c:	053e2d63 	.word	0x053e2d63
 8001990:	50040000 	.word	0x50040000
 8001994:	50040100 	.word	0x50040100
 8001998:	50040200 	.word	0x50040200
 800199c:	50040300 	.word	0x50040300
 80019a0:	fff0c007 	.word	0xfff0c007

080019a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	@ 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c0:	4882      	ldr	r0, [pc, #520]	@ (8001bcc <HAL_ADC_IRQHandler+0x228>)
 80019c2:	f7ff fdfb 	bl	80015bc <LL_ADC_GetMultimode>
 80019c6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d017      	beq.n	8001a02 <HAL_ADC_IRQHandler+0x5e>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fe4d 	bl	8002694 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_IRQHandler+0x72>
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8083 	beq.w	8001b28 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d07d      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fd16 	bl	800147a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d062      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd0 <HAL_ADC_IRQHandler+0x22c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_ADC_IRQHandler+0xc0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_IRQHandler+0xc2>
 8001a64:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd4 <HAL_ADC_IRQHandler+0x230>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d008      	beq.n	8001a80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d002      	beq.n	8001a80 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d104      	bne.n	8001a8a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	e00c      	b.n	8001aa4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a50      	ldr	r2, [pc, #320]	@ (8001bd0 <HAL_ADC_IRQHandler+0x22c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d002      	beq.n	8001a9a <HAL_ADC_IRQHandler+0xf6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e000      	b.n	8001a9c <HAL_ADC_IRQHandler+0xf8>
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd4 <HAL_ADC_IRQHandler+0x230>)
 8001a9c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d135      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d12e      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fdf8 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11a      	bne.n	8001b02 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 020c 	bic.w	r2, r2, #12
 8001ada:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d112      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b00:	e00b      	b.n	8001b1a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	f043 0210 	orr.w	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f95c 	bl	8001dd8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	220c      	movs	r2, #12
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_ADC_IRQHandler+0x198>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10b      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 809f 	beq.w	8001c86 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8099 	beq.w	8001c86 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fcc1 	bl	80014f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc7c 	bl	800147a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <HAL_ADC_IRQHandler+0x22c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d002      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x1f0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	e000      	b.n	8001b96 <HAL_ADC_IRQHandler+0x1f2>
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_ADC_IRQHandler+0x230>)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d008      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d002      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	d104      	bne.n	8001bba <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	e013      	b.n	8001be2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_ADC_IRQHandler+0x22c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_ADC_IRQHandler+0x234>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_ADC_IRQHandler+0x236>
 8001bca:	bf00      	nop
 8001bcc:	50040300 	.word	0x50040300
 8001bd0:	50040100 	.word	0x50040100
 8001bd4:	50040000 	.word	0x50040000
 8001bd8:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd0 <HAL_ADC_IRQHandler+0x42c>)
 8001bda:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d047      	beq.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x25e>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d03f      	beq.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d13a      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	2b40      	cmp	r3, #64	@ 0x40
 8001c0e:	d133      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12e      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd5c 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11a      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d112      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c5e:	e00b      	b.n	8001c78 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	f043 0210 	orr.w	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fce3 	bl	8002644 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2260      	movs	r2, #96	@ 0x60
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d011      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8a0 	bl	8001dec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d012      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x340>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ccc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fcc9 	bl	800266c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x370>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fcbb 	bl	8002680 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d036      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x3e8>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d031      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001d30:	2301      	movs	r3, #1
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d34:	e014      	b.n	8001d60 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d3c:	4825      	ldr	r0, [pc, #148]	@ (8001dd4 <HAL_ADC_IRQHandler+0x430>)
 8001d3e:	f7ff fc4b 	bl	80015d8 <LL_ADC_GetMultiDMATransfer>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	e008      	b.n	8001d60 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f83e 	bl	8001e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2210      	movs	r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d018      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x424>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	f043 0208 	orr.w	r2, r3, #8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fc48 	bl	8002658 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	50040000 	.word	0x50040000
 8001dd4:	50040300 	.word	0x50040300

08001dd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0b6      	sub	sp, #216	@ 0xd8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e3c9      	b.n	80025ca <HAL_ADC_ConfigChannel+0x7b6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fc37 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 83aa 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d824      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	3b02      	subs	r3, #2
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d81b      	bhi.n	8001ea2 <HAL_ADC_ConfigChannel+0x8e>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_ADC_ConfigChannel+0x5c>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e89 	.word	0x08001e89
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001e99 	.word	0x08001e99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e80:	230c      	movs	r3, #12
 8001e82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e86:	e010      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e88:	2312      	movs	r3, #18
 8001e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e8e:	e00c      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e90:	2318      	movs	r3, #24
 8001e92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e96:	e008      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea0:	e003      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001eb8:	f7ff faf2 	bl	80014a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fbf8 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fc04 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 8001ed4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 81a4 	bne.w	800222a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 819f 	bne.w	800222a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f7ff fb10 	bl	800151e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00a      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6919      	ldr	r1, [r3, #16]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f30:	f7ff fa4e 	bl	80013d0 <LL_ADC_SetOffset>
 8001f34:	e179      	b.n	800222a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fa6b 	bl	8001418 <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x14e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa60 	bl	8001418 <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	e01e      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x18c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa55 	bl	8001418 <LL_ADC_GetOffsetChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1a4>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	e018      	b.n	8001fea <HAL_ADC_ConfigChannel+0x1d6>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001fe0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d106      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fa24 	bl	8001444 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fa08 	bl	8001418 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x214>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f9fd 	bl	8001418 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e01e      	b.n	8002066 <HAL_ADC_ConfigChannel+0x252>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9f2 	bl	8001418 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002046:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800204a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800204e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800205a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x26a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x29c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800209a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f9c1 	bl	8001444 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2102      	movs	r1, #2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f9a5 	bl	8001418 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x2da>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f99a 	bl	8001418 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	e01e      	b.n	800212c <HAL_ADC_ConfigChannel+0x318>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2102      	movs	r1, #2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f98f 	bl	8001418 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800210c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x330>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	e014      	b.n	800216e <HAL_ADC_ConfigChannel+0x35a>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e004      	b.n	800216e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216e:	429a      	cmp	r2, r3
 8002170:	d106      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f962 	bl	8001444 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2103      	movs	r1, #3
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f946 	bl	8001418 <LL_ADC_GetOffsetChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x398>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2103      	movs	r1, #3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f93b 	bl	8001418 <LL_ADC_GetOffsetChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	e017      	b.n	80021dc <HAL_ADC_ConfigChannel+0x3c8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2103      	movs	r1, #3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f930 	bl	8001418 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80021c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e003      	b.n	80021da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80021d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x3e0>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	e011      	b.n	8002218 <HAL_ADC_ConfigChannel+0x404>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002204:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002218:	429a      	cmp	r2, r3
 800221a:	d106      	bne.n	800222a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f90d 	bl	8001444 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fa2e 	bl	8001690 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8140 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	461a      	mov	r2, r3
 800224a:	f7ff f993 	bl	8001574 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a8f      	ldr	r2, [pc, #572]	@ (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	f040 8131 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x46e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b09      	cmp	r3, #9
 8002278:	bf94      	ite	ls
 800227a:	2301      	movls	r3, #1
 800227c:	2300      	movhi	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e019      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4a2>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800229e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d079      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x4c2>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	3301      	adds	r3, #1
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d4:	e015      	b.n	8002302 <HAL_ADC_ConfigChannel+0x4ee>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	069b      	lsls	r3, r3, #26
 80022fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x50e>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	3301      	adds	r3, #1
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	e017      	b.n	8002352 <HAL_ADC_ConfigChannel+0x53e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002332:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e003      	b.n	8002346 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800233e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	ea42 0103 	orr.w	r1, r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x564>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	e018      	b.n	80023aa <HAL_ADC_ConfigChannel+0x596>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f003 021f 	and.w	r2, r3, #31
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023aa:	430b      	orrs	r3, r1
 80023ac:	e081      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x5b6>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	3301      	adds	r3, #1
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c8:	e015      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x5e2>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e003      	b.n	80023ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	069b      	lsls	r3, r3, #26
 80023f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x602>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	e017      	b.n	8002446 <HAL_ADC_ConfigChannel+0x632>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	61bb      	str	r3, [r7, #24]
  return result;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e003      	b.n	800243a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	ea42 0103 	orr.w	r1, r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x65e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	3301      	adds	r3, #1
 800245e:	f003 021f 	and.w	r2, r3, #31
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	051b      	lsls	r3, r3, #20
 800246c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002470:	e01e      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x69c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	60fb      	str	r3, [r7, #12]
  return result;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e006      	b.n	800249c <HAL_ADC_ConfigChannel+0x688>
 800248e:	bf00      	nop
 8002490:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	3b1e      	subs	r3, #30
 80024aa:	051b      	lsls	r3, r3, #20
 80024ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7ff f831 	bl	800151e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d07a      	beq.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c8:	4843      	ldr	r0, [pc, #268]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80024ca:	f7fe ff73 	bl	80013b4 <LL_ADC_GetCommonPathInternalCh>
 80024ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a41      	ldr	r2, [pc, #260]	@ (80025dc <HAL_ADC_ConfigChannel+0x7c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d12c      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d126      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3c      	ldr	r2, [pc, #240]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x6e8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3b      	ldr	r2, [pc, #236]	@ (80025e4 <HAL_ADC_ConfigChannel+0x7d0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d15d      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002500:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002504:	4619      	mov	r1, r3
 8002506:	4834      	ldr	r0, [pc, #208]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002508:	f7fe ff41 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800250c:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	4a36      	ldr	r2, [pc, #216]	@ (80025ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002526:	e002      	b.n	800252e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002534:	e040      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2d      	ldr	r2, [pc, #180]	@ (80025f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d118      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d112      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a23      	ldr	r2, [pc, #140]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x74c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a22      	ldr	r2, [pc, #136]	@ (80025e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d12d      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002568:	4619      	mov	r1, r3
 800256a:	481b      	ldr	r0, [pc, #108]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800256c:	f7fe ff0f 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002570:	e024      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d120      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800257c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d115      	bne.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002596:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800259a:	4619      	mov	r1, r3
 800259c:	480e      	ldr	r0, [pc, #56]	@ (80025d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800259e:	f7fe fef6 	bl	800138e <LL_ADC_SetCommonPathInternalCh>
 80025a2:	e00c      	b.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80025b6:	e002      	b.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	37d8      	adds	r7, #216	@ 0xd8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	80080000 	.word	0x80080000
 80025d8:	50040300 	.word	0x50040300
 80025dc:	c7520000 	.word	0xc7520000
 80025e0:	50040000 	.word	0x50040000
 80025e4:	50040200 	.word	0x50040200
 80025e8:	20000004 	.word	0x20000004
 80025ec:	053e2d63 	.word	0x053e2d63
 80025f0:	cb840000 	.word	0xcb840000
 80025f4:	80000001 	.word	0x80000001

080025f8 <LL_ADC_IsEnabled>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <LL_ADC_IsEnabled+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_IsEnabled+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_REG_IsConversionOngoing>:
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d101      	bne.n	8002636 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b09f      	sub	sp, #124	@ 0x7c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e093      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026ce:	2300      	movs	r3, #0
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026d2:	2300      	movs	r3, #0
 80026d4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a47      	ldr	r2, [pc, #284]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d102      	bne.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026e0:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	e001      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e072      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff87 	bl	800261e <LL_ADC_REG_IsConversionOngoing>
 8002710:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff81 	bl	800261e <LL_ADC_REG_IsConversionOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d154      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002724:	2b00      	cmp	r3, #0
 8002726:	d151      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002728:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800272a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02c      	beq.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002746:	035b      	lsls	r3, r3, #13
 8002748:	430b      	orrs	r3, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002750:	4829      	ldr	r0, [pc, #164]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002752:	f7ff ff51 	bl	80025f8 <LL_ADC_IsEnabled>
 8002756:	4604      	mov	r4, r0
 8002758:	4828      	ldr	r0, [pc, #160]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800275a:	f7ff ff4d 	bl	80025f8 <LL_ADC_IsEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	431c      	orrs	r4, r3
 8002762:	4828      	ldr	r0, [pc, #160]	@ (8002804 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002764:	f7ff ff48 	bl	80025f8 <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	4323      	orrs	r3, r4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d137      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	430a      	orrs	r2, r1
 8002786:	431a      	orrs	r2, r3
 8002788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800278c:	e028      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800278e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002798:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800279a:	4817      	ldr	r0, [pc, #92]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800279c:	f7ff ff2c 	bl	80025f8 <LL_ADC_IsEnabled>
 80027a0:	4604      	mov	r4, r0
 80027a2:	4816      	ldr	r0, [pc, #88]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027a4:	f7ff ff28 	bl	80025f8 <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	431c      	orrs	r4, r3
 80027ac:	4815      	ldr	r0, [pc, #84]	@ (8002804 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80027ae:	f7ff ff23 	bl	80025f8 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4323      	orrs	r3, r4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d112      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027ca:	e009      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80027de:	e000      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	377c      	adds	r7, #124	@ 0x7c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	50040000 	.word	0x50040000
 80027fc:	50040100 	.word	0x50040100
 8002800:	50040300 	.word	0x50040300
 8002804:	50040200 	.word	0x50040200

08002808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0ed      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fae8 	bl	8000dfc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7fe fd64 	bl	8001308 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002842:	e012      	b.n	800286a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002844:	f7fe fd60 	bl	8001308 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b0a      	cmp	r3, #10
 8002850:	d90b      	bls.n	800286a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2205      	movs	r2, #5
 8002862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0c5      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0e5      	beq.n	8002844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0202 	bic.w	r2, r2, #2
 8002886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002888:	f7fe fd3e 	bl	8001308 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800288e:	e012      	b.n	80028b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002890:	f7fe fd3a 	bl	8001308 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d90b      	bls.n	80028b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2205      	movs	r2, #5
 80028ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e09f      	b.n	80029f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7e1b      	ldrb	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e5b      	ldrb	r3, [r3, #25]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7e9b      	ldrb	r3, [r3, #26]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0220 	bic.w	r2, r2, #32
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7edb      	ldrb	r3, [r3, #27]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0210 	bic.w	r2, r2, #16
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e007      	b.n	800296c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7f1b      	ldrb	r3, [r3, #28]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0208 	orr.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7f5b      	ldrb	r3, [r3, #29]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0204 	orr.w	r2, r2, #4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	@ (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	@ (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e098      	b.n	8002d68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <HAL_DMA_Init+0x150>)
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d80f      	bhi.n	8002c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_DMA_Init+0x154>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_DMA_Init+0x158>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	@ (8002d80 <HAL_DMA_Init+0x15c>)
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c60:	e00e      	b.n	8002c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <HAL_DMA_Init+0x160>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a43      	ldr	r2, [pc, #268]	@ (8002d7c <HAL_DMA_Init+0x158>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	009a      	lsls	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	@ (8002d88 <HAL_DMA_Init+0x164>)
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cda:	d039      	beq.n	8002d50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a27      	ldr	r2, [pc, #156]	@ (8002d80 <HAL_DMA_Init+0x15c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11a      	bne.n	8002d1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ce6:	4b29      	ldr	r3, [pc, #164]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 031c 	and.w	r3, r3, #28
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4924      	ldr	r1, [pc, #144]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f003 031c 	and.w	r3, r3, #28
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	491d      	ldr	r1, [pc, #116]	@ (8002d8c <HAL_DMA_Init+0x168>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
 8002d1a:	e019      	b.n	8002d50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f003 031c 	and.w	r3, r3, #28
 8002d28:	210f      	movs	r1, #15
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4917      	ldr	r1, [pc, #92]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f003 031c 	and.w	r3, r3, #28
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	4911      	ldr	r1, [pc, #68]	@ (8002d90 <HAL_DMA_Init+0x16c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40020407 	.word	0x40020407
 8002d78:	bffdfff8 	.word	0xbffdfff8
 8002d7c:	cccccccd 	.word	0xcccccccd
 8002d80:	40020000 	.word	0x40020000
 8002d84:	bffdfbf8 	.word	0xbffdfbf8
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	400200a8 	.word	0x400200a8
 8002d90:	400204a8 	.word	0x400204a8

08002d94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2204      	movs	r2, #4
 8002db0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 020e 	bic.w	r2, r2, #14
 8002dcc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d005      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e029      	b.n	8002e88 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020e 	bic.w	r2, r2, #14
 8002e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	f003 021c 	and.w	r2, r3, #28
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
    }
  }
  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f003 031c 	and.w	r3, r3, #28
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d026      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x7a>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d021      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0204 	bic.w	r2, r2, #4
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f003 021c 	and.w	r2, r3, #28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d071      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f0a:	e06c      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f003 031c 	and.w	r3, r3, #28
 8002f14:	2202      	movs	r2, #2
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02e      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xec>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d029      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020a 	bic.w	r2, r2, #10
 8002f46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	f003 021c 	and.w	r2, r3, #28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d038      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f7c:	e033      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f003 031c 	and.w	r3, r3, #28
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d025      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020e 	bic.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb0:	f003 021c 	and.w	r2, r3, #28
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
}
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	e17f      	b.n	8003300 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8171 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d005      	beq.n	8003030 <HAL_GPIO_Init+0x40>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d130      	bne.n	8003092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003066:	2201      	movs	r2, #1
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0201 	and.w	r2, r3, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d118      	bne.n	80030d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d017      	beq.n	800310c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d123      	bne.n	8003160 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3208      	adds	r2, #8
 800315a:	6939      	ldr	r1, [r7, #16]
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80ac 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003320 <HAL_GPIO_Init+0x330>)
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003320 <HAL_GPIO_Init+0x330>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80031ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003320 <HAL_GPIO_Init+0x330>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003324 <HAL_GPIO_Init+0x334>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x242>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003328 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4e      	ldr	r2, [pc, #312]	@ (800332c <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003330 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4c      	ldr	r2, [pc, #304]	@ (8003334 <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4b      	ldr	r2, [pc, #300]	@ (8003338 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4a      	ldr	r2, [pc, #296]	@ (800333c <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x22a>
 8003216:	2306      	movs	r3, #6
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321a:	2307      	movs	r3, #7
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003244:	4937      	ldr	r1, [pc, #220]	@ (8003324 <HAL_GPIO_Init+0x334>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003252:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_GPIO_Init+0x350>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003276:	4a32      	ldr	r2, [pc, #200]	@ (8003340 <HAL_GPIO_Init+0x350>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800327c:	4b30      	ldr	r3, [pc, #192]	@ (8003340 <HAL_GPIO_Init+0x350>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <HAL_GPIO_Init+0x350>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <HAL_GPIO_Init+0x350>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003340 <HAL_GPIO_Init+0x350>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_GPIO_Init+0x350>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f4:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <HAL_GPIO_Init+0x350>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f ae78 	bne.w	8003000 <HAL_GPIO_Init+0x10>
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	48000400 	.word	0x48000400
 800332c:	48000800 	.word	0x48000800
 8003330:	48000c00 	.word	0x48000c00
 8003334:	48001000 	.word	0x48001000
 8003338:	48001400 	.word	0x48001400
 800333c:	48001800 	.word	0x48001800
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003360:	e002      	b.n	8003368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43d9      	mvns	r1, r3
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	400b      	ands	r3, r1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d2:	d130      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d4:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e0:	d038      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e2:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2232      	movs	r2, #50	@ 0x32
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	0c9b      	lsrs	r3, r3, #18
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003408:	e002      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003410:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341c:	d102      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f2      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003430:	d110      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003442:	d007      	beq.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003444:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800344c:	4a05      	ldr	r2, [pc, #20]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000
 8003468:	20000004 	.word	0x20000004
 800346c:	431bde83 	.word	0x431bde83

08003470 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e3ca      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b97      	ldr	r3, [pc, #604]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b94      	ldr	r3, [pc, #592]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80e4 	beq.w	800366c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_RCC_OscConfig+0x4a>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f040 808b 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	f040 8087 	bne.w	80035c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3a2      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	4b82      	ldr	r3, [pc, #520]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_RCC_OscConfig+0x7c>
 80034e2:	4b7f      	ldr	r3, [pc, #508]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_OscConfig+0x88>
 80034ec:	4b7c      	ldr	r3, [pc, #496]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d223      	bcs.n	8003544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd55 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e383      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	4b73      	ldr	r3, [pc, #460]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a72      	ldr	r2, [pc, #456]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b70      	ldr	r3, [pc, #448]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	496d      	ldr	r1, [pc, #436]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352e:	4b6c      	ldr	r3, [pc, #432]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	4968      	ldr	r1, [pc, #416]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
 8003542:	e025      	b.n	8003590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003544:	4b66      	ldr	r3, [pc, #408]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b63      	ldr	r3, [pc, #396]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4960      	ldr	r1, [pc, #384]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003562:	4b5f      	ldr	r3, [pc, #380]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	495b      	ldr	r1, [pc, #364]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd15 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e343      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003590:	f000 fc4a 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b52      	ldr	r3, [pc, #328]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4950      	ldr	r1, [pc, #320]	@ (80036e4 <HAL_RCC_OscConfig+0x274>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a4e      	ldr	r2, [pc, #312]	@ (80036e8 <HAL_RCC_OscConfig+0x278>)
 80035ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035b0:	4b4e      	ldr	r3, [pc, #312]	@ (80036ec <HAL_RCC_OscConfig+0x27c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fe57 	bl	8001268 <HAL_InitTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d052      	beq.n	800366a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	e327      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d032      	beq.n	8003636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035d0:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a42      	ldr	r2, [pc, #264]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe94 	bl	8001308 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e4:	f7fd fe90 	bl	8001308 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e310      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f6:	4b3a      	ldr	r3, [pc, #232]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a36      	ldr	r2, [pc, #216]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b34      	ldr	r3, [pc, #208]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4931      	ldr	r1, [pc, #196]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	492c      	ldr	r1, [pc, #176]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e01a      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003636:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003642:	f7fd fe61 	bl	8001308 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7fd fe5d 	bl	8001308 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e2dd      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800365c:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x1da>
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d074      	beq.n	8003762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x21a>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d10e      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d064      	beq.n	8003760 <HAL_RCC_OscConfig+0x2f0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d160      	bne.n	8003760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e2ba      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x24a>
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c2:	d115      	bne.n	80036f0 <HAL_RCC_OscConfig+0x280>
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a02      	ldr	r2, [pc, #8]	@ (80036e0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x298>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800711c 	.word	0x0800711c
 80036e8:	20000004 	.word	0x20000004
 80036ec:	20000008 	.word	0x20000008
 80036f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a9f      	ldr	r2, [pc, #636]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a9c      	ldr	r2, [pc, #624]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fdfa 	bl	8001308 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fd fdf6 	bl	8001308 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e276      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	4b92      	ldr	r3, [pc, #584]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x2a8>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd fde6 	bl	8001308 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fd fde2 	bl	8001308 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	@ 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e262      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003752:	4b88      	ldr	r3, [pc, #544]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x2d0>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d060      	beq.n	8003830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x310>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d119      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d116      	bne.n	80037ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003780:	4b7c      	ldr	r3, [pc, #496]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x328>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e23f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b76      	ldr	r3, [pc, #472]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	4973      	ldr	r1, [pc, #460]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ac:	e040      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d023      	beq.n	80037fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fd fda1 	bl	8001308 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fd fd9d 	bl	8001308 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e21d      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	4b65      	ldr	r3, [pc, #404]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b62      	ldr	r3, [pc, #392]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	495f      	ldr	r1, [pc, #380]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e018      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5c      	ldr	r2, [pc, #368]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd fd7d 	bl	8001308 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003812:	f7fd fd79 	bl	8001308 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1f9      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003824:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01c      	beq.n	800387e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003844:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384a:	4a4a      	ldr	r2, [pc, #296]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fd58 	bl	8001308 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fd fd54 	bl	8001308 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1d4      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386e:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <HAL_RCC_OscConfig+0x3ec>
 800387c:	e01b      	b.n	80038b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387e:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003884:	4a3b      	ldr	r2, [pc, #236]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd fd3b 	bl	8001308 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd fd37 	bl	8001308 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1b7      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a6 	beq.w	8003a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e0:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCC_OscConfig+0x508>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d118      	bne.n	800392e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_RCC_OscConfig+0x508>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <HAL_RCC_OscConfig+0x508>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003908:	f7fd fcfe 	bl	8001308 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fd fcfa 	bl	8001308 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e17a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003922:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <HAL_RCC_OscConfig+0x508>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0x4d8>
 8003936:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003946:	e029      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d115      	bne.n	800397c <HAL_RCC_OscConfig+0x50c>
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003956:	4a07      	ldr	r2, [pc, #28]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003960:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	4a03      	ldr	r2, [pc, #12]	@ (8003974 <HAL_RCC_OscConfig+0x504>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x52c>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	4a9b      	ldr	r2, [pc, #620]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800398c:	4b98      	ldr	r3, [pc, #608]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	4a97      	ldr	r2, [pc, #604]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fcb0 	bl	8001308 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd fcac 	bl	8001308 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e12a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ed      	beq.n	80039ac <HAL_RCC_OscConfig+0x53c>
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fc99 	bl	8001308 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fc95 	bl	8001308 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e113      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ed      	bne.n	80039da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a08:	4a79      	ldr	r2, [pc, #484]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80fe 	beq.w	8003c16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f040 80d0 	bne.w	8003bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a24:	4b72      	ldr	r3, [pc, #456]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d130      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d127      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d11f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a64:	2a07      	cmp	r2, #7
 8003a66:	bf14      	ite	ne
 8003a68:	2201      	movne	r2, #1
 8003a6a:	2200      	moveq	r2, #0
 8003a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	3b01      	subs	r3, #1
 8003a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d06e      	beq.n	8003b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d069      	beq.n	8003b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa0:	4b53      	ldr	r3, [pc, #332]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003aac:	4b50      	ldr	r3, [pc, #320]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0ad      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003abc:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac8:	f7fd fc1e 	bl	8001308 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fc1a 	bl	8001308 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e09a      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae2:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aee:	4b40      	ldr	r3, [pc, #256]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	4b40      	ldr	r3, [pc, #256]	@ (8003bf4 <HAL_RCC_OscConfig+0x784>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b08:	0212      	lsls	r2, r2, #8
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0552      	lsls	r2, r2, #21
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b1c:	0852      	lsrs	r2, r2, #1
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	0652      	lsls	r2, r2, #25
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b28:	0912      	lsrs	r2, r2, #4
 8003b2a:	0452      	lsls	r2, r2, #17
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4930      	ldr	r1, [pc, #192]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b34:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b4c:	f7fd fbdc 	bl	8001308 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fbd8 	bl	8001308 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b72:	e050      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04f      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d148      	bne.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b9c:	f7fd fbb4 	bl	8001308 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd fbb0 	bl	8001308 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e030      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x734>
 8003bc2:	e028      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fb97 	bl	8001308 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bdc:	e00c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fd fb93 	bl	8001308 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d905      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e013      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ec      	bne.n	8003bde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4905      	ldr	r1, [pc, #20]	@ (8003c20 <HAL_RCC_OscConfig+0x7b0>)
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_OscConfig+0x7b4>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
 8003c10:	e001      	b.n	8003c16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	feeefffc 	.word	0xfeeefffc

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0e7      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b75      	ldr	r3, [pc, #468]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4970      	ldr	r1, [pc, #448]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cf      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d908      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4960      	ldr	r1, [pc, #384]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04c      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0a6      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc6:	4b54      	ldr	r3, [pc, #336]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e09a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cde:	4b4e      	ldr	r3, [pc, #312]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cee:	4b4a      	ldr	r3, [pc, #296]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e086      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b46      	ldr	r3, [pc, #280]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4943      	ldr	r1, [pc, #268]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fafa 	bl	8001308 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd faf6 	bl	8001308 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e06e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d208      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	492b      	ldr	r1, [pc, #172]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6e:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d210      	bcs.n	8003d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4923      	ldr	r1, [pc, #140]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8c:	4b21      	ldr	r3, [pc, #132]	@ (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4918      	ldr	r1, [pc, #96]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc8:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4910      	ldr	r1, [pc, #64]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 f824 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	490b      	ldr	r1, [pc, #44]	@ (8003e1c <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1fc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fa31 	bl	8001268 <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	0800711c 	.word	0x0800711c
 8003e20:	20000004 	.word	0x20000004
 8003e24:	20000008 	.word	0x20000008

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	@ 0x24
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b3e      	ldr	r3, [pc, #248]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11e      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e5c:	4b34      	ldr	r3, [pc, #208]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e68:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e78:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e84:	4a2b      	ldr	r2, [pc, #172]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d102      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eac:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d134      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xa6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed0:	617b      	str	r3, [r7, #20]
      break;
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	617b      	str	r3, [r7, #20]
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	fb03 f202 	mul.w	r2, r3, r2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0e5b      	lsrs	r3, r3, #25
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f20:	69bb      	ldr	r3, [r7, #24]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	@ 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08007134 	.word	0x08007134
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	007a1200 	.word	0x007a1200

08003f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000004 	.word	0x20000004

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	@ (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0800712c 	.word	0x0800712c

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f88:	f7ff ffda 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	@ (8003fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	0800712c 	.word	0x0800712c

08003fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fc8:	f7ff f9ee 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8003fcc:	6178      	str	r0, [r7, #20]
 8003fce:	e014      	b.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b25      	ldr	r3, [pc, #148]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fe8:	f7ff f9de 	bl	80033a8 <HAL_PWREx_GetVoltageRange>
 8003fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004000:	d10b      	bne.n	800401a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	@ 0x80
 8004006:	d919      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2ba0      	cmp	r3, #160	@ 0xa0
 800400c:	d902      	bls.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800400e:	2302      	movs	r3, #2
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	e013      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e010      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	@ 0x80
 800401e:	d902      	bls.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004020:	2303      	movs	r3, #3
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e00a      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	@ 0x80
 800402a:	d102      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800402c:	2302      	movs	r3, #2
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e004      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b70      	cmp	r3, #112	@ 0x70
 8004036:	d101      	bne.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	4909      	ldr	r1, [pc, #36]	@ (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800404c:	4b07      	ldr	r3, [pc, #28]	@ (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407c:	2300      	movs	r3, #0
 800407e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004088:	2b00      	cmp	r3, #0
 800408a:	d041      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004090:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004094:	d02a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004096:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800409a:	d824      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800409c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040a6:	d81e      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040b0:	d010      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040b2:	e018      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b4:	4b86      	ldr	r3, [pc, #536]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a85      	ldr	r2, [pc, #532]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c0:	e015      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fabb 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d2:	e00c      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3320      	adds	r3, #32
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fba6 	bl	800482c <RCCEx_PLLSAI2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	74fb      	strb	r3, [r7, #19]
      break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f4:	4b76      	ldr	r3, [pc, #472]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004102:	4973      	ldr	r1, [pc, #460]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d041      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004124:	d02a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800412a:	d824      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800412c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004136:	d81e      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004140:	d010      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004142:	e018      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004144:	4b62      	ldr	r3, [pc, #392]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a61      	ldr	r2, [pc, #388]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa73 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3320      	adds	r3, #32
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb5e 	bl	800482c <RCCEx_PLLSAI2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	74fb      	strb	r3, [r7, #19]
      break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004184:	4b52      	ldr	r3, [pc, #328]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004192:	494f      	ldr	r1, [pc, #316]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a0 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b2:	4b47      	ldr	r3, [pc, #284]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b41      	ldr	r3, [pc, #260]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	4a40      	ldr	r2, [pc, #256]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d4:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f0:	f7fd f88a 	bl	8001308 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f6:	e009      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fd f886 	bl	8001308 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	74fb      	strb	r3, [r7, #19]
        break;
 800420a:	e005      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420c:	4b31      	ldr	r3, [pc, #196]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d15c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421e:	4b2c      	ldr	r3, [pc, #176]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d019      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	4a20      	ldr	r2, [pc, #128]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004258:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	4a1c      	ldr	r2, [pc, #112]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004268:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd f845 	bl	8001308 <HAL_GetTick>
 800427e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004280:	e00b      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd f841 	bl	8001308 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
            break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ec      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ae:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042be:	4904      	ldr	r1, [pc, #16]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042dc:	7c7b      	ldrb	r3, [r7, #17]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4b9e      	ldr	r3, [pc, #632]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	4a9d      	ldr	r2, [pc, #628]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fa:	4b98      	ldr	r3, [pc, #608]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	4994      	ldr	r1, [pc, #592]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800431c:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f023 020c 	bic.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432a:	498c      	ldr	r1, [pc, #560]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800433e:	4b87      	ldr	r3, [pc, #540]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4983      	ldr	r1, [pc, #524]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004360:	4b7e      	ldr	r3, [pc, #504]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	497b      	ldr	r1, [pc, #492]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004382:	4b76      	ldr	r3, [pc, #472]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	4972      	ldr	r1, [pc, #456]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a4:	4b6d      	ldr	r3, [pc, #436]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b2:	496a      	ldr	r1, [pc, #424]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c6:	4b65      	ldr	r3, [pc, #404]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	4961      	ldr	r1, [pc, #388]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e8:	4b5c      	ldr	r3, [pc, #368]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	4959      	ldr	r1, [pc, #356]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440a:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004418:	4950      	ldr	r1, [pc, #320]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442c:	4b4b      	ldr	r3, [pc, #300]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	4948      	ldr	r1, [pc, #288]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800444e:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	493f      	ldr	r1, [pc, #252]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d028      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004470:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447e:	4937      	ldr	r1, [pc, #220]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004490:	4b32      	ldr	r3, [pc, #200]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a31      	ldr	r2, [pc, #196]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	e011      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8c8 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044ce:	4b23      	ldr	r3, [pc, #140]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	491f      	ldr	r1, [pc, #124]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ec:	d106      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f8:	60d3      	str	r3, [r2, #12]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f899 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02b      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	4908      	ldr	r1, [pc, #32]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800454a:	d109      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a02      	ldr	r2, [pc, #8]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
 8004558:	e014      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004564:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f867 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004590:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459e:	4928      	ldr	r1, [pc, #160]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ae:	d10d      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f844 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d014      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
 80045ca:	e011      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3320      	adds	r3, #32
 80045da:	2102      	movs	r1, #2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f925 	bl	800482c <RCCEx_PLLSAI2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045fc:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004602:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460a:	490d      	ldr	r1, [pc, #52]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800461e:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800462e:	4904      	ldr	r1, [pc, #16]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004636:	7cbb      	ldrb	r3, [r7, #18]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004652:	4b75      	ldr	r3, [pc, #468]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800465e:	4b72      	ldr	r3, [pc, #456]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
       ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004676:	4b6c      	ldr	r3, [pc, #432]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
       ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d047      	beq.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e044      	b.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d018      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x86>
 8004698:	2b03      	cmp	r3, #3
 800469a:	d825      	bhi.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d002      	beq.n	80046a6 <RCCEx_PLLSAI1_Config+0x62>
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d009      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x74>
 80046a4:	e020      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a6:	4b60      	ldr	r3, [pc, #384]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11d      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b6:	e01a      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e013      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ca:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10f      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d6:	4b54      	ldr	r3, [pc, #336]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e6:	e006      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e004      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	430b      	orrs	r3, r1
 8004714:	4944      	ldr	r1, [pc, #272]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d17d      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004720:	4b41      	ldr	r3, [pc, #260]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a40      	ldr	r2, [pc, #256]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fc fdec 	bl	8001308 <HAL_GetTick>
 8004730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004732:	e009      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004734:	f7fc fde8 	bl	8001308 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d902      	bls.n	8004748 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	73fb      	strb	r3, [r7, #15]
        break;
 8004746:	e005      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004748:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ef      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d160      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d111      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004760:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	0912      	lsrs	r2, r2, #4
 8004778:	0452      	lsls	r2, r2, #17
 800477a:	430a      	orrs	r2, r1
 800477c:	492a      	ldr	r1, [pc, #168]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]
 8004782:	e027      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d112      	bne.n	80047b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800478a:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004792:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6892      	ldr	r2, [r2, #8]
 800479a:	0211      	lsls	r1, r2, #8
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6912      	ldr	r2, [r2, #16]
 80047a0:	0852      	lsrs	r2, r2, #1
 80047a2:	3a01      	subs	r2, #1
 80047a4:	0552      	lsls	r2, r2, #21
 80047a6:	430a      	orrs	r2, r1
 80047a8:	491f      	ldr	r1, [pc, #124]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	610b      	str	r3, [r1, #16]
 80047ae:	e011      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6952      	ldr	r2, [r2, #20]
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0652      	lsls	r2, r2, #25
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4916      	ldr	r1, [pc, #88]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d4:	4b14      	ldr	r3, [pc, #80]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a13      	ldr	r2, [pc, #76]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fc fd92 	bl	8001308 <HAL_GetTick>
 80047e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e6:	e009      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e8:	f7fc fd8e 	bl	8001308 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	73fb      	strb	r3, [r7, #15]
          break;
 80047fa:	e005      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ef      	beq.n	80047e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4904      	ldr	r1, [pc, #16]	@ (8004828 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483a:	4b6a      	ldr	r3, [pc, #424]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004846:	4b67      	ldr	r3, [pc, #412]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
       ||
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800485e:	4b61      	ldr	r3, [pc, #388]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
       ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d047      	beq.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e044      	b.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d018      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0x86>
 8004880:	2b03      	cmp	r3, #3
 8004882:	d825      	bhi.n	80048d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004884:	2b01      	cmp	r3, #1
 8004886:	d002      	beq.n	800488e <RCCEx_PLLSAI2_Config+0x62>
 8004888:	2b02      	cmp	r3, #2
 800488a:	d009      	beq.n	80048a0 <RCCEx_PLLSAI2_Config+0x74>
 800488c:	e020      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800488e:	4b55      	ldr	r3, [pc, #340]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11d      	bne.n	80048d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489e:	e01a      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a0:	4b50      	ldr	r3, [pc, #320]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e013      	b.n	80048da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b2:	4b4c      	ldr	r3, [pc, #304]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048be:	4b49      	ldr	r3, [pc, #292]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ce:	e006      	b.n	80048de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e004      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048de:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048e6:	4b3f      	ldr	r3, [pc, #252]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	430b      	orrs	r3, r1
 80048fc:	4939      	ldr	r1, [pc, #228]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d167      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004908:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fc fcf8 	bl	8001308 <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800491a:	e009      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800491c:	f7fc fcf4 	bl	8001308 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d902      	bls.n	8004930 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
        break;
 800492e:	e005      	b.n	800493c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004930:	4b2c      	ldr	r3, [pc, #176]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d14a      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004948:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	0912      	lsrs	r2, r2, #4
 8004960:	0452      	lsls	r2, r2, #17
 8004962:	430a      	orrs	r2, r1
 8004964:	491f      	ldr	r1, [pc, #124]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	614b      	str	r3, [r1, #20]
 800496a:	e011      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800496c:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004974:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	0211      	lsls	r1, r2, #8
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6912      	ldr	r2, [r2, #16]
 8004982:	0852      	lsrs	r2, r2, #1
 8004984:	3a01      	subs	r2, #1
 8004986:	0652      	lsls	r2, r2, #25
 8004988:	430a      	orrs	r2, r1
 800498a:	4916      	ldr	r1, [pc, #88]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004990:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a13      	ldr	r2, [pc, #76]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fc fcb4 	bl	8001308 <HAL_GetTick>
 80049a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a2:	e009      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a4:	f7fc fcb0 	bl	8001308 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d902      	bls.n	80049b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	73fb      	strb	r3, [r7, #15]
          break;
 80049b6:	e005      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ef      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4904      	ldr	r1, [pc, #16]	@ (80049e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e040      	b.n	8004a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc fa3a 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	@ 0x24
 8004a14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fedc 	bl	80057ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fc21 	bl	800527c <UART_SetConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e01b      	b.n	8004a7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 ff5b 	bl	8005930 <UART_CheckIdleState>
 8004a7a:	4603      	mov	r3, r0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	@ 0x28
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d177      	bne.n	8004b8c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Transmit+0x24>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e070      	b.n	8004b8e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2221      	movs	r2, #33	@ 0x21
 8004ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aba:	f7fc fc25 	bl	8001308 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad8:	d108      	bne.n	8004aec <HAL_UART_Transmit+0x68>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e003      	b.n	8004af4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004af4:	e02f      	b.n	8004b56 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2180      	movs	r1, #128	@ 0x80
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 ffbd 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e03b      	b.n	8004b8e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	3302      	adds	r3, #2
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e007      	b.n	8004b44 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1c9      	bne.n	8004af6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2140      	movs	r1, #64	@ 0x40
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 ff87 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e005      	b.n	8004b8e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	@ 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d137      	bne.n	8004c20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Receive_IT+0x24>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e030      	b.n	8004c22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_UART_Receive_IT+0x94>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01f      	beq.n	8004c10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	613b      	str	r3, [r7, #16]
   return(result);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	69f9      	ldr	r1, [r7, #28]
 8004c02:	6a3a      	ldr	r2, [r7, #32]
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 ffa0 	bl	8005b5c <UART_Start_Receive_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3728      	adds	r7, #40	@ 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40008000 	.word	0x40008000

08004c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b0ba      	sub	sp, #232	@ 0xe8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c5e:	4013      	ands	r3, r2
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00f      	beq.n	8004c98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 82ca 	beq.w	8005222 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
      }
      return;
 8004c96:	e2c4      	b.n	8005222 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8117 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004cb2:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <HAL_UART_IRQHandler+0x298>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 810a 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d011      	beq.n	8004cec <HAL_UART_IRQHandler+0xbc>
 8004cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00b      	beq.n	8004cec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d011      	beq.n	8004d1c <HAL_UART_IRQHandler+0xec>
 8004cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d011      	beq.n	8004d4c <HAL_UART_IRQHandler+0x11c>
 8004d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d42:	f043 0202 	orr.w	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d017      	beq.n	8004d88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2208      	movs	r2, #8
 8004d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7e:	f043 0208 	orr.w	r2, r3, #8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_UART_IRQHandler+0x18a>
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004da8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8230 	beq.w	8005226 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04f      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 ff68 	bl	8005ce8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d141      	bne.n	8004eaa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1d9      	bne.n	8004e26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d013      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7e:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_UART_IRQHandler+0x29c>)
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd ffc2 	bl	8002e10 <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00f      	b.n	8004ec2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9d4 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00b      	b.n	8004ec2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9d0 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e007      	b.n	8004ec2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9cc 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ec0:	e1b1      	b.n	8005226 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	bf00      	nop
    return;
 8004ec4:	e1af      	b.n	8005226 <HAL_UART_IRQHandler+0x5f6>
 8004ec6:	bf00      	nop
 8004ec8:	04000120 	.word	0x04000120
 8004ecc:	08005db1 	.word	0x08005db1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 816a 	bne.w	80051ae <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8163 	beq.w	80051ae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 815c 	beq.w	80051ae <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2210      	movs	r2, #16
 8004efc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	f040 80d4 	bne.w	80050b6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80ad 	beq.w	800507e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f080 80a5 	bcs.w	800507e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 8086 	bne.w	800505c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1da      	bne.n	8004f50 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e1      	bne.n	8004f9a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ffa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005000:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e3      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800502a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800503e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005040:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800504c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e4      	bne.n	800501c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fe9c 	bl	8002d94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800506e:	b29b      	uxth	r3, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	b29b      	uxth	r3, r3
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8f4 	bl	8005264 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800507c:	e0d5      	b.n	800522a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005088:	429a      	cmp	r2, r3
 800508a:	f040 80ce 	bne.w	800522a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	f040 80c5 	bne.w	800522a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8d8 	bl	8005264 <HAL_UARTEx_RxEventCallback>
      return;
 80050b4:	e0b9      	b.n	800522a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80ab 	beq.w	800522e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80050d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a6 	beq.w	800522e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
 8005106:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800510a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e4      	bne.n	80050e2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	623b      	str	r3, [r7, #32]
   return(result);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800513c:	633a      	str	r2, [r7, #48]	@ 0x30
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e3      	bne.n	8005118 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	60fb      	str	r3, [r7, #12]
   return(result);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f023 0310 	bic.w	r3, r3, #16
 8005178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	617b      	str	r3, [r7, #20]
   return(result);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e4      	bne.n	8005164 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f85c 	bl	8005264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ac:	e03f      	b.n	800522e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <HAL_UART_IRQHandler+0x5a8>
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80051ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 ffe9 	bl	80061a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051d6:	e02d      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00e      	beq.n	8005202 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01c      	beq.n	8005232 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
    }
    return;
 8005200:	e017      	b.n	8005232 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <HAL_UART_IRQHandler+0x604>
 800520e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fdde 	bl	8005ddc <UART_EndTransmit_IT>
    return;
 8005220:	e008      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
      return;
 8005222:	bf00      	nop
 8005224:	e006      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
    return;
 8005226:	bf00      	nop
 8005228:	e004      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
      return;
 800522a:	bf00      	nop
 800522c:	e002      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
      return;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <HAL_UART_IRQHandler+0x604>
    return;
 8005232:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005234:	37e8      	adds	r7, #232	@ 0xe8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b08a      	sub	sp, #40	@ 0x28
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4ba4      	ldr	r3, [pc, #656]	@ (800553c <UART_SetConfig+0x2c0>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a99      	ldr	r2, [pc, #612]	@ (8005540 <UART_SetConfig+0x2c4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e4:	4313      	orrs	r3, r2
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a90      	ldr	r2, [pc, #576]	@ (8005544 <UART_SetConfig+0x2c8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d126      	bne.n	8005354 <UART_SetConfig+0xd8>
 8005306:	4b90      	ldr	r3, [pc, #576]	@ (8005548 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b03      	cmp	r3, #3
 8005312:	d81b      	bhi.n	800534c <UART_SetConfig+0xd0>
 8005314:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <UART_SetConfig+0xa0>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800532d 	.word	0x0800532d
 8005320:	0800533d 	.word	0x0800533d
 8005324:	08005335 	.word	0x08005335
 8005328:	08005345 	.word	0x08005345
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005332:	e116      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005334:	2302      	movs	r3, #2
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800533a:	e112      	b.n	8005562 <UART_SetConfig+0x2e6>
 800533c:	2304      	movs	r3, #4
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005342:	e10e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005344:	2308      	movs	r3, #8
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534a:	e10a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800534c:	2310      	movs	r3, #16
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005352:	e106      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a7c      	ldr	r2, [pc, #496]	@ (800554c <UART_SetConfig+0x2d0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d138      	bne.n	80053d0 <UART_SetConfig+0x154>
 800535e:	4b7a      	ldr	r3, [pc, #488]	@ (8005548 <UART_SetConfig+0x2cc>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d82d      	bhi.n	80053c8 <UART_SetConfig+0x14c>
 800536c:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <UART_SetConfig+0xf8>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053b1 	.word	0x080053b1
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e0d8      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e0d4      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e0d0      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c6:	e0cc      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ce:	e0c8      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005550 <UART_SetConfig+0x2d4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d125      	bne.n	8005426 <UART_SetConfig+0x1aa>
 80053da:	4b5b      	ldr	r3, [pc, #364]	@ (8005548 <UART_SetConfig+0x2cc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053e4:	2b30      	cmp	r3, #48	@ 0x30
 80053e6:	d016      	beq.n	8005416 <UART_SetConfig+0x19a>
 80053e8:	2b30      	cmp	r3, #48	@ 0x30
 80053ea:	d818      	bhi.n	800541e <UART_SetConfig+0x1a2>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d00a      	beq.n	8005406 <UART_SetConfig+0x18a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d814      	bhi.n	800541e <UART_SetConfig+0x1a2>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <UART_SetConfig+0x182>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d008      	beq.n	800540e <UART_SetConfig+0x192>
 80053fc:	e00f      	b.n	800541e <UART_SetConfig+0x1a2>
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005404:	e0ad      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005406:	2302      	movs	r3, #2
 8005408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540c:	e0a9      	b.n	8005562 <UART_SetConfig+0x2e6>
 800540e:	2304      	movs	r3, #4
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005414:	e0a5      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005416:	2308      	movs	r3, #8
 8005418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541c:	e0a1      	b.n	8005562 <UART_SetConfig+0x2e6>
 800541e:	2310      	movs	r3, #16
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005424:	e09d      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4a      	ldr	r2, [pc, #296]	@ (8005554 <UART_SetConfig+0x2d8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d125      	bne.n	800547c <UART_SetConfig+0x200>
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <UART_SetConfig+0x2cc>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800543a:	2bc0      	cmp	r3, #192	@ 0xc0
 800543c:	d016      	beq.n	800546c <UART_SetConfig+0x1f0>
 800543e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005440:	d818      	bhi.n	8005474 <UART_SetConfig+0x1f8>
 8005442:	2b80      	cmp	r3, #128	@ 0x80
 8005444:	d00a      	beq.n	800545c <UART_SetConfig+0x1e0>
 8005446:	2b80      	cmp	r3, #128	@ 0x80
 8005448:	d814      	bhi.n	8005474 <UART_SetConfig+0x1f8>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <UART_SetConfig+0x1d8>
 800544e:	2b40      	cmp	r3, #64	@ 0x40
 8005450:	d008      	beq.n	8005464 <UART_SetConfig+0x1e8>
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x1f8>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545a:	e082      	b.n	8005562 <UART_SetConfig+0x2e6>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005462:	e07e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546a:	e07a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005472:	e076      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e072      	b.n	8005562 <UART_SetConfig+0x2e6>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a35      	ldr	r2, [pc, #212]	@ (8005558 <UART_SetConfig+0x2dc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d12a      	bne.n	80054dc <UART_SetConfig+0x260>
 8005486:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <UART_SetConfig+0x2cc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005494:	d01a      	beq.n	80054cc <UART_SetConfig+0x250>
 8005496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549a:	d81b      	bhi.n	80054d4 <UART_SetConfig+0x258>
 800549c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a0:	d00c      	beq.n	80054bc <UART_SetConfig+0x240>
 80054a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a6:	d815      	bhi.n	80054d4 <UART_SetConfig+0x258>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <UART_SetConfig+0x238>
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b0:	d008      	beq.n	80054c4 <UART_SetConfig+0x248>
 80054b2:	e00f      	b.n	80054d4 <UART_SetConfig+0x258>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ba:	e052      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054bc:	2302      	movs	r3, #2
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c2:	e04e      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ca:	e04a      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d2:	e046      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054da:	e042      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <UART_SetConfig+0x2c4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d13a      	bne.n	800555c <UART_SetConfig+0x2e0>
 80054e6:	4b18      	ldr	r3, [pc, #96]	@ (8005548 <UART_SetConfig+0x2cc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054f4:	d01a      	beq.n	800552c <UART_SetConfig+0x2b0>
 80054f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fa:	d81b      	bhi.n	8005534 <UART_SetConfig+0x2b8>
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d00c      	beq.n	800551c <UART_SetConfig+0x2a0>
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005506:	d815      	bhi.n	8005534 <UART_SetConfig+0x2b8>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <UART_SetConfig+0x298>
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d008      	beq.n	8005524 <UART_SetConfig+0x2a8>
 8005512:	e00f      	b.n	8005534 <UART_SetConfig+0x2b8>
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e022      	b.n	8005562 <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e01e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e01a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005532:	e016      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553a:	e012      	b.n	8005562 <UART_SetConfig+0x2e6>
 800553c:	efff69f3 	.word	0xefff69f3
 8005540:	40008000 	.word	0x40008000
 8005544:	40013800 	.word	0x40013800
 8005548:	40021000 	.word	0x40021000
 800554c:	40004400 	.word	0x40004400
 8005550:	40004800 	.word	0x40004800
 8005554:	40004c00 	.word	0x40004c00
 8005558:	40005000 	.word	0x40005000
 800555c:	2310      	movs	r3, #16
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a9f      	ldr	r2, [pc, #636]	@ (80057e4 <UART_SetConfig+0x568>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d17a      	bne.n	8005662 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800556c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005570:	2b08      	cmp	r3, #8
 8005572:	d824      	bhi.n	80055be <UART_SetConfig+0x342>
 8005574:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0x300>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055bf 	.word	0x080055bf
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055af 	.word	0x080055af
 8005590:	080055bf 	.word	0x080055bf
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055bf 	.word	0x080055bf
 800559c:	080055b7 	.word	0x080055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7fe fcda 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80055a4:	61f8      	str	r0, [r7, #28]
        break;
 80055a6:	e010      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a8:	4b8f      	ldr	r3, [pc, #572]	@ (80057e8 <UART_SetConfig+0x56c>)
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e00d      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	f7fe fc3b 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 80055b2:	61f8      	str	r0, [r7, #28]
        break;
 80055b4:	e009      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ba:	61fb      	str	r3, [r7, #28]
        break;
 80055bc:	e005      	b.n	80055ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80fb 	beq.w	80057c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d305      	bcc.n	80055ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d903      	bls.n	80055f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055f4:	e0e8      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2200      	movs	r2, #0
 80055fa:	461c      	mov	r4, r3
 80055fc:	4615      	mov	r5, r2
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	022b      	lsls	r3, r5, #8
 8005608:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800560c:	0222      	lsls	r2, r4, #8
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6849      	ldr	r1, [r1, #4]
 8005612:	0849      	lsrs	r1, r1, #1
 8005614:	2000      	movs	r0, #0
 8005616:	4688      	mov	r8, r1
 8005618:	4681      	mov	r9, r0
 800561a:	eb12 0a08 	adds.w	sl, r2, r8
 800561e:	eb43 0b09 	adc.w	fp, r3, r9
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fa fe1c 	bl	8000270 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005646:	d308      	bcc.n	800565a <UART_SetConfig+0x3de>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800564e:	d204      	bcs.n	800565a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e0b6      	b.n	80057c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005660:	e0b2      	b.n	80057c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566a:	d15e      	bne.n	800572a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800566c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005670:	2b08      	cmp	r3, #8
 8005672:	d828      	bhi.n	80056c6 <UART_SetConfig+0x44a>
 8005674:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0x400>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fc5a 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61f8      	str	r0, [r7, #28]
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fc6c 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80056ac:	61f8      	str	r0, [r7, #28]
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4d      	ldr	r3, [pc, #308]	@ (80057e8 <UART_SetConfig+0x56c>)
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe fbb7 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 80056ba:	61f8      	str	r0, [r7, #28]
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d077      	beq.n	80057c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005a      	lsls	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d916      	bls.n	8005722 <UART_SetConfig+0x4a6>
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fa:	d212      	bcs.n	8005722 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f023 030f 	bic.w	r3, r3, #15
 8005704:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b29a      	uxth	r2, r3
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	4313      	orrs	r3, r2
 8005716:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	8afa      	ldrh	r2, [r7, #22]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e052      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005728:	e04e      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800572a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800572e:	2b08      	cmp	r3, #8
 8005730:	d827      	bhi.n	8005782 <UART_SetConfig+0x506>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x4bc>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fe fbfc 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005760:	61f8      	str	r0, [r7, #28]
        break;
 8005762:	e014      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fe fc0e 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8005768:	61f8      	str	r0, [r7, #28]
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b1e      	ldr	r3, [pc, #120]	@ (80057e8 <UART_SetConfig+0x56c>)
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fe fb59 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005776:	61f8      	str	r0, [r7, #28]
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	61fb      	str	r3, [r7, #28]
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800578c:	bf00      	nop
    }

    if (pclk != 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085a      	lsrs	r2, r3, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	441a      	add	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b0f      	cmp	r3, #15
 80057ac:	d909      	bls.n	80057c2 <UART_SetConfig+0x546>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b4:	d205      	bcs.n	80057c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	e002      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	@ 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e2:	bf00      	nop
 80057e4:	40008000 	.word	0x40008000
 80057e8:	00f42400 	.word	0x00f42400

080057ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01a      	beq.n	8005902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ea:	d10a      	bne.n	8005902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b098      	sub	sp, #96	@ 0x60
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005940:	f7fb fce2 	bl	8001308 <HAL_GetTick>
 8005944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d12e      	bne.n	80059b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f88c 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d021      	beq.n	80059b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005982:	653b      	str	r3, [r7, #80]	@ 0x50
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800599a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e6      	bne.n	800596e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e062      	b.n	8005a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d149      	bne.n	8005a54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f856 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d03c      	beq.n	8005a54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	623b      	str	r3, [r7, #32]
   return(result);
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a2c:	61fa      	str	r2, [r7, #28]
 8005a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	617b      	str	r3, [r7, #20]
   return(result);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e011      	b.n	8005a78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3758      	adds	r7, #88	@ 0x58
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a90:	e04f      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a98:	d04b      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7fb fc35 	bl	8001308 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e04e      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d037      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b80      	cmp	r3, #128	@ 0x80
 8005ac6:	d034      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d031      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d110      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f8ff 	bl	8005ce8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2208      	movs	r2, #8
 8005aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e029      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b0c:	d111      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f8e5 	bl	8005ce8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e00f      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d0a0      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b097      	sub	sp, #92	@ 0x5c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8e:	d10e      	bne.n	8005bae <UART_Start_Receive_IT+0x52>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <UART_Start_Receive_IT+0x48>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ba2:	e02d      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	22ff      	movs	r2, #255	@ 0xff
 8005ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bac:	e028      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <UART_Start_Receive_IT+0x76>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <UART_Start_Receive_IT+0x6c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	@ 0xff
 8005bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bc6:	e01b      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	227f      	movs	r2, #127	@ 0x7f
 8005bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bd0:	e016      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bda:	d10d      	bne.n	8005bf8 <UART_Start_Receive_IT+0x9c>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <UART_Start_Receive_IT+0x92>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	227f      	movs	r2, #127	@ 0x7f
 8005be8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bec:	e008      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	223f      	movs	r2, #63	@ 0x3f
 8005bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bf6:	e003      	b.n	8005c00 <UART_Start_Receive_IT+0xa4>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2222      	movs	r2, #34	@ 0x22
 8005c0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4c:	d107      	bne.n	8005c5e <UART_Start_Receive_IT+0x102>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <UART_Start_Receive_IT+0x184>)
 8005c5a:	669a      	str	r2, [r3, #104]	@ 0x68
 8005c5c:	e002      	b.n	8005c64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <UART_Start_Receive_IT+0x188>)
 8005c62:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d019      	beq.n	8005ca0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <UART_Start_Receive_IT+0x110>
 8005c9e:	e018      	b.n	8005cd2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f043 0320 	orr.w	r3, r3, #32
 8005cb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cbe:	623b      	str	r3, [r7, #32]
 8005cc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e6      	bne.n	8005ca0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	375c      	adds	r7, #92	@ 0x5c
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	08005fed 	.word	0x08005fed
 8005ce4:	08005e31 	.word	0x08005e31

08005ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b095      	sub	sp, #84	@ 0x54
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e6      	bne.n	8005cf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d118      	bne.n	8005d90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6979      	ldr	r1, [r7, #20]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e6      	bne.n	8005d5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005da4:	bf00      	nop
 8005da6:	3754      	adds	r7, #84	@ 0x54
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fa3e 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6979      	ldr	r1, [r7, #20]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e6      	bne.n	8005de4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fa0a 	bl	800523c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e28:	bf00      	nop
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b09c      	sub	sp, #112	@ 0x70
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e48:	2b22      	cmp	r3, #34	@ 0x22
 8005e4a:	f040 80be 	bne.w	8005fca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e5c:	b2d9      	uxtb	r1, r3
 8005e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e68:	400a      	ands	r2, r1
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 80a3 	bne.w	8005fde <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a34      	ldr	r2, [pc, #208]	@ (8005fe8 <UART_RxISR_8BIT+0x1b8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01f      	beq.n	8005f5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d018      	beq.n	8005f5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	623b      	str	r3, [r7, #32]
   return(result);
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e6      	bne.n	8005f2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d12e      	bne.n	8005fc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d103      	bne.n	8005fb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff f952 	bl	8005264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fc0:	e00d      	b.n	8005fde <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fa fafc 	bl	80005c0 <HAL_UART_RxCpltCallback>
}
 8005fc8:	e009      	b.n	8005fde <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	8b1b      	ldrh	r3, [r3, #24]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0208 	orr.w	r2, r2, #8
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	831a      	strh	r2, [r3, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	3770      	adds	r7, #112	@ 0x70
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40008000 	.word	0x40008000

08005fec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b09c      	sub	sp, #112	@ 0x70
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006004:	2b22      	cmp	r3, #34	@ 0x22
 8006006:	f040 80be 	bne.w	8006186 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006010:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800601a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800601e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006022:	4013      	ands	r3, r2
 8006024:	b29a      	uxth	r2, r3
 8006026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006028:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602e:	1c9a      	adds	r2, r3, #2
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 80a3 	bne.w	800619a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006068:	667b      	str	r3, [r7, #100]	@ 0x64
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006072:	657b      	str	r3, [r7, #84]	@ 0x54
 8006074:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006078:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	663b      	str	r3, [r7, #96]	@ 0x60
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a34      	ldr	r2, [pc, #208]	@ (80061a4 <UART_RxISR_16BIT+0x1b8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01f      	beq.n	8006118 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006106:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611c:	2b01      	cmp	r3, #1
 800611e:	d12e      	bne.n	800617e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60bb      	str	r3, [r7, #8]
   return(result);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	613b      	str	r3, [r7, #16]
   return(result);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b10      	cmp	r3, #16
 8006164:	d103      	bne.n	800616e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2210      	movs	r2, #16
 800616c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff f874 	bl	8005264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800617c:	e00d      	b.n	800619a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fa fa1e 	bl	80005c0 <HAL_UART_RxCpltCallback>
}
 8006184:	e009      	b.n	800619a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	8b1b      	ldrh	r3, [r3, #24]
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0208 	orr.w	r2, r2, #8
 8006196:	b292      	uxth	r2, r2
 8006198:	831a      	strh	r2, [r3, #24]
}
 800619a:	bf00      	nop
 800619c:	3770      	adds	r7, #112	@ 0x70
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40008000 	.word	0x40008000

080061a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	@ 0x5c
 80061da:	f000 f921 	bl	8006420 <memset>
 80061de:	4b0d      	ldr	r3, [pc, #52]	@ (8006214 <std+0x58>)
 80061e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <std+0x5c>)
 80061e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <std+0x60>)
 80061e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <std+0x64>)
 80061ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <std+0x68>)
 80061f0:	6224      	str	r4, [r4, #32]
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d006      	beq.n	8006204 <std+0x48>
 80061f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061fa:	4294      	cmp	r4, r2
 80061fc:	d002      	beq.n	8006204 <std+0x48>
 80061fe:	33d0      	adds	r3, #208	@ 0xd0
 8006200:	429c      	cmp	r4, r3
 8006202:	d105      	bne.n	8006210 <std+0x54>
 8006204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620c:	f000 b93a 	b.w	8006484 <__retarget_lock_init_recursive>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	08006cf5 	.word	0x08006cf5
 8006218:	08006d17 	.word	0x08006d17
 800621c:	08006d4f 	.word	0x08006d4f
 8006220:	08006d73 	.word	0x08006d73
 8006224:	20000310 	.word	0x20000310

08006228 <stdio_exit_handler>:
 8006228:	4a02      	ldr	r2, [pc, #8]	@ (8006234 <stdio_exit_handler+0xc>)
 800622a:	4903      	ldr	r1, [pc, #12]	@ (8006238 <stdio_exit_handler+0x10>)
 800622c:	4803      	ldr	r0, [pc, #12]	@ (800623c <stdio_exit_handler+0x14>)
 800622e:	f000 b869 	b.w	8006304 <_fwalk_sglue>
 8006232:	bf00      	nop
 8006234:	20000010 	.word	0x20000010
 8006238:	08006c8d 	.word	0x08006c8d
 800623c:	20000020 	.word	0x20000020

08006240 <cleanup_stdio>:
 8006240:	6841      	ldr	r1, [r0, #4]
 8006242:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <cleanup_stdio+0x34>)
 8006244:	4299      	cmp	r1, r3
 8006246:	b510      	push	{r4, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	d001      	beq.n	8006250 <cleanup_stdio+0x10>
 800624c:	f000 fd1e 	bl	8006c8c <_fflush_r>
 8006250:	68a1      	ldr	r1, [r4, #8]
 8006252:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <cleanup_stdio+0x38>)
 8006254:	4299      	cmp	r1, r3
 8006256:	d002      	beq.n	800625e <cleanup_stdio+0x1e>
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fd17 	bl	8006c8c <_fflush_r>
 800625e:	68e1      	ldr	r1, [r4, #12]
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <cleanup_stdio+0x3c>)
 8006262:	4299      	cmp	r1, r3
 8006264:	d004      	beq.n	8006270 <cleanup_stdio+0x30>
 8006266:	4620      	mov	r0, r4
 8006268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626c:	f000 bd0e 	b.w	8006c8c <_fflush_r>
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop
 8006274:	20000310 	.word	0x20000310
 8006278:	20000378 	.word	0x20000378
 800627c:	200003e0 	.word	0x200003e0

08006280 <global_stdio_init.part.0>:
 8006280:	b510      	push	{r4, lr}
 8006282:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <global_stdio_init.part.0+0x30>)
 8006284:	4c0b      	ldr	r4, [pc, #44]	@ (80062b4 <global_stdio_init.part.0+0x34>)
 8006286:	4a0c      	ldr	r2, [pc, #48]	@ (80062b8 <global_stdio_init.part.0+0x38>)
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	4620      	mov	r0, r4
 800628c:	2200      	movs	r2, #0
 800628e:	2104      	movs	r1, #4
 8006290:	f7ff ff94 	bl	80061bc <std>
 8006294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006298:	2201      	movs	r2, #1
 800629a:	2109      	movs	r1, #9
 800629c:	f7ff ff8e 	bl	80061bc <std>
 80062a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062a4:	2202      	movs	r2, #2
 80062a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062aa:	2112      	movs	r1, #18
 80062ac:	f7ff bf86 	b.w	80061bc <std>
 80062b0:	20000448 	.word	0x20000448
 80062b4:	20000310 	.word	0x20000310
 80062b8:	08006229 	.word	0x08006229

080062bc <__sfp_lock_acquire>:
 80062bc:	4801      	ldr	r0, [pc, #4]	@ (80062c4 <__sfp_lock_acquire+0x8>)
 80062be:	f000 b8e2 	b.w	8006486 <__retarget_lock_acquire_recursive>
 80062c2:	bf00      	nop
 80062c4:	2000044d 	.word	0x2000044d

080062c8 <__sfp_lock_release>:
 80062c8:	4801      	ldr	r0, [pc, #4]	@ (80062d0 <__sfp_lock_release+0x8>)
 80062ca:	f000 b8dd 	b.w	8006488 <__retarget_lock_release_recursive>
 80062ce:	bf00      	nop
 80062d0:	2000044d 	.word	0x2000044d

080062d4 <__sinit>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4604      	mov	r4, r0
 80062d8:	f7ff fff0 	bl	80062bc <__sfp_lock_acquire>
 80062dc:	6a23      	ldr	r3, [r4, #32]
 80062de:	b11b      	cbz	r3, 80062e8 <__sinit+0x14>
 80062e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e4:	f7ff bff0 	b.w	80062c8 <__sfp_lock_release>
 80062e8:	4b04      	ldr	r3, [pc, #16]	@ (80062fc <__sinit+0x28>)
 80062ea:	6223      	str	r3, [r4, #32]
 80062ec:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <__sinit+0x2c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1f5      	bne.n	80062e0 <__sinit+0xc>
 80062f4:	f7ff ffc4 	bl	8006280 <global_stdio_init.part.0>
 80062f8:	e7f2      	b.n	80062e0 <__sinit+0xc>
 80062fa:	bf00      	nop
 80062fc:	08006241 	.word	0x08006241
 8006300:	20000448 	.word	0x20000448

08006304 <_fwalk_sglue>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	4607      	mov	r7, r0
 800630a:	4688      	mov	r8, r1
 800630c:	4614      	mov	r4, r2
 800630e:	2600      	movs	r6, #0
 8006310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006314:	f1b9 0901 	subs.w	r9, r9, #1
 8006318:	d505      	bpl.n	8006326 <_fwalk_sglue+0x22>
 800631a:	6824      	ldr	r4, [r4, #0]
 800631c:	2c00      	cmp	r4, #0
 800631e:	d1f7      	bne.n	8006310 <_fwalk_sglue+0xc>
 8006320:	4630      	mov	r0, r6
 8006322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d907      	bls.n	800633c <_fwalk_sglue+0x38>
 800632c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006330:	3301      	adds	r3, #1
 8006332:	d003      	beq.n	800633c <_fwalk_sglue+0x38>
 8006334:	4629      	mov	r1, r5
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	4306      	orrs	r6, r0
 800633c:	3568      	adds	r5, #104	@ 0x68
 800633e:	e7e9      	b.n	8006314 <_fwalk_sglue+0x10>

08006340 <iprintf>:
 8006340:	b40f      	push	{r0, r1, r2, r3}
 8006342:	b507      	push	{r0, r1, r2, lr}
 8006344:	4906      	ldr	r1, [pc, #24]	@ (8006360 <iprintf+0x20>)
 8006346:	ab04      	add	r3, sp, #16
 8006348:	6808      	ldr	r0, [r1, #0]
 800634a:	f853 2b04 	ldr.w	r2, [r3], #4
 800634e:	6881      	ldr	r1, [r0, #8]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	f000 f8d1 	bl	80064f8 <_vfiprintf_r>
 8006356:	b003      	add	sp, #12
 8006358:	f85d eb04 	ldr.w	lr, [sp], #4
 800635c:	b004      	add	sp, #16
 800635e:	4770      	bx	lr
 8006360:	2000001c 	.word	0x2000001c

08006364 <_puts_r>:
 8006364:	6a03      	ldr	r3, [r0, #32]
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	6884      	ldr	r4, [r0, #8]
 800636a:	4605      	mov	r5, r0
 800636c:	460e      	mov	r6, r1
 800636e:	b90b      	cbnz	r3, 8006374 <_puts_r+0x10>
 8006370:	f7ff ffb0 	bl	80062d4 <__sinit>
 8006374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d405      	bmi.n	8006386 <_puts_r+0x22>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	0598      	lsls	r0, r3, #22
 800637e:	d402      	bmi.n	8006386 <_puts_r+0x22>
 8006380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006382:	f000 f880 	bl	8006486 <__retarget_lock_acquire_recursive>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	0719      	lsls	r1, r3, #28
 800638a:	d502      	bpl.n	8006392 <_puts_r+0x2e>
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d135      	bne.n	80063fe <_puts_r+0x9a>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f000 fd2f 	bl	8006df8 <__swsetup_r>
 800639a:	b380      	cbz	r0, 80063fe <_puts_r+0x9a>
 800639c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80063a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d405      	bmi.n	80063b2 <_puts_r+0x4e>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	059b      	lsls	r3, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_puts_r+0x4e>
 80063ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ae:	f000 f86b 	bl	8006488 <__retarget_lock_release_recursive>
 80063b2:	4628      	mov	r0, r5
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da04      	bge.n	80063c4 <_puts_r+0x60>
 80063ba:	69a2      	ldr	r2, [r4, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	dc17      	bgt.n	80063f0 <_puts_r+0x8c>
 80063c0:	290a      	cmp	r1, #10
 80063c2:	d015      	beq.n	80063f0 <_puts_r+0x8c>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	6022      	str	r2, [r4, #0]
 80063ca:	7019      	strb	r1, [r3, #0]
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063d2:	3b01      	subs	r3, #1
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	2900      	cmp	r1, #0
 80063d8:	d1ed      	bne.n	80063b6 <_puts_r+0x52>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da11      	bge.n	8006402 <_puts_r+0x9e>
 80063de:	4622      	mov	r2, r4
 80063e0:	210a      	movs	r1, #10
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fcc9 	bl	8006d7a <__swbuf_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d0d7      	beq.n	800639c <_puts_r+0x38>
 80063ec:	250a      	movs	r5, #10
 80063ee:	e7d7      	b.n	80063a0 <_puts_r+0x3c>
 80063f0:	4622      	mov	r2, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fcc1 	bl	8006d7a <__swbuf_r>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d1e7      	bne.n	80063cc <_puts_r+0x68>
 80063fc:	e7ce      	b.n	800639c <_puts_r+0x38>
 80063fe:	3e01      	subs	r6, #1
 8006400:	e7e4      	b.n	80063cc <_puts_r+0x68>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	6022      	str	r2, [r4, #0]
 8006408:	220a      	movs	r2, #10
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e7ee      	b.n	80063ec <_puts_r+0x88>
	...

08006410 <puts>:
 8006410:	4b02      	ldr	r3, [pc, #8]	@ (800641c <puts+0xc>)
 8006412:	4601      	mov	r1, r0
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f7ff bfa5 	b.w	8006364 <_puts_r>
 800641a:	bf00      	nop
 800641c:	2000001c 	.word	0x2000001c

08006420 <memset>:
 8006420:	4402      	add	r2, r0
 8006422:	4603      	mov	r3, r0
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	f803 1b01 	strb.w	r1, [r3], #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <__errno>:
 8006430:	4b01      	ldr	r3, [pc, #4]	@ (8006438 <__errno+0x8>)
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	2000001c 	.word	0x2000001c

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	@ (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	@ (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	@ (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	@ (8006480 <__libc_init_array+0x44>)
 8006450:	f000 fe4c 	bl	80070ec <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	080071a0 	.word	0x080071a0
 8006478:	080071a0 	.word	0x080071a0
 800647c:	080071a0 	.word	0x080071a0
 8006480:	080071a4 	.word	0x080071a4

08006484 <__retarget_lock_init_recursive>:
 8006484:	4770      	bx	lr

08006486 <__retarget_lock_acquire_recursive>:
 8006486:	4770      	bx	lr

08006488 <__retarget_lock_release_recursive>:
 8006488:	4770      	bx	lr

0800648a <memcpy>:
 800648a:	440a      	add	r2, r1
 800648c:	4291      	cmp	r1, r2
 800648e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006492:	d100      	bne.n	8006496 <memcpy+0xc>
 8006494:	4770      	bx	lr
 8006496:	b510      	push	{r4, lr}
 8006498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a0:	4291      	cmp	r1, r2
 80064a2:	d1f9      	bne.n	8006498 <memcpy+0xe>
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__sfputc_r>:
 80064a6:	6893      	ldr	r3, [r2, #8]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	b410      	push	{r4}
 80064ae:	6093      	str	r3, [r2, #8]
 80064b0:	da08      	bge.n	80064c4 <__sfputc_r+0x1e>
 80064b2:	6994      	ldr	r4, [r2, #24]
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	db01      	blt.n	80064bc <__sfputc_r+0x16>
 80064b8:	290a      	cmp	r1, #10
 80064ba:	d103      	bne.n	80064c4 <__sfputc_r+0x1e>
 80064bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c0:	f000 bc5b 	b.w	8006d7a <__swbuf_r>
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	1c58      	adds	r0, r3, #1
 80064c8:	6010      	str	r0, [r2, #0]
 80064ca:	7019      	strb	r1, [r3, #0]
 80064cc:	4608      	mov	r0, r1
 80064ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <__sfputs_r>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	4606      	mov	r6, r0
 80064d8:	460f      	mov	r7, r1
 80064da:	4614      	mov	r4, r2
 80064dc:	18d5      	adds	r5, r2, r3
 80064de:	42ac      	cmp	r4, r5
 80064e0:	d101      	bne.n	80064e6 <__sfputs_r+0x12>
 80064e2:	2000      	movs	r0, #0
 80064e4:	e007      	b.n	80064f6 <__sfputs_r+0x22>
 80064e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ea:	463a      	mov	r2, r7
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff ffda 	bl	80064a6 <__sfputc_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d1f3      	bne.n	80064de <__sfputs_r+0xa>
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064f8 <_vfiprintf_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	460d      	mov	r5, r1
 80064fe:	b09d      	sub	sp, #116	@ 0x74
 8006500:	4614      	mov	r4, r2
 8006502:	4698      	mov	r8, r3
 8006504:	4606      	mov	r6, r0
 8006506:	b118      	cbz	r0, 8006510 <_vfiprintf_r+0x18>
 8006508:	6a03      	ldr	r3, [r0, #32]
 800650a:	b90b      	cbnz	r3, 8006510 <_vfiprintf_r+0x18>
 800650c:	f7ff fee2 	bl	80062d4 <__sinit>
 8006510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006512:	07d9      	lsls	r1, r3, #31
 8006514:	d405      	bmi.n	8006522 <_vfiprintf_r+0x2a>
 8006516:	89ab      	ldrh	r3, [r5, #12]
 8006518:	059a      	lsls	r2, r3, #22
 800651a:	d402      	bmi.n	8006522 <_vfiprintf_r+0x2a>
 800651c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800651e:	f7ff ffb2 	bl	8006486 <__retarget_lock_acquire_recursive>
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	071b      	lsls	r3, r3, #28
 8006526:	d501      	bpl.n	800652c <_vfiprintf_r+0x34>
 8006528:	692b      	ldr	r3, [r5, #16]
 800652a:	b99b      	cbnz	r3, 8006554 <_vfiprintf_r+0x5c>
 800652c:	4629      	mov	r1, r5
 800652e:	4630      	mov	r0, r6
 8006530:	f000 fc62 	bl	8006df8 <__swsetup_r>
 8006534:	b170      	cbz	r0, 8006554 <_vfiprintf_r+0x5c>
 8006536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006538:	07dc      	lsls	r4, r3, #31
 800653a:	d504      	bpl.n	8006546 <_vfiprintf_r+0x4e>
 800653c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006540:	b01d      	add	sp, #116	@ 0x74
 8006542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	0598      	lsls	r0, r3, #22
 800654a:	d4f7      	bmi.n	800653c <_vfiprintf_r+0x44>
 800654c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800654e:	f7ff ff9b 	bl	8006488 <__retarget_lock_release_recursive>
 8006552:	e7f3      	b.n	800653c <_vfiprintf_r+0x44>
 8006554:	2300      	movs	r3, #0
 8006556:	9309      	str	r3, [sp, #36]	@ 0x24
 8006558:	2320      	movs	r3, #32
 800655a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800655e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006562:	2330      	movs	r3, #48	@ 0x30
 8006564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006714 <_vfiprintf_r+0x21c>
 8006568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800656c:	f04f 0901 	mov.w	r9, #1
 8006570:	4623      	mov	r3, r4
 8006572:	469a      	mov	sl, r3
 8006574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006578:	b10a      	cbz	r2, 800657e <_vfiprintf_r+0x86>
 800657a:	2a25      	cmp	r2, #37	@ 0x25
 800657c:	d1f9      	bne.n	8006572 <_vfiprintf_r+0x7a>
 800657e:	ebba 0b04 	subs.w	fp, sl, r4
 8006582:	d00b      	beq.n	800659c <_vfiprintf_r+0xa4>
 8006584:	465b      	mov	r3, fp
 8006586:	4622      	mov	r2, r4
 8006588:	4629      	mov	r1, r5
 800658a:	4630      	mov	r0, r6
 800658c:	f7ff ffa2 	bl	80064d4 <__sfputs_r>
 8006590:	3001      	adds	r0, #1
 8006592:	f000 80a7 	beq.w	80066e4 <_vfiprintf_r+0x1ec>
 8006596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006598:	445a      	add	r2, fp
 800659a:	9209      	str	r2, [sp, #36]	@ 0x24
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 809f 	beq.w	80066e4 <_vfiprintf_r+0x1ec>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b0:	f10a 0a01 	add.w	sl, sl, #1
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80065be:	4654      	mov	r4, sl
 80065c0:	2205      	movs	r2, #5
 80065c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c6:	4853      	ldr	r0, [pc, #332]	@ (8006714 <_vfiprintf_r+0x21c>)
 80065c8:	f7f9 fe02 	bl	80001d0 <memchr>
 80065cc:	9a04      	ldr	r2, [sp, #16]
 80065ce:	b9d8      	cbnz	r0, 8006608 <_vfiprintf_r+0x110>
 80065d0:	06d1      	lsls	r1, r2, #27
 80065d2:	bf44      	itt	mi
 80065d4:	2320      	movmi	r3, #32
 80065d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065da:	0713      	lsls	r3, r2, #28
 80065dc:	bf44      	itt	mi
 80065de:	232b      	movmi	r3, #43	@ 0x2b
 80065e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e4:	f89a 3000 	ldrb.w	r3, [sl]
 80065e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ea:	d015      	beq.n	8006618 <_vfiprintf_r+0x120>
 80065ec:	9a07      	ldr	r2, [sp, #28]
 80065ee:	4654      	mov	r4, sl
 80065f0:	2000      	movs	r0, #0
 80065f2:	f04f 0c0a 	mov.w	ip, #10
 80065f6:	4621      	mov	r1, r4
 80065f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065fc:	3b30      	subs	r3, #48	@ 0x30
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d94b      	bls.n	800669a <_vfiprintf_r+0x1a2>
 8006602:	b1b0      	cbz	r0, 8006632 <_vfiprintf_r+0x13a>
 8006604:	9207      	str	r2, [sp, #28]
 8006606:	e014      	b.n	8006632 <_vfiprintf_r+0x13a>
 8006608:	eba0 0308 	sub.w	r3, r0, r8
 800660c:	fa09 f303 	lsl.w	r3, r9, r3
 8006610:	4313      	orrs	r3, r2
 8006612:	9304      	str	r3, [sp, #16]
 8006614:	46a2      	mov	sl, r4
 8006616:	e7d2      	b.n	80065be <_vfiprintf_r+0xc6>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	1d19      	adds	r1, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	9103      	str	r1, [sp, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	bfbb      	ittet	lt
 8006624:	425b      	neglt	r3, r3
 8006626:	f042 0202 	orrlt.w	r2, r2, #2
 800662a:	9307      	strge	r3, [sp, #28]
 800662c:	9307      	strlt	r3, [sp, #28]
 800662e:	bfb8      	it	lt
 8006630:	9204      	strlt	r2, [sp, #16]
 8006632:	7823      	ldrb	r3, [r4, #0]
 8006634:	2b2e      	cmp	r3, #46	@ 0x2e
 8006636:	d10a      	bne.n	800664e <_vfiprintf_r+0x156>
 8006638:	7863      	ldrb	r3, [r4, #1]
 800663a:	2b2a      	cmp	r3, #42	@ 0x2a
 800663c:	d132      	bne.n	80066a4 <_vfiprintf_r+0x1ac>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	9203      	str	r2, [sp, #12]
 8006646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800664a:	3402      	adds	r4, #2
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006724 <_vfiprintf_r+0x22c>
 8006652:	7821      	ldrb	r1, [r4, #0]
 8006654:	2203      	movs	r2, #3
 8006656:	4650      	mov	r0, sl
 8006658:	f7f9 fdba 	bl	80001d0 <memchr>
 800665c:	b138      	cbz	r0, 800666e <_vfiprintf_r+0x176>
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	eba0 000a 	sub.w	r0, r0, sl
 8006664:	2240      	movs	r2, #64	@ 0x40
 8006666:	4082      	lsls	r2, r0
 8006668:	4313      	orrs	r3, r2
 800666a:	3401      	adds	r4, #1
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006672:	4829      	ldr	r0, [pc, #164]	@ (8006718 <_vfiprintf_r+0x220>)
 8006674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006678:	2206      	movs	r2, #6
 800667a:	f7f9 fda9 	bl	80001d0 <memchr>
 800667e:	2800      	cmp	r0, #0
 8006680:	d03f      	beq.n	8006702 <_vfiprintf_r+0x20a>
 8006682:	4b26      	ldr	r3, [pc, #152]	@ (800671c <_vfiprintf_r+0x224>)
 8006684:	bb1b      	cbnz	r3, 80066ce <_vfiprintf_r+0x1d6>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	3307      	adds	r3, #7
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	3308      	adds	r3, #8
 8006690:	9303      	str	r3, [sp, #12]
 8006692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006694:	443b      	add	r3, r7
 8006696:	9309      	str	r3, [sp, #36]	@ 0x24
 8006698:	e76a      	b.n	8006570 <_vfiprintf_r+0x78>
 800669a:	fb0c 3202 	mla	r2, ip, r2, r3
 800669e:	460c      	mov	r4, r1
 80066a0:	2001      	movs	r0, #1
 80066a2:	e7a8      	b.n	80065f6 <_vfiprintf_r+0xfe>
 80066a4:	2300      	movs	r3, #0
 80066a6:	3401      	adds	r4, #1
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	4619      	mov	r1, r3
 80066ac:	f04f 0c0a 	mov.w	ip, #10
 80066b0:	4620      	mov	r0, r4
 80066b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b6:	3a30      	subs	r2, #48	@ 0x30
 80066b8:	2a09      	cmp	r2, #9
 80066ba:	d903      	bls.n	80066c4 <_vfiprintf_r+0x1cc>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0c6      	beq.n	800664e <_vfiprintf_r+0x156>
 80066c0:	9105      	str	r1, [sp, #20]
 80066c2:	e7c4      	b.n	800664e <_vfiprintf_r+0x156>
 80066c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c8:	4604      	mov	r4, r0
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7f0      	b.n	80066b0 <_vfiprintf_r+0x1b8>
 80066ce:	ab03      	add	r3, sp, #12
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	462a      	mov	r2, r5
 80066d4:	4b12      	ldr	r3, [pc, #72]	@ (8006720 <_vfiprintf_r+0x228>)
 80066d6:	a904      	add	r1, sp, #16
 80066d8:	4630      	mov	r0, r6
 80066da:	f3af 8000 	nop.w
 80066de:	4607      	mov	r7, r0
 80066e0:	1c78      	adds	r0, r7, #1
 80066e2:	d1d6      	bne.n	8006692 <_vfiprintf_r+0x19a>
 80066e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_vfiprintf_r+0x1fe>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	059a      	lsls	r2, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_vfiprintf_r+0x1fe>
 80066f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066f2:	f7ff fec9 	bl	8006488 <__retarget_lock_release_recursive>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	065b      	lsls	r3, r3, #25
 80066fa:	f53f af1f 	bmi.w	800653c <_vfiprintf_r+0x44>
 80066fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006700:	e71e      	b.n	8006540 <_vfiprintf_r+0x48>
 8006702:	ab03      	add	r3, sp, #12
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462a      	mov	r2, r5
 8006708:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <_vfiprintf_r+0x228>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f91b 	bl	8006948 <_printf_i>
 8006712:	e7e4      	b.n	80066de <_vfiprintf_r+0x1e6>
 8006714:	08007164 	.word	0x08007164
 8006718:	0800716e 	.word	0x0800716e
 800671c:	00000000 	.word	0x00000000
 8006720:	080064d5 	.word	0x080064d5
 8006724:	0800716a 	.word	0x0800716a

08006728 <sbrk_aligned>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4e0f      	ldr	r6, [pc, #60]	@ (8006768 <sbrk_aligned+0x40>)
 800672c:	460c      	mov	r4, r1
 800672e:	6831      	ldr	r1, [r6, #0]
 8006730:	4605      	mov	r5, r0
 8006732:	b911      	cbnz	r1, 800673a <sbrk_aligned+0x12>
 8006734:	f000 fc4c 	bl	8006fd0 <_sbrk_r>
 8006738:	6030      	str	r0, [r6, #0]
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 fc47 	bl	8006fd0 <_sbrk_r>
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d103      	bne.n	800674e <sbrk_aligned+0x26>
 8006746:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800674a:	4620      	mov	r0, r4
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	1cc4      	adds	r4, r0, #3
 8006750:	f024 0403 	bic.w	r4, r4, #3
 8006754:	42a0      	cmp	r0, r4
 8006756:	d0f8      	beq.n	800674a <sbrk_aligned+0x22>
 8006758:	1a21      	subs	r1, r4, r0
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fc38 	bl	8006fd0 <_sbrk_r>
 8006760:	3001      	adds	r0, #1
 8006762:	d1f2      	bne.n	800674a <sbrk_aligned+0x22>
 8006764:	e7ef      	b.n	8006746 <sbrk_aligned+0x1e>
 8006766:	bf00      	nop
 8006768:	20000450 	.word	0x20000450

0800676c <_malloc_r>:
 800676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006770:	1ccd      	adds	r5, r1, #3
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	2d00      	cmp	r5, #0
 8006780:	4606      	mov	r6, r0
 8006782:	db01      	blt.n	8006788 <_malloc_r+0x1c>
 8006784:	42a9      	cmp	r1, r5
 8006786:	d904      	bls.n	8006792 <_malloc_r+0x26>
 8006788:	230c      	movs	r3, #12
 800678a:	6033      	str	r3, [r6, #0]
 800678c:	2000      	movs	r0, #0
 800678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006868 <_malloc_r+0xfc>
 8006796:	f000 faa1 	bl	8006cdc <__malloc_lock>
 800679a:	f8d8 3000 	ldr.w	r3, [r8]
 800679e:	461c      	mov	r4, r3
 80067a0:	bb44      	cbnz	r4, 80067f4 <_malloc_r+0x88>
 80067a2:	4629      	mov	r1, r5
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff ffbf 	bl	8006728 <sbrk_aligned>
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	4604      	mov	r4, r0
 80067ae:	d158      	bne.n	8006862 <_malloc_r+0xf6>
 80067b0:	f8d8 4000 	ldr.w	r4, [r8]
 80067b4:	4627      	mov	r7, r4
 80067b6:	2f00      	cmp	r7, #0
 80067b8:	d143      	bne.n	8006842 <_malloc_r+0xd6>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d04b      	beq.n	8006856 <_malloc_r+0xea>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	4639      	mov	r1, r7
 80067c2:	4630      	mov	r0, r6
 80067c4:	eb04 0903 	add.w	r9, r4, r3
 80067c8:	f000 fc02 	bl	8006fd0 <_sbrk_r>
 80067cc:	4581      	cmp	r9, r0
 80067ce:	d142      	bne.n	8006856 <_malloc_r+0xea>
 80067d0:	6821      	ldr	r1, [r4, #0]
 80067d2:	1a6d      	subs	r5, r5, r1
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffa6 	bl	8006728 <sbrk_aligned>
 80067dc:	3001      	adds	r0, #1
 80067de:	d03a      	beq.n	8006856 <_malloc_r+0xea>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	442b      	add	r3, r5
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	bb62      	cbnz	r2, 8006848 <_malloc_r+0xdc>
 80067ee:	f8c8 7000 	str.w	r7, [r8]
 80067f2:	e00f      	b.n	8006814 <_malloc_r+0xa8>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	1b52      	subs	r2, r2, r5
 80067f8:	d420      	bmi.n	800683c <_malloc_r+0xd0>
 80067fa:	2a0b      	cmp	r2, #11
 80067fc:	d917      	bls.n	800682e <_malloc_r+0xc2>
 80067fe:	1961      	adds	r1, r4, r5
 8006800:	42a3      	cmp	r3, r4
 8006802:	6025      	str	r5, [r4, #0]
 8006804:	bf18      	it	ne
 8006806:	6059      	strne	r1, [r3, #4]
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	bf08      	it	eq
 800680c:	f8c8 1000 	streq.w	r1, [r8]
 8006810:	5162      	str	r2, [r4, r5]
 8006812:	604b      	str	r3, [r1, #4]
 8006814:	4630      	mov	r0, r6
 8006816:	f000 fa67 	bl	8006ce8 <__malloc_unlock>
 800681a:	f104 000b 	add.w	r0, r4, #11
 800681e:	1d23      	adds	r3, r4, #4
 8006820:	f020 0007 	bic.w	r0, r0, #7
 8006824:	1ac2      	subs	r2, r0, r3
 8006826:	bf1c      	itt	ne
 8006828:	1a1b      	subne	r3, r3, r0
 800682a:	50a3      	strne	r3, [r4, r2]
 800682c:	e7af      	b.n	800678e <_malloc_r+0x22>
 800682e:	6862      	ldr	r2, [r4, #4]
 8006830:	42a3      	cmp	r3, r4
 8006832:	bf0c      	ite	eq
 8006834:	f8c8 2000 	streq.w	r2, [r8]
 8006838:	605a      	strne	r2, [r3, #4]
 800683a:	e7eb      	b.n	8006814 <_malloc_r+0xa8>
 800683c:	4623      	mov	r3, r4
 800683e:	6864      	ldr	r4, [r4, #4]
 8006840:	e7ae      	b.n	80067a0 <_malloc_r+0x34>
 8006842:	463c      	mov	r4, r7
 8006844:	687f      	ldr	r7, [r7, #4]
 8006846:	e7b6      	b.n	80067b6 <_malloc_r+0x4a>
 8006848:	461a      	mov	r2, r3
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	42a3      	cmp	r3, r4
 800684e:	d1fb      	bne.n	8006848 <_malloc_r+0xdc>
 8006850:	2300      	movs	r3, #0
 8006852:	6053      	str	r3, [r2, #4]
 8006854:	e7de      	b.n	8006814 <_malloc_r+0xa8>
 8006856:	230c      	movs	r3, #12
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	4630      	mov	r0, r6
 800685c:	f000 fa44 	bl	8006ce8 <__malloc_unlock>
 8006860:	e794      	b.n	800678c <_malloc_r+0x20>
 8006862:	6005      	str	r5, [r0, #0]
 8006864:	e7d6      	b.n	8006814 <_malloc_r+0xa8>
 8006866:	bf00      	nop
 8006868:	20000454 	.word	0x20000454

0800686c <_printf_common>:
 800686c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	4616      	mov	r6, r2
 8006872:	4698      	mov	r8, r3
 8006874:	688a      	ldr	r2, [r1, #8]
 8006876:	690b      	ldr	r3, [r1, #16]
 8006878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800687c:	4293      	cmp	r3, r2
 800687e:	bfb8      	it	lt
 8006880:	4613      	movlt	r3, r2
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006888:	4607      	mov	r7, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b10a      	cbz	r2, 8006892 <_printf_common+0x26>
 800688e:	3301      	adds	r3, #1
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	0699      	lsls	r1, r3, #26
 8006896:	bf42      	ittt	mi
 8006898:	6833      	ldrmi	r3, [r6, #0]
 800689a:	3302      	addmi	r3, #2
 800689c:	6033      	strmi	r3, [r6, #0]
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	f015 0506 	ands.w	r5, r5, #6
 80068a4:	d106      	bne.n	80068b4 <_printf_common+0x48>
 80068a6:	f104 0a19 	add.w	sl, r4, #25
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	6832      	ldr	r2, [r6, #0]
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dc26      	bgt.n	8006902 <_printf_common+0x96>
 80068b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	3b00      	subs	r3, #0
 80068bc:	bf18      	it	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	0692      	lsls	r2, r2, #26
 80068c2:	d42b      	bmi.n	800691c <_printf_common+0xb0>
 80068c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068c8:	4641      	mov	r1, r8
 80068ca:	4638      	mov	r0, r7
 80068cc:	47c8      	blx	r9
 80068ce:	3001      	adds	r0, #1
 80068d0:	d01e      	beq.n	8006910 <_printf_common+0xa4>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	f003 0306 	and.w	r3, r3, #6
 80068da:	2b04      	cmp	r3, #4
 80068dc:	bf02      	ittt	eq
 80068de:	68e5      	ldreq	r5, [r4, #12]
 80068e0:	6833      	ldreq	r3, [r6, #0]
 80068e2:	1aed      	subeq	r5, r5, r3
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	bf0c      	ite	eq
 80068e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068ec:	2500      	movne	r5, #0
 80068ee:	4293      	cmp	r3, r2
 80068f0:	bfc4      	itt	gt
 80068f2:	1a9b      	subgt	r3, r3, r2
 80068f4:	18ed      	addgt	r5, r5, r3
 80068f6:	2600      	movs	r6, #0
 80068f8:	341a      	adds	r4, #26
 80068fa:	42b5      	cmp	r5, r6
 80068fc:	d11a      	bne.n	8006934 <_printf_common+0xc8>
 80068fe:	2000      	movs	r0, #0
 8006900:	e008      	b.n	8006914 <_printf_common+0xa8>
 8006902:	2301      	movs	r3, #1
 8006904:	4652      	mov	r2, sl
 8006906:	4641      	mov	r1, r8
 8006908:	4638      	mov	r0, r7
 800690a:	47c8      	blx	r9
 800690c:	3001      	adds	r0, #1
 800690e:	d103      	bne.n	8006918 <_printf_common+0xac>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006918:	3501      	adds	r5, #1
 800691a:	e7c6      	b.n	80068aa <_printf_common+0x3e>
 800691c:	18e1      	adds	r1, r4, r3
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	2030      	movs	r0, #48	@ 0x30
 8006922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006926:	4422      	add	r2, r4
 8006928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800692c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006930:	3302      	adds	r3, #2
 8006932:	e7c7      	b.n	80068c4 <_printf_common+0x58>
 8006934:	2301      	movs	r3, #1
 8006936:	4622      	mov	r2, r4
 8006938:	4641      	mov	r1, r8
 800693a:	4638      	mov	r0, r7
 800693c:	47c8      	blx	r9
 800693e:	3001      	adds	r0, #1
 8006940:	d0e6      	beq.n	8006910 <_printf_common+0xa4>
 8006942:	3601      	adds	r6, #1
 8006944:	e7d9      	b.n	80068fa <_printf_common+0x8e>
	...

08006948 <_printf_i>:
 8006948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	7e0f      	ldrb	r7, [r1, #24]
 800694e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006950:	2f78      	cmp	r7, #120	@ 0x78
 8006952:	4691      	mov	r9, r2
 8006954:	4680      	mov	r8, r0
 8006956:	460c      	mov	r4, r1
 8006958:	469a      	mov	sl, r3
 800695a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800695e:	d807      	bhi.n	8006970 <_printf_i+0x28>
 8006960:	2f62      	cmp	r7, #98	@ 0x62
 8006962:	d80a      	bhi.n	800697a <_printf_i+0x32>
 8006964:	2f00      	cmp	r7, #0
 8006966:	f000 80d1 	beq.w	8006b0c <_printf_i+0x1c4>
 800696a:	2f58      	cmp	r7, #88	@ 0x58
 800696c:	f000 80b8 	beq.w	8006ae0 <_printf_i+0x198>
 8006970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006978:	e03a      	b.n	80069f0 <_printf_i+0xa8>
 800697a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800697e:	2b15      	cmp	r3, #21
 8006980:	d8f6      	bhi.n	8006970 <_printf_i+0x28>
 8006982:	a101      	add	r1, pc, #4	@ (adr r1, 8006988 <_printf_i+0x40>)
 8006984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006988:	080069e1 	.word	0x080069e1
 800698c:	080069f5 	.word	0x080069f5
 8006990:	08006971 	.word	0x08006971
 8006994:	08006971 	.word	0x08006971
 8006998:	08006971 	.word	0x08006971
 800699c:	08006971 	.word	0x08006971
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	08006971 	.word	0x08006971
 80069a8:	08006971 	.word	0x08006971
 80069ac:	08006971 	.word	0x08006971
 80069b0:	08006971 	.word	0x08006971
 80069b4:	08006af3 	.word	0x08006af3
 80069b8:	08006a1f 	.word	0x08006a1f
 80069bc:	08006aad 	.word	0x08006aad
 80069c0:	08006971 	.word	0x08006971
 80069c4:	08006971 	.word	0x08006971
 80069c8:	08006b15 	.word	0x08006b15
 80069cc:	08006971 	.word	0x08006971
 80069d0:	08006a1f 	.word	0x08006a1f
 80069d4:	08006971 	.word	0x08006971
 80069d8:	08006971 	.word	0x08006971
 80069dc:	08006ab5 	.word	0x08006ab5
 80069e0:	6833      	ldr	r3, [r6, #0]
 80069e2:	1d1a      	adds	r2, r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6032      	str	r2, [r6, #0]
 80069e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069f0:	2301      	movs	r3, #1
 80069f2:	e09c      	b.n	8006b2e <_printf_i+0x1e6>
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	6820      	ldr	r0, [r4, #0]
 80069f8:	1d19      	adds	r1, r3, #4
 80069fa:	6031      	str	r1, [r6, #0]
 80069fc:	0606      	lsls	r6, r0, #24
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0xbc>
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	e003      	b.n	8006a0c <_printf_i+0xc4>
 8006a04:	0645      	lsls	r5, r0, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0xb8>
 8006a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	da03      	bge.n	8006a18 <_printf_i+0xd0>
 8006a10:	232d      	movs	r3, #45	@ 0x2d
 8006a12:	426d      	negs	r5, r5
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a18:	4858      	ldr	r0, [pc, #352]	@ (8006b7c <_printf_i+0x234>)
 8006a1a:	230a      	movs	r3, #10
 8006a1c:	e011      	b.n	8006a42 <_printf_i+0xfa>
 8006a1e:	6821      	ldr	r1, [r4, #0]
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	0608      	lsls	r0, r1, #24
 8006a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a28:	d402      	bmi.n	8006a30 <_printf_i+0xe8>
 8006a2a:	0649      	lsls	r1, r1, #25
 8006a2c:	bf48      	it	mi
 8006a2e:	b2ad      	uxthmi	r5, r5
 8006a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a32:	4852      	ldr	r0, [pc, #328]	@ (8006b7c <_printf_i+0x234>)
 8006a34:	6033      	str	r3, [r6, #0]
 8006a36:	bf14      	ite	ne
 8006a38:	230a      	movne	r3, #10
 8006a3a:	2308      	moveq	r3, #8
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a42:	6866      	ldr	r6, [r4, #4]
 8006a44:	60a6      	str	r6, [r4, #8]
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	db05      	blt.n	8006a56 <_printf_i+0x10e>
 8006a4a:	6821      	ldr	r1, [r4, #0]
 8006a4c:	432e      	orrs	r6, r5
 8006a4e:	f021 0104 	bic.w	r1, r1, #4
 8006a52:	6021      	str	r1, [r4, #0]
 8006a54:	d04b      	beq.n	8006aee <_printf_i+0x1a6>
 8006a56:	4616      	mov	r6, r2
 8006a58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006a60:	5dc7      	ldrb	r7, [r0, r7]
 8006a62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a66:	462f      	mov	r7, r5
 8006a68:	42bb      	cmp	r3, r7
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	d9f4      	bls.n	8006a58 <_printf_i+0x110>
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d10b      	bne.n	8006a8a <_printf_i+0x142>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	07df      	lsls	r7, r3, #31
 8006a76:	d508      	bpl.n	8006a8a <_printf_i+0x142>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	6861      	ldr	r1, [r4, #4]
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	bfde      	ittt	le
 8006a80:	2330      	movle	r3, #48	@ 0x30
 8006a82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006a8a:	1b92      	subs	r2, r2, r6
 8006a8c:	6122      	str	r2, [r4, #16]
 8006a8e:	f8cd a000 	str.w	sl, [sp]
 8006a92:	464b      	mov	r3, r9
 8006a94:	aa03      	add	r2, sp, #12
 8006a96:	4621      	mov	r1, r4
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f7ff fee7 	bl	800686c <_printf_common>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d14a      	bne.n	8006b38 <_printf_i+0x1f0>
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aa6:	b004      	add	sp, #16
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	f043 0320 	orr.w	r3, r3, #32
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	4832      	ldr	r0, [pc, #200]	@ (8006b80 <_printf_i+0x238>)
 8006ab6:	2778      	movs	r7, #120	@ 0x78
 8006ab8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	6831      	ldr	r1, [r6, #0]
 8006ac0:	061f      	lsls	r7, r3, #24
 8006ac2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ac6:	d402      	bmi.n	8006ace <_printf_i+0x186>
 8006ac8:	065f      	lsls	r7, r3, #25
 8006aca:	bf48      	it	mi
 8006acc:	b2ad      	uxthmi	r5, r5
 8006ace:	6031      	str	r1, [r6, #0]
 8006ad0:	07d9      	lsls	r1, r3, #31
 8006ad2:	bf44      	itt	mi
 8006ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad8:	6023      	strmi	r3, [r4, #0]
 8006ada:	b11d      	cbz	r5, 8006ae4 <_printf_i+0x19c>
 8006adc:	2310      	movs	r3, #16
 8006ade:	e7ad      	b.n	8006a3c <_printf_i+0xf4>
 8006ae0:	4826      	ldr	r0, [pc, #152]	@ (8006b7c <_printf_i+0x234>)
 8006ae2:	e7e9      	b.n	8006ab8 <_printf_i+0x170>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	e7f6      	b.n	8006adc <_printf_i+0x194>
 8006aee:	4616      	mov	r6, r2
 8006af0:	e7bd      	b.n	8006a6e <_printf_i+0x126>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	6825      	ldr	r5, [r4, #0]
 8006af6:	6961      	ldr	r1, [r4, #20]
 8006af8:	1d18      	adds	r0, r3, #4
 8006afa:	6030      	str	r0, [r6, #0]
 8006afc:	062e      	lsls	r6, r5, #24
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	d501      	bpl.n	8006b06 <_printf_i+0x1be>
 8006b02:	6019      	str	r1, [r3, #0]
 8006b04:	e002      	b.n	8006b0c <_printf_i+0x1c4>
 8006b06:	0668      	lsls	r0, r5, #25
 8006b08:	d5fb      	bpl.n	8006b02 <_printf_i+0x1ba>
 8006b0a:	8019      	strh	r1, [r3, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	4616      	mov	r6, r2
 8006b12:	e7bc      	b.n	8006a8e <_printf_i+0x146>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	6032      	str	r2, [r6, #0]
 8006b1a:	681e      	ldr	r6, [r3, #0]
 8006b1c:	6862      	ldr	r2, [r4, #4]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7f9 fb55 	bl	80001d0 <memchr>
 8006b26:	b108      	cbz	r0, 8006b2c <_printf_i+0x1e4>
 8006b28:	1b80      	subs	r0, r0, r6
 8006b2a:	6060      	str	r0, [r4, #4]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	6123      	str	r3, [r4, #16]
 8006b30:	2300      	movs	r3, #0
 8006b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b36:	e7aa      	b.n	8006a8e <_printf_i+0x146>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4640      	mov	r0, r8
 8006b40:	47d0      	blx	sl
 8006b42:	3001      	adds	r0, #1
 8006b44:	d0ad      	beq.n	8006aa2 <_printf_i+0x15a>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	079b      	lsls	r3, r3, #30
 8006b4a:	d413      	bmi.n	8006b74 <_printf_i+0x22c>
 8006b4c:	68e0      	ldr	r0, [r4, #12]
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	4298      	cmp	r0, r3
 8006b52:	bfb8      	it	lt
 8006b54:	4618      	movlt	r0, r3
 8006b56:	e7a6      	b.n	8006aa6 <_printf_i+0x15e>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4640      	mov	r0, r8
 8006b60:	47d0      	blx	sl
 8006b62:	3001      	adds	r0, #1
 8006b64:	d09d      	beq.n	8006aa2 <_printf_i+0x15a>
 8006b66:	3501      	adds	r5, #1
 8006b68:	68e3      	ldr	r3, [r4, #12]
 8006b6a:	9903      	ldr	r1, [sp, #12]
 8006b6c:	1a5b      	subs	r3, r3, r1
 8006b6e:	42ab      	cmp	r3, r5
 8006b70:	dcf2      	bgt.n	8006b58 <_printf_i+0x210>
 8006b72:	e7eb      	b.n	8006b4c <_printf_i+0x204>
 8006b74:	2500      	movs	r5, #0
 8006b76:	f104 0619 	add.w	r6, r4, #25
 8006b7a:	e7f5      	b.n	8006b68 <_printf_i+0x220>
 8006b7c:	08007175 	.word	0x08007175
 8006b80:	08007186 	.word	0x08007186

08006b84 <__sflush_r>:
 8006b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	0716      	lsls	r6, r2, #28
 8006b8e:	4605      	mov	r5, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	d454      	bmi.n	8006c3e <__sflush_r+0xba>
 8006b94:	684b      	ldr	r3, [r1, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dc02      	bgt.n	8006ba0 <__sflush_r+0x1c>
 8006b9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dd48      	ble.n	8006c32 <__sflush_r+0xae>
 8006ba0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	d045      	beq.n	8006c32 <__sflush_r+0xae>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bac:	682f      	ldr	r7, [r5, #0]
 8006bae:	6a21      	ldr	r1, [r4, #32]
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	d030      	beq.n	8006c16 <__sflush_r+0x92>
 8006bb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	0759      	lsls	r1, r3, #29
 8006bba:	d505      	bpl.n	8006bc8 <__sflush_r+0x44>
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bc2:	b10b      	cbz	r3, 8006bc8 <__sflush_r+0x44>
 8006bc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bcc:	6a21      	ldr	r1, [r4, #32]
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b0      	blx	r6
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	d106      	bne.n	8006be6 <__sflush_r+0x62>
 8006bd8:	6829      	ldr	r1, [r5, #0]
 8006bda:	291d      	cmp	r1, #29
 8006bdc:	d82b      	bhi.n	8006c36 <__sflush_r+0xb2>
 8006bde:	4a2a      	ldr	r2, [pc, #168]	@ (8006c88 <__sflush_r+0x104>)
 8006be0:	40ca      	lsrs	r2, r1
 8006be2:	07d6      	lsls	r6, r2, #31
 8006be4:	d527      	bpl.n	8006c36 <__sflush_r+0xb2>
 8006be6:	2200      	movs	r2, #0
 8006be8:	6062      	str	r2, [r4, #4]
 8006bea:	04d9      	lsls	r1, r3, #19
 8006bec:	6922      	ldr	r2, [r4, #16]
 8006bee:	6022      	str	r2, [r4, #0]
 8006bf0:	d504      	bpl.n	8006bfc <__sflush_r+0x78>
 8006bf2:	1c42      	adds	r2, r0, #1
 8006bf4:	d101      	bne.n	8006bfa <__sflush_r+0x76>
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	b903      	cbnz	r3, 8006bfc <__sflush_r+0x78>
 8006bfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bfe:	602f      	str	r7, [r5, #0]
 8006c00:	b1b9      	cbz	r1, 8006c32 <__sflush_r+0xae>
 8006c02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c06:	4299      	cmp	r1, r3
 8006c08:	d002      	beq.n	8006c10 <__sflush_r+0x8c>
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 fa24 	bl	8007058 <_free_r>
 8006c10:	2300      	movs	r3, #0
 8006c12:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c14:	e00d      	b.n	8006c32 <__sflush_r+0xae>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b0      	blx	r6
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	1c50      	adds	r0, r2, #1
 8006c20:	d1c9      	bne.n	8006bb6 <__sflush_r+0x32>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0c6      	beq.n	8006bb6 <__sflush_r+0x32>
 8006c28:	2b1d      	cmp	r3, #29
 8006c2a:	d001      	beq.n	8006c30 <__sflush_r+0xac>
 8006c2c:	2b16      	cmp	r3, #22
 8006c2e:	d11e      	bne.n	8006c6e <__sflush_r+0xea>
 8006c30:	602f      	str	r7, [r5, #0]
 8006c32:	2000      	movs	r0, #0
 8006c34:	e022      	b.n	8006c7c <__sflush_r+0xf8>
 8006c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3a:	b21b      	sxth	r3, r3
 8006c3c:	e01b      	b.n	8006c76 <__sflush_r+0xf2>
 8006c3e:	690f      	ldr	r7, [r1, #16]
 8006c40:	2f00      	cmp	r7, #0
 8006c42:	d0f6      	beq.n	8006c32 <__sflush_r+0xae>
 8006c44:	0793      	lsls	r3, r2, #30
 8006c46:	680e      	ldr	r6, [r1, #0]
 8006c48:	bf08      	it	eq
 8006c4a:	694b      	ldreq	r3, [r1, #20]
 8006c4c:	600f      	str	r7, [r1, #0]
 8006c4e:	bf18      	it	ne
 8006c50:	2300      	movne	r3, #0
 8006c52:	eba6 0807 	sub.w	r8, r6, r7
 8006c56:	608b      	str	r3, [r1, #8]
 8006c58:	f1b8 0f00 	cmp.w	r8, #0
 8006c5c:	dde9      	ble.n	8006c32 <__sflush_r+0xae>
 8006c5e:	6a21      	ldr	r1, [r4, #32]
 8006c60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c62:	4643      	mov	r3, r8
 8006c64:	463a      	mov	r2, r7
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b0      	blx	r6
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	dc08      	bgt.n	8006c80 <__sflush_r+0xfc>
 8006c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	4407      	add	r7, r0
 8006c82:	eba8 0800 	sub.w	r8, r8, r0
 8006c86:	e7e7      	b.n	8006c58 <__sflush_r+0xd4>
 8006c88:	20400001 	.word	0x20400001

08006c8c <_fflush_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	b913      	cbnz	r3, 8006c9c <_fflush_r+0x10>
 8006c96:	2500      	movs	r5, #0
 8006c98:	4628      	mov	r0, r5
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	b118      	cbz	r0, 8006ca6 <_fflush_r+0x1a>
 8006c9e:	6a03      	ldr	r3, [r0, #32]
 8006ca0:	b90b      	cbnz	r3, 8006ca6 <_fflush_r+0x1a>
 8006ca2:	f7ff fb17 	bl	80062d4 <__sinit>
 8006ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f3      	beq.n	8006c96 <_fflush_r+0xa>
 8006cae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cb0:	07d0      	lsls	r0, r2, #31
 8006cb2:	d404      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb4:	0599      	lsls	r1, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cba:	f7ff fbe4 	bl	8006486 <__retarget_lock_acquire_recursive>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f7ff ff5f 	bl	8006b84 <__sflush_r>
 8006cc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cc8:	07da      	lsls	r2, r3, #31
 8006cca:	4605      	mov	r5, r0
 8006ccc:	d4e4      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	059b      	lsls	r3, r3, #22
 8006cd2:	d4e1      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd6:	f7ff fbd7 	bl	8006488 <__retarget_lock_release_recursive>
 8006cda:	e7dd      	b.n	8006c98 <_fflush_r+0xc>

08006cdc <__malloc_lock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	@ (8006ce4 <__malloc_lock+0x8>)
 8006cde:	f7ff bbd2 	b.w	8006486 <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	2000044c 	.word	0x2000044c

08006ce8 <__malloc_unlock>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	@ (8006cf0 <__malloc_unlock+0x8>)
 8006cea:	f7ff bbcd 	b.w	8006488 <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	2000044c 	.word	0x2000044c

08006cf4 <__sread>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	f000 f956 	bl	8006fac <_read_r>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	bfab      	itete	ge
 8006d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d06:	89a3      	ldrhlt	r3, [r4, #12]
 8006d08:	181b      	addge	r3, r3, r0
 8006d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d0e:	bfac      	ite	ge
 8006d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d12:	81a3      	strhlt	r3, [r4, #12]
 8006d14:	bd10      	pop	{r4, pc}

08006d16 <__swrite>:
 8006d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	898b      	ldrh	r3, [r1, #12]
 8006d1e:	05db      	lsls	r3, r3, #23
 8006d20:	4605      	mov	r5, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	4616      	mov	r6, r2
 8006d26:	d505      	bpl.n	8006d34 <__swrite+0x1e>
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f000 f92a 	bl	8006f88 <_lseek_r>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	4632      	mov	r2, r6
 8006d42:	463b      	mov	r3, r7
 8006d44:	4628      	mov	r0, r5
 8006d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	f000 b951 	b.w	8006ff0 <_write_r>

08006d4e <__sseek>:
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	460c      	mov	r4, r1
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 f917 	bl	8006f88 <_lseek_r>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	bf15      	itete	ne
 8006d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d6a:	81a3      	strheq	r3, [r4, #12]
 8006d6c:	bf18      	it	ne
 8006d6e:	81a3      	strhne	r3, [r4, #12]
 8006d70:	bd10      	pop	{r4, pc}

08006d72 <__sclose>:
 8006d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d76:	f000 b94d 	b.w	8007014 <_close_r>

08006d7a <__swbuf_r>:
 8006d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7c:	460e      	mov	r6, r1
 8006d7e:	4614      	mov	r4, r2
 8006d80:	4605      	mov	r5, r0
 8006d82:	b118      	cbz	r0, 8006d8c <__swbuf_r+0x12>
 8006d84:	6a03      	ldr	r3, [r0, #32]
 8006d86:	b90b      	cbnz	r3, 8006d8c <__swbuf_r+0x12>
 8006d88:	f7ff faa4 	bl	80062d4 <__sinit>
 8006d8c:	69a3      	ldr	r3, [r4, #24]
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	071a      	lsls	r2, r3, #28
 8006d94:	d501      	bpl.n	8006d9a <__swbuf_r+0x20>
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	b943      	cbnz	r3, 8006dac <__swbuf_r+0x32>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 f82b 	bl	8006df8 <__swsetup_r>
 8006da2:	b118      	cbz	r0, 8006dac <__swbuf_r+0x32>
 8006da4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006da8:	4638      	mov	r0, r7
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	1a98      	subs	r0, r3, r2
 8006db2:	6963      	ldr	r3, [r4, #20]
 8006db4:	b2f6      	uxtb	r6, r6
 8006db6:	4283      	cmp	r3, r0
 8006db8:	4637      	mov	r7, r6
 8006dba:	dc05      	bgt.n	8006dc8 <__swbuf_r+0x4e>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7ff ff64 	bl	8006c8c <_fflush_r>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1ed      	bne.n	8006da4 <__swbuf_r+0x2a>
 8006dc8:	68a3      	ldr	r3, [r4, #8]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	6022      	str	r2, [r4, #0]
 8006dd4:	701e      	strb	r6, [r3, #0]
 8006dd6:	6962      	ldr	r2, [r4, #20]
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d004      	beq.n	8006de8 <__swbuf_r+0x6e>
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	07db      	lsls	r3, r3, #31
 8006de2:	d5e1      	bpl.n	8006da8 <__swbuf_r+0x2e>
 8006de4:	2e0a      	cmp	r6, #10
 8006de6:	d1df      	bne.n	8006da8 <__swbuf_r+0x2e>
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f7ff ff4e 	bl	8006c8c <_fflush_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d0d9      	beq.n	8006da8 <__swbuf_r+0x2e>
 8006df4:	e7d6      	b.n	8006da4 <__swbuf_r+0x2a>
	...

08006df8 <__swsetup_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4b29      	ldr	r3, [pc, #164]	@ (8006ea0 <__swsetup_r+0xa8>)
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	460c      	mov	r4, r1
 8006e02:	b118      	cbz	r0, 8006e0c <__swsetup_r+0x14>
 8006e04:	6a03      	ldr	r3, [r0, #32]
 8006e06:	b90b      	cbnz	r3, 8006e0c <__swsetup_r+0x14>
 8006e08:	f7ff fa64 	bl	80062d4 <__sinit>
 8006e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e10:	0719      	lsls	r1, r3, #28
 8006e12:	d422      	bmi.n	8006e5a <__swsetup_r+0x62>
 8006e14:	06da      	lsls	r2, r3, #27
 8006e16:	d407      	bmi.n	8006e28 <__swsetup_r+0x30>
 8006e18:	2209      	movs	r2, #9
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e26:	e033      	b.n	8006e90 <__swsetup_r+0x98>
 8006e28:	0758      	lsls	r0, r3, #29
 8006e2a:	d512      	bpl.n	8006e52 <__swsetup_r+0x5a>
 8006e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e2e:	b141      	cbz	r1, 8006e42 <__swsetup_r+0x4a>
 8006e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e34:	4299      	cmp	r1, r3
 8006e36:	d002      	beq.n	8006e3e <__swsetup_r+0x46>
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 f90d 	bl	8007058 <_free_r>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f043 0308 	orr.w	r3, r3, #8
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	b94b      	cbnz	r3, 8006e72 <__swsetup_r+0x7a>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e68:	d003      	beq.n	8006e72 <__swsetup_r+0x7a>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f83f 	bl	8006ef0 <__smakebuf_r>
 8006e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e76:	f013 0201 	ands.w	r2, r3, #1
 8006e7a:	d00a      	beq.n	8006e92 <__swsetup_r+0x9a>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	60a2      	str	r2, [r4, #8]
 8006e80:	6962      	ldr	r2, [r4, #20]
 8006e82:	4252      	negs	r2, r2
 8006e84:	61a2      	str	r2, [r4, #24]
 8006e86:	6922      	ldr	r2, [r4, #16]
 8006e88:	b942      	cbnz	r2, 8006e9c <__swsetup_r+0xa4>
 8006e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e8e:	d1c5      	bne.n	8006e1c <__swsetup_r+0x24>
 8006e90:	bd38      	pop	{r3, r4, r5, pc}
 8006e92:	0799      	lsls	r1, r3, #30
 8006e94:	bf58      	it	pl
 8006e96:	6962      	ldrpl	r2, [r4, #20]
 8006e98:	60a2      	str	r2, [r4, #8]
 8006e9a:	e7f4      	b.n	8006e86 <__swsetup_r+0x8e>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	e7f7      	b.n	8006e90 <__swsetup_r+0x98>
 8006ea0:	2000001c 	.word	0x2000001c

08006ea4 <__swhatbuf_r>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	b096      	sub	sp, #88	@ 0x58
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	461e      	mov	r6, r3
 8006eb4:	da0d      	bge.n	8006ed2 <__swhatbuf_r+0x2e>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ebc:	f04f 0100 	mov.w	r1, #0
 8006ec0:	bf14      	ite	ne
 8006ec2:	2340      	movne	r3, #64	@ 0x40
 8006ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ec8:	2000      	movs	r0, #0
 8006eca:	6031      	str	r1, [r6, #0]
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	b016      	add	sp, #88	@ 0x58
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	466a      	mov	r2, sp
 8006ed4:	f000 f8ae 	bl	8007034 <_fstat_r>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dbec      	blt.n	8006eb6 <__swhatbuf_r+0x12>
 8006edc:	9901      	ldr	r1, [sp, #4]
 8006ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ee6:	4259      	negs	r1, r3
 8006ee8:	4159      	adcs	r1, r3
 8006eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eee:	e7eb      	b.n	8006ec8 <__swhatbuf_r+0x24>

08006ef0 <__smakebuf_r>:
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ef4:	079d      	lsls	r5, r3, #30
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	d507      	bpl.n	8006f0c <__smakebuf_r+0x1c>
 8006efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	2301      	movs	r3, #1
 8006f06:	6163      	str	r3, [r4, #20]
 8006f08:	b003      	add	sp, #12
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0c:	ab01      	add	r3, sp, #4
 8006f0e:	466a      	mov	r2, sp
 8006f10:	f7ff ffc8 	bl	8006ea4 <__swhatbuf_r>
 8006f14:	9f00      	ldr	r7, [sp, #0]
 8006f16:	4605      	mov	r5, r0
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff fc26 	bl	800676c <_malloc_r>
 8006f20:	b948      	cbnz	r0, 8006f36 <__smakebuf_r+0x46>
 8006f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f26:	059a      	lsls	r2, r3, #22
 8006f28:	d4ee      	bmi.n	8006f08 <__smakebuf_r+0x18>
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	f043 0302 	orr.w	r3, r3, #2
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	e7e2      	b.n	8006efc <__smakebuf_r+0xc>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	6020      	str	r0, [r4, #0]
 8006f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f46:	b15b      	cbz	r3, 8006f60 <__smakebuf_r+0x70>
 8006f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f80b 	bl	8006f68 <_isatty_r>
 8006f52:	b128      	cbz	r0, 8006f60 <__smakebuf_r+0x70>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	431d      	orrs	r5, r3
 8006f64:	81a5      	strh	r5, [r4, #12]
 8006f66:	e7cf      	b.n	8006f08 <__smakebuf_r+0x18>

08006f68 <_isatty_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d06      	ldr	r5, [pc, #24]	@ (8006f84 <_isatty_r+0x1c>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fa f8cd 	bl	8001112 <_isatty>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_isatty_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_isatty_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	20000458 	.word	0x20000458

08006f88 <_lseek_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d07      	ldr	r5, [pc, #28]	@ (8006fa8 <_lseek_r+0x20>)
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	4608      	mov	r0, r1
 8006f90:	4611      	mov	r1, r2
 8006f92:	2200      	movs	r2, #0
 8006f94:	602a      	str	r2, [r5, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f7fa f8c6 	bl	8001128 <_lseek>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d102      	bne.n	8006fa6 <_lseek_r+0x1e>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b103      	cbz	r3, 8006fa6 <_lseek_r+0x1e>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	20000458 	.word	0x20000458

08006fac <_read_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d07      	ldr	r5, [pc, #28]	@ (8006fcc <_read_r+0x20>)
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	602a      	str	r2, [r5, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f7fa f870 	bl	80010a0 <_read>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_read_r+0x1e>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_read_r+0x1e>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000458 	.word	0x20000458

08006fd0 <_sbrk_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d06      	ldr	r5, [pc, #24]	@ (8006fec <_sbrk_r+0x1c>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f7fa f8b2 	bl	8001144 <_sbrk>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_sbrk_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_sbrk_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20000458 	.word	0x20000458

08006ff0 <_write_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_write_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7f9 fb3c 	bl	800067c <_write>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_write_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_write_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000458 	.word	0x20000458

08007014 <_close_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d06      	ldr	r5, [pc, #24]	@ (8007030 <_close_r+0x1c>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fa f85b 	bl	80010da <_close>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_close_r+0x1a>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_close_r+0x1a>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	20000458 	.word	0x20000458

08007034 <_fstat_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	@ (8007054 <_fstat_r+0x20>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f7fa f856 	bl	80010f2 <_fstat>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d102      	bne.n	8007050 <_fstat_r+0x1c>
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	b103      	cbz	r3, 8007050 <_fstat_r+0x1c>
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	20000458 	.word	0x20000458

08007058 <_free_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4605      	mov	r5, r0
 800705c:	2900      	cmp	r1, #0
 800705e:	d041      	beq.n	80070e4 <_free_r+0x8c>
 8007060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007064:	1f0c      	subs	r4, r1, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfb8      	it	lt
 800706a:	18e4      	addlt	r4, r4, r3
 800706c:	f7ff fe36 	bl	8006cdc <__malloc_lock>
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <_free_r+0x90>)
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	b933      	cbnz	r3, 8007084 <_free_r+0x2c>
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6014      	str	r4, [r2, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007080:	f7ff be32 	b.w	8006ce8 <__malloc_unlock>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d908      	bls.n	800709a <_free_r+0x42>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	1821      	adds	r1, r4, r0
 800708c:	428b      	cmp	r3, r1
 800708e:	bf01      	itttt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	e7ed      	b.n	8007076 <_free_r+0x1e>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x4c>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x42>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1850      	adds	r0, r2, r1
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x6c>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	4401      	add	r1, r0
 80070b0:	1850      	adds	r0, r2, r1
 80070b2:	4283      	cmp	r3, r0
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1e0      	bne.n	800707a <_free_r+0x22>
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4408      	add	r0, r1
 80070c0:	6010      	str	r0, [r2, #0]
 80070c2:	e7da      	b.n	800707a <_free_r+0x22>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x74>
 80070c6:	230c      	movs	r3, #12
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	e7d6      	b.n	800707a <_free_r+0x22>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	1821      	adds	r1, r4, r0
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7ca      	b.n	800707a <_free_r+0x22>
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	20000454 	.word	0x20000454

080070ec <_init>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr

080070f8 <_fini>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr
